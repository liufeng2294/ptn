package com.nms.model.ptn.path.ces;

import java.util.ArrayList;
import java.util.List;

import org.apache.ibatis.session.SqlSession;

import com.nms.db.bean.ptn.path.ces.CesInfo;
import com.nms.db.dao.ptn.path.ces.CesInfoMapper;
import com.nms.model.util.ObjectService_Mybatis;
import com.nms.ui.manager.ExceptionManage;

public class CesInfoService_MB extends ObjectService_Mybatis{
	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}

	public void setSqlSession(SqlSession sqlSession) {
		super.sqlSession = sqlSession;
	}
	private CesInfoMapper cesInfoMapper;
	
	public CesInfoMapper getCesInfoMapper() {
		return cesInfoMapper;
	}

	public void setCesInfoMapper(CesInfoMapper cesInfoMapper) {
		this.cesInfoMapper = cesInfoMapper;
	}
	
	/**
	 * 过滤查询，ces列表页面用
	 * @param cesInfo 过滤条件
	 * @return
	 * @throws Exception
	 */
	public List<CesInfo> filterSelect(CesInfo cesInfo) throws Exception{
		return this.cesInfoMapper.filterQuery(cesInfo);
	}
	
	/**
	 * 查询单网元下的ces
	 * 
	 * @param siteId
	 * @return
	 * @throws Exception
	 */
	public List<CesInfo> selectNodeBySite(int siteId) throws Exception {
		List<CesInfo> cesinfos = null;
		try {
			cesinfos = this.cesInfoMapper.queryNodeBySite(siteId);

			for (CesInfo cesInfo : cesinfos) {
				cesInfo.setNode(true);
			}

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}

		return cesinfos;
	}

	public List<CesInfo> filterSingle(CesInfo cesInfo, int siteId) throws Exception{
		return this.cesInfoMapper.filterSingle(cesInfo, siteId);
	}
	
	
	public CesInfo selectByid(CesInfo cesInfo) throws Exception {
		CesInfo cesInfo2 = null;
		List<CesInfo> cesInfoList = null;
		try {
			cesInfoList = new ArrayList<CesInfo>();
			cesInfo2 =new CesInfo();
			cesInfoList = this.cesInfoMapper.queryByIdCondition(cesInfo);
			if(cesInfoList!=null && cesInfoList.size()>0){
				cesInfo2=cesInfoList.get(0);
			}
			
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return cesInfo2;
	}
}
