package com.nms.db.dao.system.code;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.system.code.Code;
import com.nms.ui.manager.ExceptionManage;
import com.nms.ui.manager.ResourceUtil;

public class CodeDao {
	/**
	 * 新增code
	 * 
	 * @param code
	 *            插入实体对象
	 * @param connection
	 *            数据库链接
	 * @return 插入记录数
	 * @throws Exception
	 */
	public int insert(Code code, Connection connection) throws Exception {

		if (null == code) {
			throw new Exception("code is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "insert into code(codeGroupId,codeName,codeValue,orderby,codeENName) values(?,?,?,?,?)";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, code.getCodeGroupId());
			preparedStatement.setString(2, code.getCodeName());
			preparedStatement.setString(3, code.getCodeValue());
			preparedStatement.setInt(4, code.getOrderby());
			preparedStatement.setString(5, code.getCodeENName());

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}

			sql = null;
		}

		return result;
	}

	/**
	 * 修改code
	 * 
	 * @param code
	 *            插入实体对象
	 * @param connection
	 *            连接数据库
	 * @return 插入的条数
	 * @throws Exception
	 */
	public int update(Code code, Connection connection) throws Exception {
		if (null == code) {
			throw new Exception("code is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "update code set codeGroupId=?,codeName=?,codeValue=?,orderby=?,codeENName=? where id=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, code.getCodeGroupId());
			preparedStatement.setString(2, code.getCodeName());
			preparedStatement.setString(3, code.getCodeValue());
			preparedStatement.setInt(4, code.getOrderby());
			preparedStatement.setString(5, code.getCodeENName());
			preparedStatement.setInt(6, code.getId());
			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 通过主键删除code对象
	 * 
	 * @param id
	 *            主键
	 * @param connection
	 *            连接数据库
	 * @return 删除的记录数
	 * @throws Exception
	 */
	public int delete(int id, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "delete from code where id=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, id);

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 根据codeGroupId删除code对象
	 */
	public int deleteBycodeGroupId(int codeGroupId, Connection connection)
			throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "delete from code where codeGroupId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, codeGroupId);

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 根据条件查询code
	 * 
	 * @param codeCondition
	 *            查询条件
	 * @param connection
	 *            连接数据库
	 * @return code集合
	 * @throws Exception
	 */
	public List<Code> queryByCondition(Code codeCondition, Connection connection)
			throws Exception {

		if (null == codeCondition) {
			throw new Exception("codeCondition is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<Code> codeList = null;
		String sql = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		Code code = null;

		try {
			codeList = new ArrayList<Code>();
			sql = "select id,codeName,codeGroupId , codeValue,orderby,codeENName  from code where 1=1";

			if (codeCondition.getId() > 0) {
				sql += " and id=" + codeCondition.getId();
			}

			if (codeCondition.getCodeGroupId() > 0) {
				sql += " and codeGroupId=" + codeCondition.getCodeGroupId();
			}

			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				code = new Code();
				code.setId(resultSet.getInt("id"));
				code.setCodeGroupId(resultSet.getInt("codeGroupId"));
				if ("en_US".equals(ResourceUtil.language)) {
					code.setCodeName(resultSet.getString("codeENName"));
				} else {
				code.setCodeName(resultSet.getString("codeName"));
				}
				code.setCodeValue(resultSet.getString("codeValue"));
				code.setOrderby(resultSet.getInt("orderby"));
				codeList.add(code);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
			code = null;
		}

		return codeList;

	}
	/**
	 * 根据条件查询code
	 * 
	 * @param codeCondition
	 *            查询条件
	 * @param connection
	 *            连接数据库
	 * @return code集合
	 * @throws Exception
	 */
	public List<Code> queryByCode(Code codeCondition, Connection connection)
	throws Exception {
		if (null == codeCondition) {
			throw new Exception("codeCondition is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		List<Code> codeList = null;
		String sql = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		Code code = null;
		try {
			codeList = new ArrayList<Code>();
			sql = "select id,codeName,codeGroupId , codeValue,orderby,codeENName  from code where 1=1";
			if (codeCondition.getId() > 0) {
				sql += " and id=" + codeCondition.getId();
			}
			if (codeCondition.getCodeGroupId() > 0) {
				sql += " and codeGroupId=" + codeCondition.getCodeGroupId();
			}
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				code = new Code();
				code.setId(resultSet.getInt("id"));
				code.setCodeGroupId(resultSet.getInt("codeGroupId"));
				code.setCodeName(resultSet.getString("codeName"));
				code.setCodeENName(resultSet.getString("codeENName"));
				code.setCodeValue(resultSet.getString("codeValue"));
				code.setOrderby(resultSet.getInt("orderby"));
				codeList.add(code);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
			code = null;
		}
		return codeList;
	}
}
