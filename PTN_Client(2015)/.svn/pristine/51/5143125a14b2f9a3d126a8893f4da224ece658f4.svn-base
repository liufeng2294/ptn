package com.nms.model.equipment.port;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.nms.db.bean.equipment.port.PortAttr;
import com.nms.db.bean.equipment.port.PortInst;
import com.nms.db.bean.equipment.shelf.SiteInst;
import com.nms.db.bean.path.Segment;
import com.nms.db.bean.ptn.path.tunnel.Lsp;
import com.nms.db.bean.ptn.port.AcPortInfo;
import com.nms.db.bean.ptn.port.PortLagInfo;
import com.nms.db.bean.ptn.qos.QosInfo;
import com.nms.db.bean.ptn.qos.QosQueue;
import com.nms.db.dao.equipment.port.PortAttrDao;
import com.nms.db.dao.equipment.port.PortInstDao;
import com.nms.db.dao.equipment.shelf.SiteInstDao;
import com.nms.db.dao.ptn.port.PortLagDao;
import com.nms.db.enums.EActionType;
import com.nms.db.enums.EQosDirection;
import com.nms.db.enums.EServiceType;
import com.nms.model.path.SegmentService;
import com.nms.model.ptn.oam.OamInfoService;
import com.nms.model.ptn.path.tunnel.LspService;
import com.nms.model.ptn.port.AcInfoService;
import com.nms.model.ptn.qos.QosInfoService;
import com.nms.model.ptn.qos.QosQueueService;
import com.nms.model.util.ObjectService;
import com.nms.model.util.Services;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.ExceptionManage;
import com.nms.ui.manager.ResourceUtil;
import com.nms.ui.manager.keys.StringKeysObj;

public class PortService extends ObjectService {

	public void setConnection(Connection connection) {
		super.connection = connection;
	}

	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}

	private PortInstDao portInstDao = new PortInstDao();
	private PortLagDao portLagDao = new PortLagDao();

	/**
	 * 新增或修改portinst对象，通过portinst.getportId()来判断是修改还是新增
	 * 
	 * @param portinst
	 * @return
	 * @throws Exception
	 */
	public int saveOrUpdate(PortInst portinst) throws Exception {

		if (portinst == null) {
			throw new Exception("portinst is null");
		}
		PortLagInfo portLagInfo = null;
		int result = 0;
		PortAttrDao portAttrDao = null;
		SiteInstDao siteDao = null;
		SiteInst site = null;
		List<SiteInst> siteList = null;
		try {
			if (portinst.getPortId() == 0) {
				siteDao = new SiteInstDao();
				site = new SiteInst();
				site.setSite_Inst_Id(portinst.getSiteId());
				siteList = siteDao.queryByCondition(site, connection);
				if(siteList != null && siteList.size() == 1){
					if(siteList.get(0).getManufacturer() == 0){
						if(portinst.getNumber()>0 && !portinst.getPortName().contains("e1")){
							portinst.setIsEnabled_code(1);
						}
					}
				}
				result = this.portInstDao.insert(portinst, connection);
				//离线网元数据下载
				super.dateDownLoad(portinst.getSiteId(),result, EServiceType.ETH.getValue(), EActionType.UPDATE.getValue(), portinst.getPortId()+"",null,0,0,null);
			} else {
				result = this.portInstDao.update(portinst, connection);
				//离线网元数据下载
				super.dateDownLoad(portinst.getSiteId(),portinst.getPortId(), EServiceType.ETH.getValue(), EActionType.UPDATE.getValue(), portinst.getPortId()+"",null,0,0,null);
				if (null != portinst.getLagInfo()) {
					if (portinst.getLagInfo().getId() > 0) {
						this.portLagDao.update(portinst.getLagInfo(), connection);
					} else {
						portLagInfo = new PortLagInfo();
						portLagInfo = portinst.getLagInfo();
						portLagInfo.setSiteId(portinst.getSiteId());
						portLagInfo.setPortId(portinst.getPortId());
						this.portLagDao.insert(portLagInfo, connection);
					}
				}

				// 修改端口属性表
				if (portinst.getPortAttr() != null) {
					portAttrDao = new PortAttrDao();
					portAttrDao.update(portinst.getPortAttr(), connection);
				}
			}

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			siteDao = null;
			site = null;
			siteList = null;
			portLagInfo = null;
			portAttrDao = null;
		}
		return result;
	}

	/**
	 * 通过主键删除port_inst对象
	 * 
	 * @param portId
	 *            主键
	 * @return 删除的记录数
	 * @throws Exception
	 */
	public int delete(int portId) throws Exception {
		int result = 0;
		try {
			result = portInstDao.delete(portId, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return result;

	}

	/**
	 * 查询PortInst全部
	 * 
	 * @return List<PortInst>集合
	 * @throws Exception
	 */
	public List<PortInst> select() throws Exception {
		List<PortInst> portinstList = null;
		PortInst portinst = null;
		try {
			portinst = new PortInst();
			portinstList = portInstDao.queryByCondition(portinst, connection);
			for (int i = 0; i < portinstList.size(); i++) {

				if (portinstList.get(i).getPortType().equals("stm-1")) {
					portinstList.get(i).setChildPortList(portInstDao.quertyChildPort(portinstList.get(i).getPortId(), connection));
				} else {
					portinstList.get(i).setChildPortList(new ArrayList<PortInst>());
				}
				this.setPortAttr(portinstList.get(i));
				portinstList.get(i).setQosQueues(findByPortId(portinstList.get(i).getPortId()));//封装qos队列信息
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}finally{
			portinst = null;
		}
		return portinstList;
	}

	/**
	 * 通过网元ID和端口名称查询
	 * @param siteId
	 * 			网元ID
	 * @param PortName
	 * 			端口名称
	 * @return
	 * @throws Exception
	 */
	public List<PortInst> selectPortbySiteandPortname(int siteId, String PortName) throws Exception {
		List<PortInst> portinstList = null;
		try {
			portinstList = portInstDao.quertyPortbySiteandName(siteId, PortName, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return portinstList;
	}
	
	/**
	 * 通过端口ID查询
	 * @param portid
	 * 			端口ID
	 * @return
	 * @throws Exception
	 */
	public PortInst selectPortybyid(int portid) throws Exception {
		PortInst port=null;
		try {
			port = portInstDao.selectPortybyid(portid, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return port;
	}
	
	/**
	 * 更加 条件 
	 * 		查询 端口（排除system）
	 * @param siteId
	 * @param PortName
	 * @return
	 * @throws Exception
	 */
	public List<PortInst> selectPortbyName(PortInst portInst) throws Exception {
		List<PortInst> portinstList = null;
		try {
			portinstList = portInstDao.queryByIsOccupy(portInst, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return portinstList;
	}

	/**
	 * 根据条件查询portinst
	 * 
	 * @param portinst
	 *            查询条件
	 * @return List<PortInst>集合s
	 * @throws Exception
	 */
	public List<PortInst> select(PortInst portinst) throws Exception {
		List<PortInst> portinstList = null;
		try {
			portinstList = portInstDao.queryByCondition(portinst, connection);

			for (int i = 0; i < portinstList.size(); i++) {
				if (portinstList.get(i).getPortType().equals("stm-1")) {
					portinstList.get(i).setChildPortList(portInstDao.quertyChildPort(portinstList.get(i).getPortId(), connection));
				} else {
					portinstList.get(i).setChildPortList(new ArrayList<PortInst>());
				}
				this.setPortAttr(portinstList.get(i));
				List<QosQueue> qosQueues = findByPortId(portinstList.get(i).getPortId());
				if(qosQueues != null && qosQueues.size()>0){
					portinstList.get(i).setQosQueues(qosQueues);
				}else{
					this.setPortQos(portinstList.get(i));
				}
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return portinstList;
	}

	/**
	 * 设置QOS
	 * @param portInst
	 * 			端口
	 * @throws Exception
	 */
	private void setPortQos(PortInst portInst) throws Exception {
		List<QosQueue> qosQueueList = new ArrayList<QosQueue>();
		try {
			for(int i =0;i<8;i++){
				QosQueue qosQueue = new QosQueue();
				qosQueue.setServiceId(0);
				qosQueue.setCos(i);
				qosQueue.setSiteId(portInst.getSiteId());
				qosQueue.setObjType("SECTION");
				qosQueue.setQueueType("SP");
				qosQueue.setMostBandwidth(ResourceUtil.srcStr(StringKeysObj.QOS_UNLIMITED));
				qosQueue.setWeight(1);
				qosQueue.setDisCard(50);
				qosQueue.setWredEnable(false);
				qosQueue.setGreenHighThresh(90);
				qosQueue.setGreenLowThresh(50);
				qosQueueList.add(qosQueue);
			}
			portInst.setQosQueues(qosQueueList);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
	}

	/**
	 * 把portattr属性查询出来赋给portinst
	 * 
	 * @author kk
	 * 
	 * @param
	 * 
	 * @return
	 * 
	 * @Exception 异常对象
	 */
	private void setPortAttr(PortInst portInst) throws Exception {
		PortAttrService portAttrService = null;
		PortAttr portAttr = null;
		try {
			portAttrService = (PortAttrService) ConstantUtil.serviceFactory.newService(Services.PortAttr, this.connection);
			portAttr = portAttrService.select_portId(portInst.getPortId());
			portInst.setPortAttr(portAttr);
		} catch (Exception e) {
			throw e;
		}finally{
//			UiUtil.closeService(portAttrService);
			portAttr = null;
		}

	}

	/**
	 * 修改状态
	 * @param portInst
	 * 				端口
	 * @throws Exception
	 */
	public void update(PortInst portInst) throws Exception {
		try {
			this.portInstDao.updatestatus(portInst, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
	}

	/**
	 * 同步时修改portinst
	 * 
	 * @author kk
	 * 
	 * @param portInst
	 *            端口对象
	 * 
	 * @return
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	public void update_synchro(PortInst portInst) throws Exception {
		this.portInstDao.update_synchro(portInst, connection);
		PortAttrDao portAttrDao = new PortAttrDao();
		if (null != portInst.getPortAttr()) {
			portAttrDao.update(portInst.getPortAttr(), connection);
		}
		//武汉端口无法同步
//		if (null != portInst.getQosQueues() && portInst.getQosQueues().size() > 0) {
//			for (QosQueue qosQueue : portInst.getQosQueues()) {
//				qosQueue.setObjId(portInst.getPortId());
//			}
//			if (portInst.getOamInfo() != null) {
//				OamInfoService oamInfoService = (OamInfoService) ConstantUtil.serviceFactory.newService(Services.OamInfo, this.connection);
//				oamInfoService.saveOrUpdate(portInst.getOamInfo());
//			}
//			QosQueueService qosQueueService = (QosQueueService) ConstantUtil.serviceFactory.newService(Services.QosQueue, this.connection);
//			qosQueueService.saveOrUpdate(portInst.getQosQueues());
//		}
	}

	/**
	 * 修改使能状态
	 * @param siteId
	 * @param status
	 * @param portType
	 * @throws Exception
	 */
	public void updateActiveStatus(int siteId, int status, String portType) throws Exception {

		try {
			connection.setAutoCommit(false);
			portInstDao.updateStatus(siteId, status, portType, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}

	}
	
	public void updateOccupyByIdList(List<Integer> idList, int isOccupy)throws Exception {
	
		try {
			connection.setAutoCommit(false);
			portInstDao.updateOccupyByIdList(idList, isOccupy, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
		
	}

	/**
	 * 查询端口剩余带宽
	 * 
	 * @param portId
	 * @return
	 * @throws Exception
	 */
	public Map<Integer, Integer> getResidueQos(int portId) throws Exception {
		QosQueueService qosQueueService = null;
		QosQueue qosQueue = null;
		List<QosQueue> portQosList = null;
		Map<Integer, Integer> mapResult = null;
		try {
			// 根据端口和类型查询出此端口的qos集合
			qosQueueService = (QosQueueService) ConstantUtil.serviceFactory.newService(Services.QosQueue, this.connection);
			qosQueue = new QosQueue();
			qosQueue.setObjId(portId);
			qosQueue.setObjType(EServiceType.SECTION.toString());
			portQosList = qosQueueService.queryByCondition(qosQueue);

			// 获取已用带宽和
			mapResult = this.getSumQos(portId);

			for (QosQueue qosQueueSelect : portQosList) {
				if(null == mapResult.get(qosQueueSelect.getCos())){
					mapResult.put(qosQueueSelect.getCos(), qosQueueSelect.getCir());
				}else{
					mapResult.put(qosQueueSelect.getCos(), qosQueueSelect.getCir() - mapResult.get(qosQueueSelect.getCos()));
				}
			}

		} catch (Exception e) {
			throw e;
		} finally {
//			UiUtil.closeService(qosQueueService);
		}
		return mapResult;
	}

	/**
	 * 查询端口下已用的总带宽
	 * 
	 * @param portId
	 * @return
	 * @throws Exception
	 */
	public Map<Integer, Integer> getSumQos(int portId) throws Exception {
		LspService lspService = null;
		List<Lsp> lspList = null;
		QosInfoService qosInfoService = null;
		List<QosInfo> qosInfoList = null;
		Map<Integer, Integer> mapResult = null;
		try {
			mapResult = new HashMap<Integer, Integer>();
			qosInfoService = (QosInfoService) ConstantUtil.serviceFactory.newService(Services.QosInfo, this.connection);

			// 查询此端口下的所有lsp
			lspService = (LspService) ConstantUtil.serviceFactory.newService(Services.LSPINFO, this.connection);
			lspList = lspService.selectByPort(portId);

			for (Lsp lsp : lspList) {
				// 查询此lsp对应的tunnel的qos
				qosInfoList = qosInfoService.getQosByObj(EServiceType.TUNNEL.toString(), lsp.getTunnelId());
				if(null != qosInfoList && qosInfoList.size() > 0){
				// 遍历QOS 根据端口比较。添加到map集合中
				for (QosInfo qosInfoSelect : qosInfoList) {
					// 取前向
					if (lsp.getAPortId() == portId) {
							if (Integer.parseInt(qosInfoSelect.getDirection()) == EQosDirection.FORWARD.getValue()) {
							this.setMap(mapResult, qosInfoSelect);
						}

					} else {
						// 取后向
							if (Integer.parseInt(qosInfoSelect.getDirection()) == EQosDirection.BACKWARD.getValue()) {
							this.setMap(mapResult, qosInfoSelect);
						}
					}
				}
			}
			}

		} catch (Exception e) {
			throw e;
		} finally {
		}
		return mapResult;
	}

	/**
	 * 通过qos给map赋值
	 * 
	 * @param map
	 * @param qosInfo
	 * @throws Exception
	 */
	private void setMap(Map<Integer, Integer> map, QosInfo qosInfo) throws Exception {
		if (null == map) {
			throw new Exception("map is null");
		}
		if (null == qosInfo) {
			throw new Exception("qosInfo is null");
		}
		try {

			// 如果为null 直接赋值，否则做带宽和
			if (null == map.get(qosInfo.getCos())) {
				map.put(qosInfo.getCos(), qosInfo.getCir());
			} else {
				map.put(qosInfo.getCos(), map.get(qosInfo.getCos()) + qosInfo.getCir());
			}

		} catch (Exception e) {
			throw e;
		}
	}
	
	/**
	 * 初始化端口信息（武汉）
	 * @param siteId
	 */
	public void initializtionSite(int siteId){
		PortInst portInst = null;
		List<PortInst> portInsts = null;
		try {
			portInst = new PortInst();
			portInst.setSiteId(siteId);
			portInsts = select(portInst);
			if(portInsts != null && portInsts.size()>0){
				for(PortInst inst : portInsts){
					if("NNI".equals(inst.getPortType()) || "UNI".equals(inst.getPortType())){
						inst.setPortType("NONE");
//						inst.setIsOccupy(0);
//						inst.setIsEnabled_code(0);
						saveOrUpdate(inst);
					}
				}
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}finally{
			portInst = null;
			portInsts = null;
		}
		
	}
	
	/**
	 * 根据端口ID和类型查询qos队列
	 * 
	 * @param portId
	 * @return
	 * @throws Exception
	 */
	private List<QosQueue> findByPortId(int portId) throws Exception {
		QosQueueService qosQueueService = null;
		QosQueue qos = null;
		List<QosQueue> list = null;
		try {
			qosQueueService = (QosQueueService) ConstantUtil.serviceFactory.newService(Services.QosQueue, this.connection);
			qos = new QosQueue();
			qos.setObjId(portId);
			qos.setObjType("SECTION");
			list = qosQueueService.queryByCondition(qos);
		} catch (Exception e) {
			throw e;
		} finally {
//			UiUtil.closeService(qosQueueService);
		}

		return list;

	} 
	
	/**
	 * 获取端口名称
	 * 
	 * @param portId
	 * @return
	 * @throws Exception
	 */
	public String getPortname(int portId) throws Exception {

		PortInst portInst = null;
		List<PortInst> portInstList = null;
		String result = null;
		try {
			portInst = new PortInst();
			portInst.setPortId(portId);
			portInstList = this.select(portInst);

			if (null == portInstList || portInstList.size() != 1) {
				result = "";
			} else {
				result = portInstList.get(0).getPortName();
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			portInst = null;
		}
		return result;
	}
	
	public List<PortInst> selectNniPortname(int siteId) throws Exception {

		List<PortInst> portInstList = new ArrayList<PortInst>();
		try {
			portInstList = portInstDao.quertyNNIPortbySiteId(siteId, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} 
		return portInstList;
	}
	
	/**
	 * 查询以太网端口是否被占用， 要查询段、tunnel、ac、lag
	 * @param portInst 端口信息
	 * @return true=占用  false=空闲
	 * @throws Exception 
	 */
	public boolean getPortUse(PortInst portInst) throws Exception{
		boolean flag=true;	//默认占用
		AcInfoService acInfoService=null;
		AcPortInfo acPortInfo=null;
		List<AcPortInfo> acPortInfoList=null;
		SegmentService segmentService=null;
		List<Segment> segmentList=null;
		LspService lspService=null;
		List<Lsp> lspList=null;
		try {
			if("NONE".equals(portInst.getPortType())){
				flag=false;
			}else{
				//验证有没有被lag使用
				if(portInst.getLagId() == 0){
					flag=false;
				}else{
					//如果是UNI 验证是否创建了AC
					if("UNI".equals(portInst.getPortType())){
						acInfoService=(AcInfoService) ConstantUtil.serviceFactory.newService(Services.AcInfo, this.connection);
						acPortInfo=new AcPortInfo();
						acPortInfo.setPortId(portInst.getPortId());
						acPortInfoList = acInfoService.selectByCondition(acPortInfo);
						//没查到。 空闲
						if(null==acPortInfoList || acPortInfoList.size()==0){
							flag=false;
						}
					}else if("NNI".equals(portInst.getPortType())){
						//如果是NNI 验证是否创建了段和tunnel
						segmentService=(SegmentService) ConstantUtil.serviceFactory.newService(Services.SEGMENT, this.connection);
						segmentList = segmentService.selectBySegmentPortId(portInst.getPortId());
						//没查到段，去查tunnel
						if(null==segmentList||segmentList.size()==0){
							lspService=(LspService) ConstantUtil.serviceFactory.newService(Services.LSPINFO, this.connection);
							lspList = lspService.selectByPort(portInst.getPortId());
							//没查到 空闲
							if(null==lspList||lspList.size()==0){
								flag=true;
							}
						}
					}
				}
			}
			
		} catch (Exception e) {
			throw e;
		} finally{
			acPortInfo=null;
			acPortInfoList=null;
			segmentList=null;
			lspList=null;
		}
		return flag;
	}
	
	public List<PortInst> getAllPortByIds(List<Integer> ids,int siteId)throws Exception
	{
		return this.portInstDao.quertyAllPortByIds(ids,siteId,connection);
	}

	public List<String> getAllPortNameByNumber(List<Integer> ids,int siteId)throws Exception
	{
		return this.portInstDao.quertyAllPortNameByNumber(ids,siteId,connection);
	}
	/**
	 * 根据网元和业务类型查询e1端口和UNI端口
	 * 
	 * @param portId
	 * @return
	 * @throws Exception
	 */
	public List<PortInst> selectE1Portname(int siteId,String type) throws Exception {

		List<PortInst> portInstList = new ArrayList<PortInst>();
		try {
			portInstList = portInstDao.quertyUniOrE1PortbySiteId(siteId, type,connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} 
		return portInstList;
	}
}
