package com.nms.db.dao.system.loginlog;

import java.net.InetAddress;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.nms.db.bean.system.loginlog.LoginLog;
import com.nms.db.fac.f.DButil;
import com.nms.ui.manager.DateUtil;
import com.nms.ui.manager.ExceptionManage;

/**
 * 操作login_log表
 * 
 * @author Administrator
 * 
 */
public class LoginLogDao {

	private final int ORDER = 4;// 查询近期登陆4次的信息，判定账户是否锁定
	private final int MAX = 1;// 查询上次登陆信息，确定是否已经登陆

	/**
	 * 新增 login_log(用户登陆日志表)
	 * 
	 * @param state
	 *            int型数据（0登陆失败，1 登陆成功）
	 * @param loginlog
	 *            实体
	 * @param connection
	 *            数据库连接
	 * @return 执行成功插入的记录数
	 * @throws Exception
	 */
	public LoginLog insertLoginLog(LoginLog loginLog, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		if(null==loginLog){
			throw new Exception("logingLog is null");
		}
		PreparedStatement preparedStatement = null;
		LoginLog log = new LoginLog();
		log.setUser_id(loginLog.getUser_id());
		String date = DateUtil.getDate(DateUtil.FULLTIME);
		log.setLoginTime(date);
		log.setIP(InetAddress.getLocalHost().getHostAddress());
		String sql="insert into login_log(user_id,loginTime,IP,state,loginState) values (?,?,?,?,?)";
		int result=0;
		try {
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, loginLog.getUser_id());
			preparedStatement.setString(2, date);
			preparedStatement.setString(3, InetAddress.getLocalHost().getHostAddress());
			preparedStatement.setInt(4, loginLog.getState());
			preparedStatement.setInt(5, loginLog.getLoginState());
			result=preparedStatement.executeUpdate();
			if(result>0){
				return log;
			}else{
				 throw new Exception("添加失败");
			}
		}catch(Exception e){
			throw e;
		}
		finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}			
		}
	}

	/**
	 * login_log表 更新表中信息
	 * 
	 * @param user_name
	 * @throws Exception
	 */

	public int updateExitLoginLog(LoginLog loginlog, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		if (null == loginlog) {
			throw new Exception("loginlog is null");
		}
		PreparedStatement preparedStatement = null;
		int result = 0;
		String sql = "update login_log set outTime=?,logoutState=? where 1=1";
		try {
			if (loginlog.getId() > 0) {
				sql += " and id=" + loginlog.getId();
			}
			if( loginlog.getUser_id() > 0){
				sql += " and user_id=" + loginlog.getUser_id();
			}
			if(loginlog.getLoginTime() != null || !"".equals(loginlog.getLoginTime())){
				sql += " and loginTime='" + loginlog.getLoginTime()+"'";
			}
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, DateUtil.getDate(DateUtil.FULLTIME));
			preparedStatement.setInt(2, loginlog.getLogoutState());
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
	}

	/**
	 * 查询 表login_log
	 * 
	 * @param loginlog
	 * @param order
	 *            order=1时，查看上一次登陆记录，是否已经登陆 order=3时，查看近期3次登陆记录。是否已经自动锁定
	 * @param connection
	 *            连接
	 * @return
	 * @throws Exception
	 */
	public List<LoginLog> findState(LoginLog loginlog, int order, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		if (null == loginlog) {
			throw new Exception("connection is null");
		}
		List<LoginLog> loginlogList = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		try {
			String sql = "select id,user_id,loginTime,outTime,state,loginState,logoutState from login_log  where 1=1 ";

			if (loginlog.getUser_id() > 0) {

				if (order == this.MAX) {
					sql += " and user_id=" + loginlog.getUser_id() + " order by loginTime DESC LIMIT 0," + order;
				} else if (order == this.ORDER) {
					sql += " and user_id=" + loginlog.getUser_id() + " order by loginTime DESC LIMIT 0," + order;
				} else {
					sql += " and user_id=" + loginlog.getUser_id();
				}
			}else {

			}
			loginlogList = new ArrayList<LoginLog>();
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				LoginLog log = new LoginLog();
				log.setId(resultSet.getInt("id"));
				log.setUser_id(resultSet.getInt("user_id"));
				log.setLoginTime(resultSet.getString("loginTime"));
				log.setOutTime(resultSet.getString("outTime"));
				log.setState(resultSet.getInt("state"));
				log.setLoginState(resultSet.getInt("loginState"));
				log.setLogoutState(resultSet.getInt("logoutState"));
				loginlogList.add(log);
			}
		}catch(Exception e){ 
			throw e;
		}
		finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		return loginlogList;
	}

	/**
	 * 查询 表login_log
	 * 
	 * @param loginlog
	 * @param order
	 *            order=1时，查看上一次登陆记录，是否已经登陆 根据IP来查看当前是哪个用户在登入的
	 * @param connection
	 *            连接
	 * @return
	 * @throws Exception
	 */

	public List<LoginLog> findStateIP(String ipAddress, int order, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		List<LoginLog> loginlogList = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		try {
			String sql = "select id,user_id,loginTime,outTime,state,loginState,logoutState from login_log  where IP=? ";

			if (order == this.MAX) {
				sql += " order by loginTime DESC LIMIT 0," + order;
			} else if (order == this.ORDER) {
				sql += " order by loginTime DESC LIMIT 0," + order;
			}
			loginlogList = new ArrayList<LoginLog>();
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, ipAddress);
			resultSet = preparedStatement.executeQuery();
			loginlogList=this.consertQuery(resultSet);
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
		}
		return loginlogList;
	}

	/**
	 * 查看登陆日志
	 */
	public List<LoginLog> queryByidCondition(LoginLog loginlog, Connection connection) throws Exception {

		List<LoginLog> loginList = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		LoginLog log = null;
		String sql = null;
		List<Object> parameterList = null;
		try {
			parameterList = new ArrayList<Object>();
			loginList = new ArrayList<LoginLog>();
			sql = "select u.user_name,l.user_id,loginTime,outTime,IP,loginState,logoutState from login_log l,user_inst u where state=1";
			if (loginlog.getUser_id() > 0) {
				sql += " and u.user_id= " + loginlog.getUser_id() + " and l.user_id=u.user_id";
			} else if (loginlog.getUser_name() != null && !loginlog.getUser_name().equals("")) {
				// 复选框选中： 模糊查询
				if(loginlog.isSelect()){
					sql += " and l.user_id=u.user_id and u.user_name like ?";	
					parameterList.add("%" + loginlog.getUser_name() + "%");
				}else{
					//精确查询
					sql += " and l.user_id=u.user_id and u.user_name = "+DButil.toSingleMark(loginlog.getUser_name());
				}									
			} else {
				sql += " and l.user_id=u.user_id";
			}
			//如果用户名不为空，
			if(null!=loginlog.getLoginIp()&&!"".equals(loginlog.getLoginIp())){
				//是否为模糊查询
				if(loginlog.isIpSelect()){
					sql +=" and l.IP like "+ "'%" + loginlog.getLoginIp() + "%'";
				}else{
					sql +=" and l.IP =  "+DButil.toSingleMark(loginlog.getLoginIp());
				}
			}
			
			//判断 ：登录开始时间的  2个时间点都选中时
			if((!("".equals(loginlog.getLoginBeginTime())||loginlog.getLoginBeginTime()==null))&&(!"".equals(loginlog.getLoginEndTime())||loginlog.getLoginEndTime()!=null)){					
				sql +=" and l.loginTime between '"+loginlog.getLoginBeginTime()+"' and '"+ loginlog.getLoginEndTime()+" ' ";				
			}
			
			// 判断 ：登录开始时间的  2个时间点 不  都选中时
			if(("".equals(loginlog.getLoginBeginTime())||loginlog.getLoginBeginTime()==null)||("".equals(loginlog.getLoginEndTime())||loginlog.getLoginEndTime()==null)){
				//    第2个时间点不为空，-且有 选中时
				if(!("".equals(loginlog.getLoginEndTime())||loginlog.getLoginEndTime()==null)){
					sql +=" and l.loginTime < '"+loginlog.getLoginEndTime()+"'";				
				}else if(!("".equals(loginlog.getLoginBeginTime())||loginlog.getLoginBeginTime()==null)){
//				    第1个时间点不为空，-且有 选中时
					sql +=" and l.loginTime > '"+loginlog.getLoginBeginTime()+" '";				
				}
			}
			
			//判断 ：离开时间的  2个时间点都选中时
			if((!("".equals(loginlog.getLeaveBeginTime())||loginlog.getLeaveBeginTime()==null))&&(!"".equals(loginlog.getLeaveEndTime())||loginlog.getLeaveEndTime()!=null)){					
				sql +=" and l.outTime between '"+loginlog.getLeaveBeginTime()+"' and '"+ loginlog.getLeaveEndTime()+" ' ";				
			}
			// 判断 ：离开时间的  2个时间点 不  都选中时
			if(("".equals(loginlog.getLeaveBeginTime())||loginlog.getLeaveBeginTime()==null)||("".equals(loginlog.getLeaveEndTime())||loginlog.getLeaveEndTime()==null)){
				//    第2个时间点不为空，-且有 选中时
				if(!("".equals(loginlog.getLeaveEndTime())||loginlog.getLeaveEndTime()==null)){
					sql +=" and l.outTime < '"+loginlog.getLeaveEndTime()+"'";				
				}else if(!("".equals(loginlog.getLeaveBeginTime())||loginlog.getLeaveBeginTime()==null)){
					sql +=" and l.outTime > '"+loginlog.getLeaveBeginTime()+" '";				
				}
			}
			//查看登陆成功/失败
			if(loginlog.getLoginState() > 0){
				sql += " and l.loginState = " + loginlog.getLoginState();
			}
			//查看退出成功/失败
			if(loginlog.getLogoutState() > 0){
				sql += " and l.logoutState = " + loginlog.getLogoutState();
			}
			
			sql +=" order by loginTime desc";
			preparedStatement = connection.prepareStatement(sql);
			// 添加参数
			if (parameterList.size() > 0) {
				for (int i = 0; i < parameterList.size(); i++) {
					preparedStatement.setObject(i + 1, parameterList.get(i));
				}
			}
			
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				log = new LoginLog();
				String logtime = resultSet.getString("outTime");
				log.setUser_name(resultSet.getString("u.user_name"));
				log.setUser_id(resultSet.getInt("user_id"));
				log.setLoginTime(resultSet.getString("loginTime"));
				log.setOutTime(resultSet.getString("outTime"));
				log.setLoginState(resultSet.getInt("loginState"));
				log.setLogoutState(resultSet.getInt("logoutState"));
				Date logindate = df.parse(resultSet.getString("loginTime").trim());
				if (null == logtime || "".equals(logtime)) {
					log.setOnLineTime("");
				} else {
					Date outdate = df.parse(resultSet.getString(4).trim());				
					long time = outdate.getTime() - logindate.getTime();

					long hour = time / (60 * 60 * 1000);
					long minute = (time - hour * 60 * 60 * 1000) / (60 * 1000);
					long second = (time - hour * 60 * 60 * 1000 - minute * 60 * 1000) / 1000;
					if (second >= 60) {
						second = second % 60;
						minute += second / 60;
					}
					if (minute >= 60) {
						minute = minute % 60;
						hour += minute / 60;
					}
					String sh = "";
					String sm = "";
					String ss = "";
					if (hour < 10) {
						sh = "0" + String.valueOf(hour);
					} else {
						sh = String.valueOf(hour);
					}
					if (minute < 10) {
						sm = "0" + String.valueOf(minute);
					} else {
						sm = String.valueOf(minute);
					}
					if (second < 10) {
						ss = "0" + String.valueOf(second);
					} else {
						ss = String.valueOf(second);
					}
					log.setOnLineTime(sh + ":" + sm + ":" + ss);
				}
				log.setIP(resultSet.getString("IP"));

				loginList.add(log);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				preparedStatement = null;
			}
			sql = null;
			log = null;
		}
		return loginList;
	}

	/*
	 * *在线查询*
	 */
	public List<LoginLog> selectOnLine(Connection connection) throws Exception {

		List<LoginLog> loginLogList = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		LoginLog loginLog = null;
		String sql = null;
		try {
			loginLogList = new ArrayList<LoginLog>();
			sql = "SELECT id,u.user_name,loginTime,IP,loginState,logoutState FROM login_log l,user_inst u WHERE (outTime IS NULL OR outTime = '')AND state = 1 AND u.user_id = l.user_id";
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				loginLog = new LoginLog();
				loginLog.setUser_name(resultSet.getString("u.user_name"));
				loginLog.setId(resultSet.getInt("id"));
				loginLog.setLoginTime(resultSet.getString("loginTime"));
				loginLog.setIP(resultSet.getString("IP"));
				loginLog.setLoginState(resultSet.getInt("loginState"));
				loginLog.setLogoutState(resultSet.getInt("logoutState"));
				loginLogList.add(loginLog);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return loginLogList;

	}

	/**
	 * 查询 表login_log user_id和logintTime，为查询条件
	 * 
	 * @param loginTime
	 * @param connection
	 *            连接
	 * @return
	 * @throws Exception
	 */
	public LoginLog findLoginTime(LoginLog loginlog, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		if (null == loginlog) {
			throw new Exception("connection is null");
		}
		LoginLog log = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		List<LoginLog> loginLog=null;
		String sql = "select id,user_id,loginTime,outTime,state,loginState,logoutState from login_log  where 1=1 ";
		try {
			if (loginlog.getUser_id() > 0) {
				String date = loginlog.getLoginTime();
				sql += " and user_id= " + loginlog.getUser_id() + "  and loginTime= " + "'" + date + "'";
			}
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			loginLog=this.consertQuery(resultSet);
			if(loginLog!=null&&loginLog.size()==1){
				log=loginLog.get(0);
			}
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				preparedStatement = null;
			}
		}
		return log;
	}

	/**
	 * 移除某一时间 以前的数据
	 * 
	 * @param loginLog
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int delete(List<LoginLog> loginLogList, String removeTime, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		if (null == removeTime || removeTime.equals("")) {
			throw new Exception("removeTime is null or “”");
		}

		String sql = " delete from login_log  where 1=1";
		List<Integer> idList = new ArrayList<Integer>();
		int result = 0;
		PreparedStatement preparedStatement = null;
		try {
			if (loginLogList != null && loginLogList.size() > 0) {
				for (LoginLog loginLog : loginLogList) {
					idList.add(loginLog.getId());
					sql += " and id !=" + loginLog.getId();
				}
			}
			sql += " and loginTime < '" + removeTime + "'";
			preparedStatement = connection.prepareStatement(sql);
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
	}

	/**
	 * 根据角色ID修改在线用户的离开时间 达到强制下线的目的
	 * 
	 * @author kk
	 * @param roleId
	 *            角色主键
	 * @param connection
	 *            数据库连接对象
	 * @throws Exception
	 */
	public void updateByRole(int roleId, Connection connection) throws Exception {

		if (roleId == 0) {
			throw new Exception("roleid is 0");
		}

		if (null == connection) {
			throw new Exception("connection is 0");
		}
		PreparedStatement preparedStatement = null;
		String sql="UPDATE login_log l SET l.outtime=NOW(),l.logoutState=0 WHERE l.user_id IN (select u.user_id FROM user_inst u where roleInfo_id=?) and l.outtime is NULL";
		try {
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, roleId);

			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			
		}

	}
	/**
	 * 处理查询语句
	 * @param resultSet
	 * @return
	 * @throws Exception
	 */
	private List<LoginLog> consertQuery(ResultSet resultSet) throws Exception{
		if(null==resultSet){
			throw new Exception(" resultSet is null");
		}
		List<LoginLog> loginLogList=null;
		try{
			loginLogList=new ArrayList<LoginLog>();
			while (resultSet.next()) {
				LoginLog log = new LoginLog();
				log.setId(resultSet.getInt(1));
				log.setUser_id(resultSet.getInt(2));
				log.setLoginTime(resultSet.getString(3));
				log.setOutTime(resultSet.getString(4));
				log.setState(resultSet.getInt(5));
				log.setLoginState(resultSet.getInt(6));
				log.setLogoutState(resultSet.getInt(7));
				loginLogList.add(log);
			}
		}catch(Exception e){
			ExceptionManage.dispose(e, getClass());
		}
		return loginLogList;
	}
	
	/**
	 * 删除网元的失败的状态
	 * @param resultSet
	 * @return
	 * @throws Exception
	 */
	public void deleteFailState(LoginLog loginlog,Connection connection) throws Exception{
		
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;

		try {
			sql = "delete from login_log where user_id=? and state =?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, loginlog.getUser_id());
			preparedStatement.setInt(2, loginlog.getState());
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
	}
	
	/**
	 * 数据库中有多少条记录
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int selectLogCount(Connection connection)throws Exception{
		PreparedStatement preparedStatement=null;
		ResultSet resultSet=null;
		int result=0;
		try {
			String sql="select count(*) from login_log";
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			
			while(resultSet.next()){
				result=resultSet.getInt("count(*)");
			}
		} catch (Exception e) {
			throw e;
		}finally{
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
	}
	
	/**
	 * 根据主键集合，批量删除历史性能数据
	 * 
	 * @param idList
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int delete(List<Integer> idList, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		String ids = null;
		try {
			ids = idList.toString().substring(1, idList.toString().length() - 1);
			sql = "delete from login_log where id in (" + ids + " )";
			preparedStatement = connection.prepareStatement(sql);
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}

		return result;
	}
}
