package com.nms.db.dao.ptn.ecn;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.ecn.MCN;

public class MCNDao {
	private final String SQL_SELECTBYID = "SELECT * from ecn_mcn WHERE neId = ?";
	private final String SQL_SELECTBYSITEIDANDIP = "SELECT * from ecn_mcn WHERE neId = ? and ip = ?";
	private final String SQL_UPDATE = "UPDATE ecn_mcn SET ip = ? , mtu = ? WHERE neId = ?";
	private final String SQL_INSERT = "insert into ecn_mcn (neId,ip,mtu) values (?,?,?)";
	private final String SQL_DELETE="delete from ecn_mcn where neid=?";

	/**
	 * 通过网元ID查询
	 * @param NeID
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<MCN> queryByNeID(String NeID, Connection connection) throws Exception {
		if (null == NeID) {
			throw new Exception("NeID is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<MCN> mcnList = null;
		MCN mcn = null;
		try {
			preparedStatement = connection.prepareStatement(SQL_SELECTBYID);
			preparedStatement.setInt(1, Integer.valueOf(NeID));//
			resultSet = preparedStatement.executeQuery();
			mcnList = new ArrayList<MCN>();
			while (resultSet.next()) {
				mcn = new MCN();
				mcn.setId(resultSet.getInt(1));
				mcn.setNeId(resultSet.getString(2));
				mcn.setIp(resultSet.getString(3));
				mcn.setMtu(resultSet.getInt(4));
				mcnList.add(mcn);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if(null!=resultSet){
				try {
					resultSet.close();
				} catch (Exception e2) {
					throw e2;
				}
				resultSet=null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			mcn = null;
		}
		return mcnList;
	}

	/**
	 * 修改MCN
	 * @param mcn
	 * 			MCN
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int update(MCN mcn, Connection connection) throws Exception {
		if (null == mcn) {
			throw new Exception("mcn is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			preparedStatement = connection.prepareStatement(SQL_UPDATE);
			preparedStatement.setString(1, mcn.getIp());
			preparedStatement.setInt(2, mcn.getMtu());
			preparedStatement.setString(3, mcn.getNeId());

			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e2) {
					throw e2;
				}
				preparedStatement=null;
			}
		}
		return result;
	}

	/**
	 * 添加
	 * @param neId
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int insert(int neId, Connection connection) throws Exception {
		if (0 == neId) {
			throw new Exception("neId is 0");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		int result = 0;
		try {
			preparedStatement = connection.prepareStatement(SQL_INSERT);
			preparedStatement.setString(1, neId+"");
			preparedStatement.setString(2, "10.1.1.254/32");
			preparedStatement.setInt(3, 1500);

			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e2) {
					throw e2;
				}
				preparedStatement=null;
			}
		}
		return result;
	}
	
	
	/**
	 * 
	
	* queryBySiteIdAndIp通过siteid和ip查询mcn 
	
	* @author wangwf
	
	* @param   siteId, ip
	 
	* @return 
	
	* @Exception 异常对象
	 */
	public List<MCN> queryBySiteIdAndIp(int siteId, String ip, Connection connection) throws Exception {
		if (null == ip) {
			throw new Exception("ip is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<MCN> mcnList = null;
		MCN mcn = null;
		try {
			preparedStatement = connection.prepareStatement(SQL_SELECTBYSITEIDANDIP);
			preparedStatement.setInt(1, siteId);
			preparedStatement.setString(2, ip);
			resultSet = preparedStatement.executeQuery();
			mcnList = new ArrayList<MCN>();
			while (resultSet.next()) {
				mcn = new MCN();
				mcn.setId(resultSet.getInt(1));
				mcn.setNeId(resultSet.getString(2));
				mcn.setIp(resultSet.getString(3));
				mcn.setMtu(resultSet.getInt(4));
				mcnList.add(mcn);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if(null!=resultSet){
				try {
					resultSet.close();
				} catch (Exception e2) {
					throw e2;
				}
				resultSet=null;
			}
			
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			mcn = null;
		}
		return mcnList;
	}
	
	/**
	 * 
	
	* insert mcn
	
	* @author wangwf
	
	* @param   MCN
	
	* @return 
	
	* @Exception 异常对象
	 */
	public int insert(MCN mcn, Connection connection) throws Exception {
		if (null == mcn) {
			throw new Exception("mcn is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		int result = 0;
		try {
			preparedStatement = connection.prepareStatement(SQL_INSERT);
			preparedStatement.setString(1, mcn.getNeId());
			preparedStatement.setString(2, mcn.getIp());
			preparedStatement.setInt(3, mcn.getMtu());

			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e2) {
					throw e2;
				}
				preparedStatement=null;
			}
		}
		return result;
	}
	
	/**
	 * 根据网元删除MCN
	 * @param siteId 网元ID
	 * @param connection
	 * @throws Exception 
	 */
	public void deleteBySite(int siteId,Connection connection) throws Exception{
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		try {
			preparedStatement = connection.prepareStatement(this.SQL_DELETE);
			preparedStatement.setString(1, siteId+"");

			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e2) {
					throw e2;
				}
				preparedStatement=null;
			}
		}
	}
	
}
