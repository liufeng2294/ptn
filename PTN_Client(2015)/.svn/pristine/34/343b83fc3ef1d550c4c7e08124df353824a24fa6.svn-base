package com.nms.db.dao.ptn;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.SiteRoate;
import com.nms.db.enums.EManufacturer;
import com.nms.db.fac.f.DButil;
import com.nms.model.equipment.shlef.SiteService;
import com.nms.model.equipment.shlef.SiteService_MB;
import com.nms.model.util.Services;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.ExceptionManage;
import com.nms.ui.manager.UiUtil;

/**
 * 倒换命令 Dao(网元下所有类型 公用)
 * @author sy
 *
 */
public class SiteRoateDao {
	
	/**
	 * 新增 （某个类型的 倒换命令）
	 * @param siteRoate
	 * @param connection
	 * @return   result  新增数据条数
	 *   1  成功
	 *   0失败
	 * @throws Exception
	 */
	public int insert(SiteRoate siteRoate,Connection connection)throws Exception{
		if (null == siteRoate) {
			throw new Exception("siteRoate is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		int result=0;
		String  sql="";
		SiteService_MB siteService = null;
		try {		
			siteService=(SiteService_MB) ConstantUtil.serviceFactory.newService_MB(Services.SITE);
			//陈晓
			if(EManufacturer.CHENXIAO.getValue() == siteService.getManufacturer(siteRoate.getSiteId())){
				sql="insert into site_roate (siteId,type,typeId,roate) values(?,?,?,?)";
				preparedStatement = connection.prepareStatement(sql);
				preparedStatement.setInt(1,siteRoate.getSiteId());
				preparedStatement.setInt(3,siteRoate.getTypeId());
				preparedStatement.setString(2,siteRoate.getType());
				preparedStatement.setInt(4,siteRoate.getRoate());
				result=preparedStatement.executeUpdate();
			}
			//武汉
			else{
				sql="insert into site_roate (siteId,type,typeId,roate,siteRoate) values(?,?,?,?,?)";
				preparedStatement = connection.prepareStatement(sql);
				preparedStatement.setInt(1,siteRoate.getSiteId());
				preparedStatement.setInt(3,siteRoate.getTypeId());
				preparedStatement.setString(2,siteRoate.getType());
				preparedStatement.setInt(4,siteRoate.getRoate());
				preparedStatement.setInt(5,siteRoate.getSiteRoate());
				result=preparedStatement.executeUpdate();
				
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			UiUtil.closeService_MB(siteService);
		}
		return result;
	}
	/**
	 * 更新  某个类型的倒换命令
	 * @param siteRoate
	 * @param connection
	* @return   result  新增数据条数
	 *   1  成功
	 *   0失败
	 * @throws Exception
	 */
	public int update(SiteRoate siteRoate,Connection connection )throws Exception{
		if (null == siteRoate) {
			throw new Exception("siteRoate is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		int result=0;
		String sql;
		SiteService_MB siteService = null;
		try {		
			siteService=(SiteService_MB) ConstantUtil.serviceFactory.newService_MB(Services.SITE);
			//陈晓
			if(EManufacturer.CHENXIAO.getValue() == siteService.getManufacturer(siteRoate.getSiteId())){
				sql="update site_roate set roate=? where siteId=? and type=? and typeId=?";
				preparedStatement = connection.prepareStatement(sql);
				preparedStatement.setInt(2,siteRoate.getSiteId());
				preparedStatement.setInt(4,siteRoate.getTypeId());
				preparedStatement.setInt(1,siteRoate.getRoate());
				preparedStatement.setString(3,siteRoate.getType());
				result=preparedStatement.executeUpdate();
			}
			//武汉
			else{
				sql="update site_roate set roate=? ,siteRoate=? where siteId=? and type=? and typeId=?";
				preparedStatement = connection.prepareStatement(sql);
				preparedStatement.setInt(3,siteRoate.getSiteId());
				preparedStatement.setInt(5,siteRoate.getTypeId());
				preparedStatement.setInt(2,siteRoate.getSiteRoate());
				preparedStatement.setInt(1,siteRoate.getRoate());
				preparedStatement.setString(4,siteRoate.getType());
				result=preparedStatement.executeUpdate();
			}
			

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			UiUtil.closeService_MB(siteService);
		}
		return result;
	}
	/**
	 * 根据条件   （网元ID，类型）查询
	 * @param siteRoate
	 * @param connection
	 * @return  roate
	 *     null   没有查到数据
	 * @throws Exception
	 */
	public List<SiteRoate> select(SiteRoate siteRoate,Connection connection )throws Exception{
		if (null == siteRoate) {
			throw new Exception("siteRoate is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		List<SiteRoate> siteRoateList=null;
		PreparedStatement preparedStatement = null;
		SiteRoate roate=null;
		String sql="select * from site_roate where 1=1";
		ResultSet resultSet=null;
		try {	
			siteRoateList=new ArrayList<SiteRoate>();
			if(siteRoate.getSiteId()>0){
				sql+=" and siteId="+siteRoate.getSiteId();
			}
			if(siteRoate.getType()!=null&&!siteRoate.getType().equals("")){
				sql+=" and type="+DButil.toSingleMark(siteRoate.getType());
			}
			if(siteRoate.getTypeId()>0){
				sql+=" and typeId=" +siteRoate.getTypeId();
			}
			if(siteRoate.getId()>0){
				sql+=" and id="+siteRoate.getId();
			}
			if(siteRoate.getSiteRoate()>0){
				sql+=" and siteRoate="+siteRoate.getSiteRoate();
			}
			preparedStatement = connection.prepareStatement(sql);
			resultSet=preparedStatement.executeQuery();
			while(resultSet.next()){
				roate=new SiteRoate();
				roate.setId(resultSet.getInt("id"));
				roate.setRoate(resultSet.getInt("roate"));
				roate.setSiteRoate(resultSet.getInt("siteRoate"));
				roate.setSiteId(resultSet.getInt("siteId"));
				roate.setType(resultSet.getString("type"));
				roate.setTypeId(resultSet.getInt("typeId"));
				siteRoateList.add(roate);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}		
		}
		return siteRoateList;
	}
	/**
	 * 删除 倒换 信息
	 * @param siteRoate
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int delete(SiteRoate siteRoate,Connection connection )throws Exception{
		if (null == siteRoate) {
			throw new Exception("siteRoate is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		int result=0;
		String sql="delete from site_roate where 1=1 ";
		try {		
			if(siteRoate.getType()!=null&&!siteRoate.getType().equals("")){
				sql+=" and type= "+DButil.toSingleMark(siteRoate.getType());
			}
			if(siteRoate.getTypeId()>0){
				sql +="  and typeId = "+siteRoate.getTypeId();
			}
			if(siteRoate.getSiteId()>0){
				sql +="  and siteId="+siteRoate.getSiteId();
			}
			preparedStatement = connection.prepareStatement(sql);
			result=preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}		
		}
		return result;
	}
}
