/**   
 * 文件名：SynchroUtil.java   
 * 创建人：kk   
 * 创建时间：2013-5-13 下午01:25:15 
 *   
 */
package com.nms.service.impl.util;

import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.equipment.port.PortInst;
import com.nms.db.bean.ptn.SiteRoate;
import com.nms.db.bean.ptn.oam.OamInfo;
import com.nms.db.bean.ptn.oam.OamMepInfo;
import com.nms.db.bean.ptn.oam.OamMipInfo;
import com.nms.db.bean.ptn.path.ces.CesInfo;
import com.nms.db.bean.ptn.path.eth.ElineInfo;
import com.nms.db.bean.ptn.path.pw.PwInfo;
import com.nms.db.bean.ptn.path.pw.PwNniInfo;
import com.nms.db.bean.ptn.path.tunnel.Lsp;
import com.nms.db.bean.ptn.path.tunnel.Tunnel;
import com.nms.db.bean.ptn.port.AcPortInfo;
import com.nms.db.bean.ptn.port.PortLagInfo;
import com.nms.db.enums.EActiveStatus;
import com.nms.db.enums.EManufacturer;
import com.nms.db.enums.OamTypeEnum;
import com.nms.drive.service.impl.CoderUtils;
import com.nms.model.equipment.port.PortService_MB;
import com.nms.model.equipment.shlef.SiteService_MB;
import com.nms.model.ptn.SiteRoateService_MB;
import com.nms.model.ptn.oam.OamInfoService_MB;
import com.nms.model.ptn.path.ces.CesInfoService_MB;
import com.nms.model.ptn.path.eth.ElineInfoService_MB;
import com.nms.model.ptn.path.pw.PwInfoService_MB;
import com.nms.model.ptn.path.pw.PwNniInfoService_MB;
import com.nms.model.ptn.path.tunnel.LspInfoService_MB;
import com.nms.model.ptn.path.tunnel.TunnelService_MB;
import com.nms.model.ptn.port.AcPortInfoService_MB;
import com.nms.model.ptn.port.PortLagService_MB;
import com.nms.model.util.Services;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.ExceptionManage;
import com.nms.ui.manager.UiUtil;

/**
 * 
 * 项目名称：WuHanPTN2012 类名称：SynchroUtil 类描述：同步帮助类 创建人：kk 创建时间：2013-5-13 下午01:25:15 修改人：kk 修改时间：2013-5-13 下午01:25:15 修改备注：
 * 
 * @version
 * 
 */
public class SynchroUtil {

	
	/**
	 * pw 对象与数据库信息同步
	 * 
	 * @author kk
	 * 
	 * @param pwinfo
	 *            数据库pw对象
	 * @param siteid
	 *            网元id
	 * 
	 * @return
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	public void pwInfoSynchro(PwInfo pwinfo, int siteid) throws Exception {
		PwInfoService_MB pwInfoService = null;
		List<PwInfo> pwInfoList = null;
		int serviceid = 0;
		try {
			pwInfoService = (PwInfoService_MB) ConstantUtil.serviceFactory.newService_MB(Services.PwInfo);
			if (pwinfo.getApwServiceId() == 0) {
				serviceid = pwinfo.getZpwServiceId();
			} else {
				serviceid = pwinfo.getApwServiceId();
			}
			pwInfoList = pwInfoService.select_synchro(siteid, serviceid, pwinfo.getType().getValue());

			if (null == pwInfoList) {
				throw new Exception("同步pw时 查询pw出错");
			}

			switch (pwInfoList.size()) {
			case 0:
				// 插入pw
				pwInfoService.save(pwinfo);
				break;
			case 1:
				// 修改PW
				updatePwinfo(pwInfoList, pwinfo, pwInfoService);
				break;

			default:
				throw new Exception("同步pw时 查询pw出错");
			}

		} catch (Exception e) {
			throw e;
		} finally {
			UiUtil.closeService_MB(pwInfoService);
		}
	}
	
	
	/**
	 * eline 对象与数据库信息同步
	 * 
	 * @author kk
	 * 
	 * @param eline
	 *            数据库eline对象
	 * @param siteid
	 *            网元id
	 * 
	 * @return
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	public void elineSynchro(ElineInfo elineInfo, int siteid) throws Exception {
		ElineInfoService_MB elineService = null;
		List<ElineInfo> elineInfoList = null;
		try {
			elineService = (ElineInfoService_MB) ConstantUtil.serviceFactory.newService_MB(Services.Eline);
			if(elineInfo.getaSiteId() == siteid){
				elineInfoList = elineService.select_synchro(siteid, elineInfo.getaXcId());
			}else if(elineInfo.getzSiteId() == siteid){
				elineInfoList = elineService.select_synchro(siteid, elineInfo.getzXcId());
			}
			if (null == elineInfoList) {
				throw new Exception("同步eline时 查询eline出错");
			}

			switch (elineInfoList.size()) {
			case 0:
				// 插入eline
				elineService.save(elineInfo);
				break;
			case 1:
				// 修改eline
				updateEline(elineInfoList, elineInfo, elineService);
				break;

			default:
				throw new Exception("同步eline时 查询eline出错");
			}

		} catch (Exception e) {
			throw e;
		} finally {
			UiUtil.closeService_MB(elineService);
		}
	}
	
	

	/**
	 * Ces 对象与数据库信息同步
	 * 
	 * @author kk
	 * 
	 * @param cesinfo
	 *            数据库ces对象
	 * @param siteid
	 *            网元id
	 * 
	 * @return
	 * @throws Exception
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	public void CesSynchro(CesInfo cesInfo, int siteId) throws Exception {
		CesInfoService_MB cesInfoService = null;
		List<CesInfo> cesInfoList = null;
		try {
			cesInfoService = (CesInfoService_MB) ConstantUtil.serviceFactory.newService_MB(Services.CesInfo);
			if(cesInfo.getaSiteId() == siteId){
				cesInfoList = cesInfoService.select_synchro(siteId, cesInfo.getAxcId());
			}else if(cesInfo.getzSiteId() == siteId){
				cesInfoList = cesInfoService.select_synchro(siteId, cesInfo.getZxcId());
			}
			if (null == cesInfoList) {
				throw new Exception("同步ces时查询ces出错");
			}

			switch (cesInfoList.size()) {
			case 0:
				// 插入eline
				cesInfoService.save(cesInfo);
				break;
			case 1:
				// 修改eline
				updateCes(cesInfoList, cesInfo, cesInfoService);
				break;

			default:
				throw new Exception("同步ces时查询ces出错");
			}

		} catch (Exception e) {
			throw e;
		} finally {
			UiUtil.closeService_MB(cesInfoService);
		}
	}

	
	/**
	 * ac 对象与数据库信息同步
	 * 
	 * @author wangwf
	 * 
	 * @param acPortInfo
	 *            数据库acPortInfo对象
	 * @param siteid
	 *            网元id
	 * 
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 * 
	 * @return acId AC的数据库主键ID
	 */
	public int acPortInfoSynchro(AcPortInfo acPortInfo, int siteid) throws Exception {
		AcPortInfoService_MB acInfoService = null;
		List<AcPortInfo> acPortInfoList = null;
		SiteService_MB siteService = null;
		int acId = 0;
		PortService_MB portService = null;
		PortLagService_MB lagService = null;
		try {
			/*by guoqc*****************************************************/
			int[] acRelevanceArr = new int[6];//ac关联规则的规则集合，元素为1表示关联，0表示不关联
			int vlanRelevance = 0;
			int eightIpRelevance = 0;
			int sourMacRelevance = 0;
			int endMacRelevance = 0;
			int sourIPRelevance = 0;
			int endIPRelevance = 0;
			if(acPortInfo.getPortId() > 0){
				portService = (PortService_MB) ConstantUtil.serviceFactory.newService_MB(Services.PORT);
				PortInst port = new PortInst();
				port.setPortId(acPortInfo.getPortId());
				List<PortInst> portList = portService.select(port);
				if(portList != null && !portList.isEmpty()){
					port = portList.get(0);
					vlanRelevance = Integer.parseInt(UiUtil.getCodeById(port.getPortAttr().getPortUniAttr().getVlanRelevance()).getCodeValue());
					eightIpRelevance = Integer.parseInt(UiUtil.getCodeById(port.getPortAttr().getPortUniAttr().getEightIpRelevance()).getCodeValue());
					sourMacRelevance = Integer.parseInt(UiUtil.getCodeById(port.getPortAttr().getPortUniAttr().getSourceMacRelevance()).getCodeValue());
					endMacRelevance = Integer.parseInt(UiUtil.getCodeById(port.getPortAttr().getPortUniAttr().getDestinationMacRelevance()).getCodeValue());
					sourIPRelevance = Integer.parseInt(UiUtil.getCodeById(port.getPortAttr().getPortUniAttr().getSourceIpRelevance()).getCodeValue());
					endIPRelevance = Integer.parseInt(UiUtil.getCodeById(port.getPortAttr().getPortUniAttr().getDestinationIpRelevance()).getCodeValue());
				}
			}else if(acPortInfo.getLagId() > 0){
				lagService = (PortLagService_MB) ConstantUtil.serviceFactory.newService_MB(Services.PORTLAG);
				PortLagInfo lag = new PortLagInfo();
				lag.setId(acPortInfo.getLagId());
				List<PortLagInfo> lagList = lagService.selectPortByCondition(lag);
				if(lagList != null && !lagList.isEmpty()){
					lag = lagList.get(0);
					vlanRelevance = lag.getVlanRelating();
				    eightIpRelevance = lag.getRelatingSet();
				    sourMacRelevance = lag.getFountainMAC();
				    endMacRelevance = lag.getAimMAC();
				    sourIPRelevance = lag.getFountainIP();
				    endIPRelevance = lag.getAimIP();
				}
			}
			acRelevanceArr[0] = vlanRelevance;
			acRelevanceArr[1] = eightIpRelevance;
			acRelevanceArr[2] = sourMacRelevance;
			acRelevanceArr[3] = endMacRelevance;
			acRelevanceArr[4] = sourIPRelevance;
			acRelevanceArr[5] = endIPRelevance;
			
			siteService=(SiteService_MB) ConstantUtil.serviceFactory.newService_MB(Services.SITE);
			acInfoService = (AcPortInfoService_MB) ConstantUtil.serviceFactory.newService_MB(Services.AcInfo);
			if (siteService.getManufacturer(siteid) == EManufacturer.CHENXIAO.getValue()) {
				acPortInfoList = acInfoService.selectByCondition_synchro(acPortInfo);
			} else {
				acPortInfoList = acInfoService.select_vlan(acPortInfo, acRelevanceArr);
			}
			/*end**************************************************************/
			if (null == acPortInfoList) {
				throw new Exception("同步ac时 查询ac出错");
			}

			switch (acPortInfoList.size()) {
			case 0:
				// 插入ac
				acId = acInfoService.saveOrUpdate(acPortInfo.getBufferList(), acPortInfo);
				break;
			case 1:
				// 修改ac
				acId = updateAcPortInfo(acPortInfoList, acPortInfo, acInfoService);
				break;

			default:
				throw new Exception("同步ac时 查询ac出错");
			}
        
		} catch (Exception e) {
			System.err.print(e);
			//将插入的AC在数据库删除
			if(acPortInfoList.size() == 0 && acId >0){
				acInfoService.delete(acId);
			}else{
				//恢复原来的数据
				if(acPortInfoList != null && acPortInfoList.size() >0){
					acInfoService.update(acPortInfoList.get(0));
				}
			}
			throw e;
		} finally {
			UiUtil.closeService_MB(acInfoService);
			UiUtil.closeService_MB(siteService);
			UiUtil.closeService_MB(portService);
			UiUtil.closeService_MB(lagService);
		}
		return acId;
	}

	
	/**
	 * 修改数据库端口对象
	 * 
	 * @author kk
	 * 
	 * @param portInst
	 *            端口对象
	 * 
	 * @return
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	public void updatePort(PortInst portInst) throws Exception {

		PortService_MB portService = null;
		PortInst portInst_db = null;
		List<PortInst> portInstList = null;
		SiteService_MB siteService = null;
		try {
			siteService=(SiteService_MB) ConstantUtil.serviceFactory.newService_MB(Services.SITE);
			portService = (PortService_MB) ConstantUtil.serviceFactory.newService_MB(Services.PORT);

			portInst_db = new PortInst();
			portInst_db.setSiteId(portInst.getSiteId());
			// 根据设备厂商不同，查询端口的条件不同
			if (siteService.getManufacturer(portInst.getSiteId()) == EManufacturer.WUHAN.getValue()) {
				portInst_db.setNumber(portInst.getNumber());
			} else {
				portInst_db.setPortName(portInst.getPortName());
			}

			portInstList = portService.select(portInst_db);

			if (null == portInstList || portInstList.size() != 1) {
				ExceptionManage.logDebug("同步ETHPORT时没有找到" + portInst_db.getPortName() + "端口",SynchroUtil.class);
				return;
			}
			portInst_db = portInstList.get(0);
			portInst_db.setPortType(portInst.getPortType());
			portInst_db.setIsEnabled_code(portInst.getIsEnabled_code());
			portInst_db.setIsEnabled_QinQ(portInst.getIsEnabled_QinQ());
			portInst_db.setIsEnabledLaser(portInst.getIsEnabledLaser());
			if(portInst_db.getQosQueues() != null && portInst_db.getQosQueues().size()>0){
				for (int i = 0; i < portInst_db.getQosQueues().size(); i++) {
					int id = portInst_db.getQosQueues().get(i).getId();
					CoderUtils.copy(portInst.getQosQueues().get(i),portInst_db.getQosQueues().get(i));
					portInst_db.getQosQueues().get(i).setId(id);
				}
			}
			// 从驱动对象取值，进行修改
			convertPort(portInst_db, portInst);
			
			portService.update_synchro(portInst_db);

		} catch (Exception e) {
			throw e;
		} finally {
			UiUtil.closeService_MB(portService);
			UiUtil.closeService_MB(siteService);
		}

	}

	
	

	/**
	 * 同步pwNniBuffer信息
	 * 
	 * @param pwNniInfo
	 * @param siteId
	 * @param isVPLS true/false
	 * 			     vpws业务不需要mac地址学习和水平分割两个属性
	 */
	public void pwNniBufferInfoSynchro(PwNniInfo pwNniInfo, int siteId, boolean isVPLS) {
		PwNniInfoService_MB pwNniBufferService = null;
		PwNniInfo info = null;
		List<PwNniInfo> pwNniInfos = null;
		try {
			pwNniBufferService = (PwNniInfoService_MB) ConstantUtil.serviceFactory.newService_MB(Services.PwNniBuffer);
			info = new PwNniInfo();
			info.setSiteId(siteId);
			info.setPwId(pwNniInfo.getPwId());
			pwNniInfos = pwNniBufferService.select(info);
			if (pwNniInfos != null && pwNniInfos.size() > 0) {
				PwNniInfo pwNniInfo2 = pwNniInfos.get(0);
				pwNniInfo2.setPwId(pwNniInfo.getPwId());
				pwNniInfo2.setTagAction(pwNniInfo.getTagAction());
				pwNniInfo2.setExitRule(pwNniInfo.getExitRule());
				pwNniInfo2.setSvlan(pwNniInfo.getSvlan());
				pwNniInfo2.setVlanpri(pwNniInfo.getVlanpri());
				pwNniInfo2.setLanId(pwNniInfo.getLanId());
				if(isVPLS){
					pwNniInfo2.setMacAddressLearn(pwNniInfo.getMacAddressLearn());
					pwNniInfo2.setHorizontalDivision(pwNniInfo.getHorizontalDivision());
				}
				pwNniInfo2.setControlEnable(pwNniInfo.getControlEnable());
				pwNniBufferService.saveOrUpdate(pwNniInfo2);
			} else {
				pwNniBufferService.saveOrUpdate(pwNniInfo);
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,SynchroUtil.class);
		} finally {
			UiUtil.closeService_MB(pwNniBufferService);
			info = null;
			pwNniInfos = null;
		}
	}
}
