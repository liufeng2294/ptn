package com.nms.ui.ptn.business.tunnel;

import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.oam.OamInfo;
import com.nms.db.bean.ptn.oam.OamMepInfo;
import com.nms.db.bean.ptn.path.tunnel.Lsp;
import com.nms.db.bean.ptn.path.tunnel.Tunnel;
import com.nms.db.bean.ptn.qos.QosInfo;
import com.nms.db.enums.EManufacturer;
import com.nms.db.enums.EOperationLogType;
import com.nms.db.enums.EServiceType;
import com.nms.model.equipment.port.PortService;
import com.nms.model.equipment.shlef.SiteService;
import com.nms.model.ptn.oam.OamInfoService;
import com.nms.model.ptn.oam.OamInfoService_MB;
import com.nms.model.ptn.path.tunnel.TunnelService;
import com.nms.model.ptn.path.tunnel.TunnelService_MB;
import com.nms.model.ptn.qos.QosInfoService;
import com.nms.model.util.Services;
import com.nms.rmi.ui.util.RmiKeys;
import com.nms.service.impl.base.DispatchBase;
import com.nms.service.impl.util.SiteUtil;
import com.nms.service.impl.util.WhImplUtil;
import com.nms.ui.filter.impl.TunnelFilterDialog;
import com.nms.ui.frame.AbstractController;
import com.nms.ui.manager.AddOperateLog;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.DialogBoxUtil;
import com.nms.ui.manager.DispatchUtil;
import com.nms.ui.manager.ExceptionManage;
import com.nms.ui.manager.ListingFilter;
import com.nms.ui.manager.ResourceUtil;
import com.nms.ui.manager.UiUtil;
import com.nms.ui.manager.keys.StringKeysTip;
import com.nms.ui.ptn.basicinfo.dialog.segment.SearchSegmentDialog;
import com.nms.ui.ptn.business.dialog.tunnel.AddTunnelPathDialog;
import com.nms.ui.ptn.systemconfig.dialog.qos.ComparableSort;

/**
 * @author lepan
 */
public class TunnelBusinessController extends AbstractController {
	private final TunnelBusinessPanel view;
	private Tunnel filterCondition = null;// tunnel的过滤条件

	public TunnelBusinessController(TunnelBusinessPanel view) {
		this.view = view;
	}

	@SuppressWarnings("unchecked")
	@Override
	public void refresh() throws Exception {
		List<Tunnel> infos = null;
		TunnelService_MB tunnelServiceMB = null;
		ListingFilter filter = null;
		try {
			tunnelServiceMB = (TunnelService_MB) ConstantUtil.serviceFactory.newService_MB(Services.Tunnel);
			filter = new ListingFilter();
			// 判断若filtercondition 已被清空 ，则新创建一个新的查询条件，以供查询方法是用
			if (null == filterCondition) {
				filterCondition = new Tunnel();
			}
			infos = (List<Tunnel>) filter.filterList(tunnelServiceMB.filterSelect(this.filterCondition));
			this.view.clear();
			this.view.initData(infos);
			if (view.getOamTable() != null) {
				view.getOamTable().clear();
			}
			if (view.getTopoPanel() != null) {
				view.getTopoPanel().clear();
			}
			if (view.getSchematize_panel() != null) {
				view.getSchematize_panel().clear();
			}
			this.view.getQosPanel().clear();
			this.view.getLspNetworkTablePanel().clear();
			this.view.updateUI();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			infos = null;
			UiUtil.closeService_MB(tunnelServiceMB);
			filter = null;
		}
	}

	@Override
	public void delete() throws Exception {
		List<Tunnel> infos = null;
		DispatchUtil tunnelServiceImpl = null;
//		boolean flag = true;
		try {
			// int result = DialogBoxUtil.confirmDialog(null, ResourceUtil.srcStr(StringKeysTip.TIP_IS_DELETE));
			// if (result != 0) {
			// //因为没有deleteChecking方法，所有做个判断
			// return;
			// }
			infos = this.view.getAllSelect();
			// 删除tunnel之前先验证该tunnel是否有按需oam，没有才可删除，否则提示不能删除
//			for (Tunnel tunnel : infos) {
//				// 如果为true，说明该条tunnel有按需oam，不能删除
//				if (checkIsOam(tunnel)) {
//					flag = false;
//					break;
//				}
//			}
//			if (!flag) {
//				DialogBoxUtil.errorDialog(this.view, ResourceUtil.srcStr(StringKeysTip.TIP_CLEAN_OAM));
//				return;
//			}

			tunnelServiceImpl = new DispatchUtil(RmiKeys.RMI_TUNNEL);
			String message = tunnelServiceImpl.excuteDelete(infos);
			// 添加日志记录
			AddOperateLog.insertOperLog(this.view.getDeleteButton(), EOperationLogType.TUNNELDELETE.getValue(), message);
			DialogBoxUtil.succeedDialog(this.view, message);
			this.refresh();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			infos = null;
			tunnelServiceImpl = null;
		}
	}

	/**
	 * 删除前的验证
	 * 
	 * @return true 验证成功， false 验证失败
	 * @throws Exception
	 */
	@Override
	public boolean deleteChecking() throws Exception {
		List<Tunnel> infos = null;
		boolean flag = false;
		boolean onlineFlag = false;
		List<Integer> allSiteIds =null;
		List<Integer> siteIds =null;
		try {
			infos = this.view.getAllSelect();
			//判断是否有在线网元托管，存在不允许删除
			SiteUtil siteUtil = new SiteUtil();
			allSiteIds = new ArrayList<Integer>();
			siteIds = new ArrayList<Integer>();			
			allSiteIds=getNotOnlineSiteIds(infos);
			for(int i=0;i<allSiteIds.size();i++){
			    if(1==siteUtil.SiteTypeOnlineUtil(allSiteIds.get(i))){
			    	siteIds.add(allSiteIds.get(i));				    
			    }
			}
			if(siteIds !=null && siteIds.size()!=0){
			   onlineFlag = true;
			}		
			if(onlineFlag){
				WhImplUtil wu = new WhImplUtil();
				String str=wu.getNeNames(siteIds);
				DialogBoxUtil.errorDialog(this.view, ResourceUtil.srcStr(StringKeysTip.TIP_NOT_DELETEONLINE)+""+str+ResourceUtil.srcStr(StringKeysTip.TIP_ONLINENOT_DELETEONLINE));
				UiUtil.insertOperationLog(EOperationLogType.TUNNELERROR3.getValue());
				return false;
			}
			
			
			
			// 删除tunnel之前先验证该tunnel是否有按需oam，没有才可删除，否则提示不能删除
			for (Tunnel tunnel : infos) {
				// 如果为true，说明该条tunnel有按需oam，不能删除
				if (checkIsOam(tunnel)) {
					flag = true;
					break;
				}
			}
			if (flag) {
				DialogBoxUtil.errorDialog(this.view, ResourceUtil.srcStr(StringKeysTip.TIP_CLEAN_OAM));
				UiUtil.insertOperationLog(EOperationLogType.TUNNELERROR1.getValue());
				return false;
			}
			flag = true;
		} catch (Exception e) {
			ExceptionManage.dispose(e, getClass());
		} finally {
			infos=null;
			allSiteIds=null;
			siteIds= null;
		}
		return flag;
	}
	
	private boolean checkIsOam(Tunnel tunnel) {
		OamMepInfo mep = null;
		boolean flag = false;
		OamInfoService_MB oamInfoServiceMB = null;
		try {
			mep = new OamMepInfo();
			mep.setObjId(tunnel.getTunnelId());
			mep.setObjType("TUNNEL_TEST");
			oamInfoServiceMB = (OamInfoService_MB) ConstantUtil.serviceFactory.newService_MB(Services.OamInfo);
			flag = oamInfoServiceMB.existByObjIdAndType(mep);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			oamInfoServiceMB.close();
		}
		return flag;
	}

	@Override
	public void openCreateDialog() throws Exception {
		AddTunnelPathDialog addTunnelPathDialog = null;
		try {
			addTunnelPathDialog = new AddTunnelPathDialog(this.view, true, null);
			UiUtil.showWindow(addTunnelPathDialog, UiUtil.getWindowWidth(addTunnelPathDialog.getWidth()), UiUtil.getWindowHeight(addTunnelPathDialog.getHeight()));
			// addTunnelPathDialog.setLocation(UiUtil.getWindowWidth(addTunnelPathDialog.getWidth()), UiUtil.getWindowHeight(addTunnelPathDialog.getHeight()));
			// addTunnelPathDialog.setVisible(true);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			addTunnelPathDialog = null;
		}
	}

	/**
	 * 选中一条记录后，查看详细信息
	 */
	@Override
	public void initDetailInfo() {
		try {
			this.initQosInfos();
			this.initOamInfos();
			this.initTopoPanel();
			this.initLspData();
			this.initSchematizePanel();
			this.initOamMainInfoPanel();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}
	}

	/**
	 * 初始化图形化界面数据
	 * 
	 * @author kk
	 * 
	 * @Exception 异常对象
	 */
	private void initSchematizePanel() {
		Tunnel tunnel = null;
		try {
			tunnel = view.getSelect();
			this.view.getSchematize_panel().clear();
			this.view.getSchematize_panel().initData(tunnel);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}
	}

	private void initTopoPanel() {
		Tunnel tunnel = null;
		try {
			tunnel = view.getSelect();
			view.getTopoPanel().clear();
			view.getTopoPanel().initData(tunnel);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}
	}

	@SuppressWarnings("unchecked")
	private void initOamInfos() throws Exception {
		OamInfoService oamInfoservice = null;
		Tunnel tunnel = null;
		List<OamInfo> oamList = null;
		try {
			tunnel = this.view.getSelect();
			oamList = new ArrayList<OamInfo>();
			oamInfoservice = (OamInfoService) ConstantUtil.serviceFactory.newService(Services.OamInfo);
			OamInfo oam = new OamInfo();
			OamMepInfo oamMep = new OamMepInfo();
			oamMep.setServiceId(tunnel.getTunnelId());
			oamMep.setObjType(EServiceType.TUNNEL.toString());
			oam.setOamMep(oamMep);
			oamList = oamInfoservice.queryByServiceId(oam);
			ComparableSort sort = new ComparableSort();
			oamList = (List<OamInfo>) sort.compare(oamList);
			this.view.getOamTable().clear();
			this.view.getOamTable().initData(oamList);
			this.view.updateUI();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			UiUtil.closeService(oamInfoservice);
			tunnel = null;
			oamList = null;
		}
	}

	// 增加保护的LSP显示
	private void initLspData() throws Exception {
		Tunnel tunnel = null;
		List<Lsp> lsppro = new ArrayList<Lsp>();
		List<Lsp> lsp = new ArrayList<Lsp>();
		List<Lsp> lists = new ArrayList<Lsp>();
		Tunnel protunnel = new Tunnel();
		try {
			tunnel = this.view.getSelect();
			protunnel = tunnel.getProtectTunnel();
			for (Lsp lsp1 : tunnel.getLspParticularList()) {
				lsp1.setPosition(tunnel.getPosition());
			}
			this.convertLspData(tunnel, "work");
			if (protunnel != null) {
				for (Lsp lsp2 : protunnel.getLspParticularList()) {
					lsp2.setPosition(tunnel.getPosition());
				}
				this.convertLspData(protunnel, "protect");
			}
			this.view.getLspNetworkTablePanel();
			lsp = tunnel.getLspParticularList();
			for (Lsp lspwork : lsp) {
				lspwork.setPosition(tunnel.getPosition());
				lists.add(lspwork);
			}

			if (protunnel != null) {
				lsppro = protunnel.getLspParticularList();
			}
			if (lsppro.size() > 0) {
				for (Lsp lspprotect : lsppro) {
					lspprotect.setPosition(protunnel.getPosition());
					lists.add(lspprotect);
				}
			}
			this.view.getLspNetworkTablePanel().initData(lists);
			this.view.updateUI();

		} catch (Exception e) {
			throw e;
		} finally {
			tunnel = null;
			lsppro = null;
			lsp = null;
		}
	}

	/**
	 * 转换lsp对象 给lsp所需要的列赋值
	 * 
	 * @param tunnel
	 * @throws Exception
	 */
	private void convertLspData(Tunnel tunnel, String type) throws Exception {
		String asiteName = null;
		String zsiteName = null;
		String aportName = null;
		String zportName = null;
		SiteService siteService = null;
		PortService portService = null;
		try {
			siteService = (SiteService) ConstantUtil.serviceFactory.newService(Services.SITE);
			portService = (PortService) ConstantUtil.serviceFactory.newService(Services.PORT);
			for (Lsp lsp : tunnel.getLspParticularList()) {
				asiteName = siteService.getSiteName(lsp.getASiteId());
				zsiteName = siteService.getSiteName(lsp.getZSiteId());
				aportName = portService.getPortname(lsp.getAPortId());
				zportName = portService.getPortname(lsp.getZPortId());

				lsp.putClientProperty("id", lsp.getId());
				lsp.putClientProperty("lsptype", type);
				lsp.putClientProperty("lspname", asiteName + "/" + aportName + "-" + zsiteName + "/" + zportName);
				lsp.putClientProperty("asiteName", asiteName);
				lsp.putClientProperty("zsiteName", zsiteName);
				lsp.putClientProperty("aportName", aportName);
				lsp.putClientProperty("zportName", zportName);
				lsp.putClientProperty("inlabel", lsp.getFrontLabelValue());
				lsp.putClientProperty("outlabel", lsp.getBackLabelValue());
				lsp.putClientProperty("position", tunnel.getPosition() == 1 ? true : false);

			}
		} catch (Exception e) {
			throw e;
		} finally {
			UiUtil.closeService(siteService);
			UiUtil.closeService(portService);
		}
	}

	@SuppressWarnings("unchecked")
	private void initQosInfos() throws Exception {
		QosInfoService qosInfoservice = null;
		List<QosInfo> qosList = null;
		Tunnel tunnel = null;
		try {
			tunnel = this.view.getSelect();
			qosList = new ArrayList<QosInfo>();
			qosInfoservice = (QosInfoService) ConstantUtil.serviceFactory.newService(Services.QosInfo);
			qosList = qosInfoservice.getQosByObj(EServiceType.TUNNEL.toString(), tunnel.getTunnelId());
			ComparableSort sort = new ComparableSort();
			qosList = (List<QosInfo>) sort.compare(qosList);
			this.view.getQosPanel().clear();
			this.view.getQosPanel().initData(qosList);
			this.view.updateUI();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			UiUtil.closeService(qosInfoservice);
		}
	}
	
	/**
	 * 初始化oam关键信息
	 */
	private void initOamMainInfoPanel() {
		Tunnel tunnel = this.view.getSelect();
		List<Tunnel> tunnelList = new ArrayList<Tunnel>();
		tunnelList.add(tunnel);
//		this.view.getOamMainInfoPanel().clear();
		this.view.getOamMainInfoPanel().initData(tunnelList);
		this.view.updateUI();
	}

	@Override
	public void openUpdateDialog() throws Exception {
		try {
			Tunnel info = this.view.getSelect();
			if (info == null) {
				DialogBoxUtil.errorDialog(this.view, ResourceUtil.srcStr(StringKeysTip.TIP_SELECT_DATA_ONE));
				UiUtil.insertOperationLog(EOperationLogType.TUNNELERROR2.getValue());
			} else {
				AddTunnelPathDialog addTunnelPathDialog = new AddTunnelPathDialog(this.view, true, info);
				UiUtil.showWindow(addTunnelPathDialog, UiUtil.getWindowWidth(addTunnelPathDialog.getWidth()), UiUtil.getWindowHeight(addTunnelPathDialog.getHeight()));
				// addTunnelPathDialog.setLocation();
				// addTunnelPathDialog.setVisible(true);
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}
	}

	/**
	 * 执行搜索按钮动作
	 * **/
	@Override
	public void search() {
		try {
			new SearchSegmentDialog(this.view);

		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}
	}

	/**
	 * 清楚过滤 按原有查询显示
	 * 
	 * @author xxx
	 */
	@Override
	public void clearFilter() throws Exception {
		this.filterCondition = null;
		this.refresh();
	}

	/**
	 * 打开过滤对话框，进行过滤条件设置
	 * 
	 * @author xxx
	 */
	@Override
	public void openFilterDialog() throws Exception {
		new TunnelFilterDialog(this.filterCondition);
		this.refresh();
	}

	public void setFilterCondition(Tunnel filterCondition) {
		this.filterCondition = filterCondition;
	}

	public Tunnel getFilterCondition() {
		return filterCondition;
	}
	//取出该tunnel上所有网元的siteid
			public List<Integer> getNotOnlineSiteIds(List<Tunnel> tunnelList) throws Exception {
				List<Integer> siteIds = null;
				DispatchBase dispatchbase = new DispatchBase();
				TunnelService_MB tunnelServiceMB = null;
				try {
					siteIds = new ArrayList<Integer>();
					tunnelServiceMB = (TunnelService_MB) ConstantUtil.serviceFactory.newService_MB(Services.Tunnel);
					for (Tunnel tunnel : tunnelList) {
						if (tunnel.getProtectTunnelId() > 0) {
							Tunnel protectTunnel =tunnelServiceMB.selectByID(tunnel.getProtectTunnelId());
							for (Lsp lspParticular : protectTunnel.getLspParticularList()) {
								if (lspParticular.getASiteId() > 0) {
									if (!siteIds.contains(lspParticular.getASiteId()) && dispatchbase.getManufacturer(lspParticular.getASiteId()) == EManufacturer.WUHAN.getValue()) {
										siteIds.add(lspParticular.getASiteId());
									}
								}
								if (lspParticular.getZSiteId() > 0) {
									if (!siteIds.contains(lspParticular.getZSiteId()) && lspParticular.getZPortId() > 0 && dispatchbase.getManufacturer(lspParticular.getZSiteId()) == EManufacturer.WUHAN.getValue()) {
										siteIds.add(lspParticular.getZSiteId());
									}
								}
							}

						}

						for (Lsp lspParticular : tunnel.getLspParticularList()) {
							if (lspParticular.getASiteId() > 0) {
								if (!siteIds.contains(lspParticular.getASiteId()) && dispatchbase.getManufacturer(lspParticular.getASiteId()) == EManufacturer.WUHAN.getValue()) {
									siteIds.add(lspParticular.getASiteId());
								}
							}
							if (lspParticular.getZSiteId() > 0) {
								if (!siteIds.contains(lspParticular.getZSiteId()) && lspParticular.getZPortId() > 0 && dispatchbase.getManufacturer(lspParticular.getZSiteId()) == EManufacturer.WUHAN.getValue()) {
									siteIds.add(lspParticular.getZSiteId());
								}
							}
						}
					}

				} catch (Exception e) {
					throw e;
				} finally {
					tunnelServiceMB.close();
				}		
				return siteIds;
			}		
}
