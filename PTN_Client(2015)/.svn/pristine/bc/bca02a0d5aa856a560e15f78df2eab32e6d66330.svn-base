package com.nms.db.dao.ptn.path.tunnel;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.path.tunnel.Lsp;
import com.nms.db.bean.ptn.path.tunnel.Tunnel;
import com.nms.ui.manager.ExceptionManage;

public class LspDao {

	private final String SQL_SELECT = "select * from lspinfo l ";

	/**
	 * 根据端口ID查询
	 */
	private final String SQL_SELECT_PORT = "select * from lspinfo where aportid=? or zportid=?";

	/**
	 * 新增lspparticular
	 * 
	 * @param lspparticular
	 *            实体对象
	 * @param connection
	 *            数据库连接
	 * @return 插入的记录数
	 * @throws Exception
	 */
	public int insert(Lsp lspparticular, Connection connection) throws Exception {

		if (null == lspparticular) {
			throw new Exception("lspparticular is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;

		try {
			sql = "insert into lspinfo(tunnelId,pathStatus,aSiteId,zSiteId,aPortId,zPortId,alspbusinessid,zlspbusinessid,frontLabelValue,backLabelValue,atunnelbusinessid,ztunnelbusinessid,segmentId,aoppositeId,zoppositeId,sourceMac,targetMac,frontTtl,backTtl) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
			preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, lspparticular.getTunnelId());
			preparedStatement.setInt(2, lspparticular.getPathStatus());
			preparedStatement.setInt(3, lspparticular.getASiteId());
			preparedStatement.setInt(4, lspparticular.getZSiteId());
			preparedStatement.setInt(5, lspparticular.getAPortId());
			preparedStatement.setInt(6, lspparticular.getZPortId());
			preparedStatement.setInt(7, lspparticular.getAlspbusinessid());
			preparedStatement.setInt(8, lspparticular.getZlspbusinessid());
			preparedStatement.setInt(9, lspparticular.getFrontLabelValue());
			preparedStatement.setInt(10, lspparticular.getBackLabelValue());
			preparedStatement.setInt(11, lspparticular.getAtunnelbusinessid());
			preparedStatement.setInt(12, lspparticular.getZtunnelbusinessid());
			preparedStatement.setInt(13, lspparticular.getSegmentId());
			preparedStatement.setString(14, lspparticular.getAoppositeId());
			preparedStatement.setString(15, lspparticular.getZoppositeId());
			preparedStatement.setString(16, lspparticular.getSourceMac());
			preparedStatement.setString(17, lspparticular.getTargetMac());
			preparedStatement.setInt(18, lspparticular.getFrontTtl());
			preparedStatement.setInt(19, lspparticular.getBackTtl());
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				result = resultSet.getInt(1);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}

			sql = null;
		}

		return result;
	}

	/**
	 * 修改lspparticular
	 * 
	 * @param lspparticular
	 *            实体对象
	 * @param connection
	 *            数据库连接
	 * @return 修改的记录数
	 * @throws Exception
	 */
	public int update(Lsp lspparticular, Connection connection) throws Exception {
		if (null == lspparticular) {
			throw new Exception("lspparticular is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "update lspinfo set TunnelId=?,pathStatus=?,aSiteId=?,zSiteId=?,aPortId=?,zPortId=?, segmentId=?,frontLabelValue=?,backLabelValue=?,atunnelbusinessid=?,ztunnelbusinessid=?,aoppositeId=?,zoppositeId=? ,sourceMac=?,targetMac=?,frontTtl=?,backTtl=? where id=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, lspparticular.getTunnelId());
			preparedStatement.setInt(2, lspparticular.getPathStatus());
			preparedStatement.setInt(3, lspparticular.getASiteId());
			preparedStatement.setInt(4, lspparticular.getZSiteId());
			preparedStatement.setInt(5, lspparticular.getAPortId());
			preparedStatement.setInt(6, lspparticular.getZPortId());
			preparedStatement.setInt(7, lspparticular.getSegmentId());
			preparedStatement.setInt(8, lspparticular.getFrontLabelValue());
			preparedStatement.setInt(9, lspparticular.getBackLabelValue());
			preparedStatement.setInt(10, lspparticular.getAtunnelbusinessid());
			preparedStatement.setInt(11, lspparticular.getZtunnelbusinessid());
			preparedStatement.setString(12, lspparticular.getAoppositeId());
			preparedStatement.setString(13, lspparticular.getZoppositeId());
			preparedStatement.setString(14, lspparticular.getSourceMac());
			preparedStatement.setString(15, lspparticular.getTargetMac());
			preparedStatement.setInt(16, lspparticular.getFrontTtl());
			preparedStatement.setInt(17, lspparticular.getBackTtl());
			preparedStatement.setInt(18, lspparticular.getId());

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 根据主键删除
	 * 
	 * @param id
	 *            主键
	 * @param connection
	 *            数据库连接
	 * @return 删除的记录数
	 * @throws Exception
	 */
	public int delete(int id, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "delete from lspinfo where id=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, id);

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 根据lsp表的ID来删除lsp子表关联的信息
	 * 
	 * @param lspid
	 *            关联的id
	 * @param connection
	 *            数据库连接
	 * @return 删除的记录数
	 * @throws Exception
	 */
	public int deleteByTunnelID(int tunnelId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "DELETE from lspinfo where tunnelId = " + tunnelId;
			preparedStatement = connection.prepareStatement(sql);

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 根据条件查询
	 * 
	 * @param lspparticularCondition
	 *            查询条件
	 * @param connection
	 *            数据库连接
	 * @return List<LspParticular> 集合
	 * @throws Exception
	 */
	public List<Lsp> queryByCondition(Lsp lspparticularCondition, Connection connection) throws Exception {

		if (null == lspparticularCondition) {
			throw new Exception("lspparticularCondition is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<Lsp> lspparticularList = null;
		String sql = null;

		try {
			sql = "select * from lspinfo where 1=1";

			if (lspparticularCondition.getId() > 0) {
				sql += " and id=" + lspparticularCondition.getId();
			}

			if (lspparticularCondition.getTunnelId() > 0) {
				sql += " and TunnelId=" + lspparticularCondition.getTunnelId();
			}
			if (lspparticularCondition.getSegmentId() > 0) {
				sql += " and segmentId=" + lspparticularCondition.getSegmentId();
			}

			lspparticularList = this.excuteQuery(sql, connection);

		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}

		return lspparticularList;

	}

	/**
	 * 根据tunnelId查询lsp子表的portA端和Z端的ID
	 * 
	 * @param tunnelIds
	 *            tunnelId
	 * @param connection
	 *            数据库连接
	 * @return List<LspParticular>集合
	 * @throws Exception
	 */
	public List<Lsp> queryByTunnnelId(int tunnelId, Connection connection) throws Exception {

		if (0 == tunnelId) {
			throw new Exception("tunnelId is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<Lsp> lspparticularList = null;
		String sql = null;

		try {
			sql = "select * FROM lspinfo where tunnelId = " + tunnelId;

			lspparticularList = this.excuteQuery(sql, connection);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return lspparticularList;
	}

	/**
	 * 根据网元id查询
	 * 
	 * @param siteId
	 *            网元ID
	 * @param connection
	 *            数据库连接
	 * @return
	 * @throws Exception
	 */
	public List<Lsp> queryBySiteId(int siteId, int tunnelId, Connection connection) throws Exception {
		if (0 == siteId) {
			throw new Exception("siteId is null");
		}

		List<Lsp> lspparticularList = null;
		String sql = null;

		try {
			sql = "select * from lspinfo where Tunnelid = " + tunnelId + " and (asiteid=" + siteId + " or zsiteid=" + siteId + ") order by id";

			lspparticularList = this.excuteQuery(sql, connection);
		} catch (Exception e) {
    			throw e;
		} finally {
			sql = null;
		}
		return lspparticularList;
	}

	public List<Lsp> queryBySegmentId(int segmentId, Connection connection) throws Exception {
		if (0 == segmentId) {
			throw new Exception("segmentId is null");
		}

		List<Lsp> lspparticularList = null;
		String sql = null;

		try {
			sql = "select * FROM lspinfo where  segmentId = " + segmentId + " ";

			lspparticularList = this.excuteQuery(sql, connection);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return lspparticularList;
	}

	public Lsp queryBySiteIdAndTunnelserviceid(int siteId, int tunnelServiceId, String type, Connection connection) throws Exception {

		String sql = null;
		Lsp lspParticular = null;
		List<Lsp> lspList=null;
		try {
			if (type == null || type.equals("")) {
				sql = "select * from lspinfo lag where (lag.asiteid=" + siteId + " and lag.atunnelbusinessid =" + tunnelServiceId + ") OR (lag.zsiteid=" + siteId + " and lag.ztunnelbusinessid =" + tunnelServiceId + ")";
			} else {
				if (type.equals("1")) {
					sql = "select * from lspinfo lag where (lag.zsiteid=" + siteId + " and lag.ztunnelbusinessid =" + tunnelServiceId + ")";
				} else {
					sql = "select * from lspinfo lag where (lag.asiteid=" + siteId + " and lag.atunnelbusinessid =" + tunnelServiceId + ")";
				}
			}
			lspList=this.excuteQuery(sql, connection);
			if(null!= lspList && lspList.size() == 1){
				lspParticular = lspList.get(0);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return lspParticular;
	}

	/**
	 * 执行查询方法
	 * 
	 * @param sql
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	private List<Lsp> excuteQuery(String sql, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<Lsp> lspparticularList = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		Lsp lspparticular = null;

		try {
			lspparticularList = new ArrayList<Lsp>();

			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				lspparticular = new Lsp();
				lspparticular.setId(resultSet.getInt("id"));
				lspparticular.setTunnelId(resultSet.getInt("TunnelId"));
				lspparticular.setPathStatus(resultSet.getInt("pathStatus"));
				lspparticular.setASiteId(resultSet.getInt("aSiteId"));
				lspparticular.setZSiteId(resultSet.getInt("zSiteId"));
				lspparticular.setAPortId(resultSet.getInt("aPortId"));
				lspparticular.setZPortId(resultSet.getInt("zPortId"));
				lspparticular.setFrontLabelValue(resultSet.getInt("frontLabelValue"));
				lspparticular.setBackLabelValue(resultSet.getInt("backLabelValue"));
				lspparticular.setAlspbusinessid(resultSet.getInt("alspbusinessid"));
				lspparticular.setZlspbusinessid(resultSet.getInt("zlspbusinessid"));
				lspparticular.setAtunnelbusinessid(resultSet.getInt("atunnelbusinessid"));
				lspparticular.setZtunnelbusinessid(resultSet.getInt("ztunnelbusinessid"));
				lspparticular.setSegmentId((resultSet.getInt("segmentId")));
				lspparticular.setAoppositeId(resultSet.getString("aoppositeId"));
				lspparticular.setZoppositeId(resultSet.getString("zoppositeId"));
				lspparticular.setSourceMac(resultSet.getString("sourceMac"));
				lspparticular.setTargetMac(resultSet.getString("targetMac"));
				lspparticular.setFrontTtl(resultSet.getInt("frontTtl"));
				lspparticular.setBackTtl(resultSet.getInt("backTtl"));
				lspparticularList.add(lspparticular);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
			lspparticular = null;
		}
		return lspparticularList;
	}

	/**
	 * 执行查询方法
	 * 
	 * @param sql
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	private List<Lsp> excuteQuery(PreparedStatement preparedStatement) throws Exception {
		if (null == preparedStatement) {
			throw new Exception("preparedStatement is null");
		}

		List<Lsp> lspparticularList = null;
		ResultSet resultSet = null;
		Lsp lspparticular = null;

		try {
			lspparticularList = new ArrayList<Lsp>();
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				lspparticular = new Lsp();
				lspparticular.setId(resultSet.getInt("id"));
				lspparticular.setTunnelId(resultSet.getInt("TunnelId"));
				lspparticular.setPathStatus(resultSet.getInt("pathStatus"));
				lspparticular.setASiteId(resultSet.getInt("aSiteId"));
				lspparticular.setZSiteId(resultSet.getInt("zSiteId"));
				lspparticular.setAPortId(resultSet.getInt("aPortId"));
				lspparticular.setZPortId(resultSet.getInt("zPortId"));
				lspparticular.setFrontLabelValue(resultSet.getInt("frontLabelValue"));
				lspparticular.setBackLabelValue(resultSet.getInt("backLabelValue"));
				lspparticular.setAlspbusinessid(resultSet.getInt("alspbusinessid"));
				lspparticular.setZlspbusinessid(resultSet.getInt("zlspbusinessid"));
				lspparticular.setAtunnelbusinessid(resultSet.getInt("atunnelbusinessid"));
				lspparticular.setZtunnelbusinessid(resultSet.getInt("ztunnelbusinessid"));
				lspparticular.setSegmentId((resultSet.getInt("segmentId")));
				lspparticular.setAoppositeId(resultSet.getString("aoppositeId"));
				lspparticular.setZoppositeId(resultSet.getString("zoppositeId"));
				lspparticular.setFrontTtl(resultSet.getInt("frontTtl"));
				lspparticular.setBackTtl(resultSet.getInt("backTtl"));
				lspparticular.setSourceMac(resultSet.getString("sourceMac"));
				lspparticular.setTargetMac(resultSet.getString("targetMac"));
				lspparticularList.add(lspparticular);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			lspparticular = null;
		}
		return lspparticularList;
	}

	public List<Lsp> queryBySiteId(int siteId, Connection connection) throws Exception {
		if (0 == siteId) {
			throw new Exception("siteId is null");
		}

		List<Lsp> lspparticularList = null;
		String sql = null;

		try {
			sql = "select * FROM lspinfo where  aSiteId = " + siteId + "  or zSiteId = " + siteId + " ";

			lspparticularList = this.excuteQuery(sql, connection);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return lspparticularList;
	}

	public List<Lsp> queryBySiteIdAndTunnelId(int siteId, int tunnelId, Connection connection) throws Exception {
		if (0 == siteId) {
			throw new Exception("siteId is null");
		}

		List<Lsp> lspparticularList = null;
		String sql = null;

		try {
			sql = "select * FROM lspinfo where  (aSiteId = " + siteId + "  or zSiteId = " + siteId + ") and (tunnelId = " + tunnelId + " ) ";

			lspparticularList = this.excuteQuery(sql, connection);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return lspparticularList;
	}

	/**
	 * 同步时查询方法 根据角色不同 执行不同的查询语句
	 * 
	 * @author kk
	 * @param connection
	 *            数据库连接
	 * @param roole
	 *            角色 "ingress"=A端 "egress"=z端 "xc"=中间节点 ""=武汉不确定是a还是z 所以同时比较az端
	 * @param siteid
	 *            网元id
	 * @param tunnel
	 *            tunnel对象
	 * @return
	 * @throws Exception
	 * @Exception 异常对象
	 */
	public List<Lsp> querySychro(Connection connection, String role, int siteid, Tunnel tunnel) throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}
		if (null == role) {
			throw new Exception("role is null");
		}
		if (0 == siteid) {
			throw new Exception("siteid is 0");
		}
		if (null == tunnel) {
			throw new Exception("tunnel is null");
		}
		List<Lsp> lspList = null;
		String sql = null;
		List<Object> paramList = null;
		Lsp lspinfo = null;
		PreparedStatement preparedStatement = null;

		try {
			paramList = new ArrayList<Object>();
			lspinfo = tunnel.getLspParticularList().get(0);
			sql = this.SQL_SELECT;
			if ("".equals(role)) { // 角色为"" 不确定此数据是A还是Z 同时比较A Z两端
				if(tunnel.getLspParticularList() != null && tunnel.getLspParticularList().size() ==1){
					sql += " where l.tunnelId in (select t.tunnelId FROM tunnel t where t.asiteid=? OR t.zsiteid=? ) and ((l.aSiteId=? and l.atunnelbusinessid=?) or (l.zSiteId =? and l.ztunnelbusinessid=?))";
					paramList.add(siteid);
					paramList.add(siteid);
					paramList.add(siteid);
					paramList.add(lspinfo.getAtunnelbusinessid());
					paramList.add(siteid);
					paramList.add(lspinfo.getZtunnelbusinessid());
				}else if(tunnel.getLspParticularList() != null && tunnel.getLspParticularList().size() ==2){
					sql += " where (l.zSiteId=? AND l.ztunnelbusinessid=?) OR (l.aSiteId=? and l.atunnelbusinessid=?)";
					paramList.add(siteid);
					paramList.add(lspinfo.getZtunnelbusinessid());
					paramList.add(siteid);
					paramList.add(tunnel.getLspParticularList().get(1).getAtunnelbusinessid());
				}
				
			} else if ("ingress".equals(role)) {
				sql += " where l.tunnelId in (select t.tunnelId FROM tunnel t where t.asiteid=? and tunneltype!='0' ) and l.atunnelbusinessid=?";
				paramList.add(siteid);
				paramList.add(lspinfo.getAtunnelbusinessid());
			} else if ("egress".equals(role)) {
				sql += " where l.tunnelId in (select t.tunnelId FROM tunnel t where t.zsiteid=? and tunneltype!='0' ) and l.ztunnelbusinessid=?";
				paramList.add(siteid);
				paramList.add(lspinfo.getZtunnelbusinessid());
			} else if ("xc".equals(role)) {
				sql += " where (l.zSiteId=? AND l.ztunnelbusinessid=?) OR (l.aSiteId=? and l.atunnelbusinessid=?)";
				paramList.add(siteid);
				paramList.add(lspinfo.getZtunnelbusinessid());
				paramList.add(siteid);
				paramList.add(lspinfo.getAtunnelbusinessid());
			} else {
				throw new Exception("role is error");
			}

			preparedStatement = connection.prepareStatement(sql);
			for (int i = 0; i < paramList.size(); i++) {
				preparedStatement.setObject(i + 1, paramList.get(i));
			}
			lspList = this.excuteQuery(preparedStatement);

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
			paramList = null;
			lspinfo = null;
		}

		return lspList;
	}

	/**
	 * 根据端口ID查询lsp
	 * 
	 * @param portId
	 *            端口ID
	 * @param connection
	 *            数据库连接
	 * @return lsp集合
	 * @throws Exception
	 */
	public List<Lsp> queryByPort(int portId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		PreparedStatement preparedStatement = null;
		List<Lsp> lspList = null;
		try {
			preparedStatement = connection.prepareStatement(this.SQL_SELECT_PORT);
			preparedStatement.setInt(1, portId);
			preparedStatement.setInt(2, portId);
			lspList = this.excuteQuery(preparedStatement);

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
		}
		return lspList;
	}

	/**
	 * 验证同一端口下标签是否被用过
	 * @param portId
	 * @param label
	 * @param connection
	 * @return 
	 * @throws Exception 
	 */
	public boolean queryOutLabelUsable(int portId, int label, Connection connection) throws Exception {
		String sql = "select backLabelValue from lspinfo where aportid=? or zportid=?";
		if (null == connection) {
			throw new Exception("connection is null");
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int outLabel = 0;
		try {
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, portId);
			preparedStatement.setInt(2, portId);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				outLabel = resultSet.getInt("backLabelValue");
				if(outLabel == label){
					return false;
				}
			}
			
			return true;
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}

		}
	}

	/**
	 * @throws Exception 
	 */
	public List<Lsp> selectBusinessId(int siteId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		sql = "select aSiteId,zSiteId,atunnelbusinessid,ztunnelbusinessid,tunnelId from lspinfo lag " +
					"where lag.asiteid=? or lag.zsiteid=?";
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Lsp> lspparticularList = new ArrayList<Lsp>();
		try {
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			preparedStatement.setInt(2, siteId);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				Lsp lspparticular = new Lsp();
				lspparticular.setASiteId(resultSet.getInt("aSiteId"));
				lspparticular.setZSiteId(resultSet.getInt("zSiteId"));
				lspparticular.setAtunnelbusinessid(resultSet.getInt("atunnelbusinessid"));
				lspparticular.setZtunnelbusinessid(resultSet.getInt("ztunnelbusinessid"));
				lspparticular.setTunnelId(resultSet.getInt("tunnelId"));
				lspparticularList.add(lspparticular);
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}

		}
		return lspparticularList;
	}

	// /**
	// *
	//	
	// * update_synchro(这里用一句话描述这个方法的作用)
	//	
	// * @author kk
	//	
	// * @param
	//	
	// * @return
	//	
	// * @Exception 异常对象
	// */
	// public void update_synchro(){
	//		
	// }
	
	public int queryTunnelIdBySiteIdAndBusiId(int siteId, int tunnelServiceId, Connection connection) throws Exception {
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			String sql = "select tunnelId from lspinfo l where (l.asiteid=" + siteId +
			" and l.atunnelbusinessid =" + tunnelServiceId + ") OR (l.zsiteid=" + siteId +
			" and l.ztunnelbusinessid =" + tunnelServiceId + ")";
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				return resultSet.getInt("tunnelId");
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
		}
		return 0;
	}

}
