package com.nms.model.ptn.path.protect;

import java.util.ArrayList;
import java.util.List;

import org.apache.ibatis.session.SqlSession;

import com.nms.db.bean.path.Segment;
import com.nms.db.bean.ptn.Businessid;
import com.nms.db.bean.ptn.path.protect.LoopProtectInfo;
import com.nms.db.dao.ptn.BusinessidMapper;
import com.nms.db.dao.ptn.path.protect.LoopProtectInfoMapper;
import com.nms.db.enums.EActionType;
import com.nms.db.enums.EServiceType;
import com.nms.model.path.SegmentService_MB;
import com.nms.model.util.ObjectService_Mybatis;
import com.nms.model.util.Services;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.ExceptionManage;

public class WrappingProtectService_MB extends ObjectService_Mybatis {
	private LoopProtectInfoMapper mapper = null;
	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}

	public void setSession(SqlSession sqlSession) {
		super.sqlSession = sqlSession;
	}
	
	public void setMapper(LoopProtectInfoMapper mapper2) {
		this.mapper = sqlSession.getMapper(LoopProtectInfoMapper.class);
	}

	public List<LoopProtectInfo> select(LoopProtectInfo loopCondition) {
		List<LoopProtectInfo> loopProtectInfos = null;
		SegmentService_MB segmentService = null;
		try {
			List<Segment> list = new ArrayList<Segment>();
			loopProtectInfos = this.mapper.queryByCondition(loopCondition);
			segmentService = (SegmentService_MB) ConstantUtil.serviceFactory.newService_MB(Services.SEGMENT, this.sqlSession);
			if (loopProtectInfos != null && loopProtectInfos.size() > 1) {// 带上对应的西向段
				for (int i = 0; i < loopProtectInfos.size(); i++) {
					Segment condition = new Segment();
					condition.setASITEID(loopProtectInfos.get(i).getSiteId());
					condition.setAPORTID(loopProtectInfos.get(i).getWestPort());
					list = segmentService.selectBySiteIdAndPort(condition);
					if (list.size() > 0) {
						Segment segment = list.get(0);
						loopProtectInfos.get(i).setWestSegment(segment);
					}
				}
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return loopProtectInfos;
	}

	public int update(List<LoopProtectInfo> loopList) {
		int result = 0;
		Businessid wrappingSerBusinessId = null;
		LoopProtectInfo loopProtectSelect = null;
		LoopProtectInfo loopProtectResult = null;
		try {
			loopProtectSelect = new LoopProtectInfo();
			// 更新bussinessid和修改环保护数据
			BusinessidMapper busiMapper = this.sqlSession.getMapper(BusinessidMapper.class);
			for (LoopProtectInfo loopProtectInfo : loopList) {
				result = this.mapper.update(loopProtectInfo);
				loopProtectSelect.setSiteId(loopProtectInfo.getSiteId());
				loopProtectSelect.setEastPort(loopProtectInfo.getEastPort());
				loopProtectSelect.setWestPort(loopProtectInfo.getWestPort());
				loopProtectResult = this.select(loopProtectSelect).get(0);
				Businessid condition = new Businessid();
				if (loopProtectResult.getNodeId() != loopProtectInfo.getNodeId()) {
					condition.setIdValue(loopProtectResult.getNodeId());
					condition.setSiteId(loopProtectInfo.getSiteId());
					condition.setType("ringNode");
					wrappingSerBusinessId = busiMapper.query(condition);
					condition.setId(wrappingSerBusinessId.getId());
					condition.setIdStatus(0);
					busiMapper.update(condition);// 将环id设置为可用
					condition.setIdValue(loopProtectInfo.getNodeId());
					wrappingSerBusinessId = busiMapper.query(condition);
					condition.setId(wrappingSerBusinessId.getId());
					condition.setIdStatus(1);
					busiMapper.update(condition);// 将环id设置不为可用
				}
				if (loopProtectResult.getWestNodeId() != loopProtectInfo.getWestNodeId()) {
					condition.setIdValue(loopProtectResult.getWestNodeId());
					wrappingSerBusinessId = busiMapper.query(condition);
					condition.setId(wrappingSerBusinessId.getId());
					condition.setIdStatus(0);
					busiMapper.update(condition);// 将环id设置为可用
					condition.setIdValue(loopProtectInfo.getWestNodeId());
					wrappingSerBusinessId = busiMapper.query(condition);
					condition.setId(wrappingSerBusinessId.getId());
					condition.setIdStatus(1);
					busiMapper.update(condition);// 将环id设置不为可用
				}
				if (loopProtectResult.getEastNodeId() != loopProtectInfo.getEastNodeId()) {
					condition.setIdValue(loopProtectResult.getEastNodeId());
					wrappingSerBusinessId = busiMapper.query(condition);
					condition.setId(wrappingSerBusinessId.getId());
					condition.setIdStatus(0);
					busiMapper.update(condition);// 将环id设置为可用
					condition.setIdValue(loopProtectInfo.getEastNodeId());
					wrappingSerBusinessId = busiMapper.query(condition);
					condition.setId(wrappingSerBusinessId.getId());
					condition.setIdStatus(1);
					busiMapper.update(condition);// 将环id设置不为可用
				}
				//离线网元数据下载
				super.dateDownLoad(loopProtectInfo.getSiteId(),loopProtectInfo.getId(), EServiceType.LOOPPROTECT.getValue(), EActionType.UPDATE.getValue());
			}
			this.sqlSession.commit();
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return result;
	}
}
