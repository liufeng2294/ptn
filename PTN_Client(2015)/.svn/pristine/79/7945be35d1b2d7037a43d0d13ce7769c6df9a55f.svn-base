package com.nms.db.dao.ptn;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.LabelInfo;

public class LabelInfoDao {
	private final String DELETE_BY_SITE = "delete from labelinfo where siteid=?";

	/**
	 * 新增LabelInfo
	 * 
	 * @param labelInfo
	 *            实体
	 * @param connection
	 *            数据库连接
	 * @return 插入的记录数
	 * @throws Exception
	 */
	public void insertBatch(List<LabelInfo> labelInfos,String type, Connection connection) throws Exception {

		if (null == labelInfos) {
			throw new Exception("labelInfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;

		try {
			sql = "insert ignore into labelinfo(siteid,lsrId,labelValue,labelStatus,type) values(?,?,?,?,?)";
			preparedStatement = connection.prepareStatement(sql);
			for (LabelInfo labelInfo : labelInfos) {
				preparedStatement.setInt(1, labelInfo.getSiteid());
				preparedStatement.setInt(2, labelInfo.getLsrId());
				preparedStatement.setInt(3, labelInfo.getLabelValue());
				preparedStatement.setInt(4, labelInfo.getLabelStatus());
				preparedStatement.setString(5, labelInfo.getType());
				preparedStatement.addBatch();
			}
			preparedStatement.executeBatch();
		} catch (Exception e) {
			connection.rollback();
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}

			sql = null;
		}

	}

	/**
	 * 插入
	 * 
	 * @param labelInfo
	 * @param connection
	 * @throws Exception
	 */
	public void insert(LabelInfo labelInfo,Connection connection) throws Exception {

		if (null == labelInfo) {
			throw new Exception("labelInfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;

		try {
			sql = "insert ignore into labelinfo(siteid,lsrId,labelValue,labelStatus,type) values(?,?,?,?,?)";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, labelInfo.getSiteid());
			preparedStatement.setInt(2, labelInfo.getLsrId());
			preparedStatement.setInt(3, labelInfo.getLabelValue());
			preparedStatement.setInt(4, labelInfo.getLabelStatus());
			preparedStatement.setString(5, labelInfo.getType());
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}

			sql = null;
		}

	}

	/**
	 * 修改LabelInfo
	 * 
	 * @param labelinfo
	 *            实体
	 * @param connection
	 *            数据库连接
	 * @return 修改的记录数
	 * @throws Exception
	 */
	public void updateStatusBatch(int labelValues, int siteid, int status, String type,Connection connection) throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		//目前设备的芯片不支持同一端口的lsp的入标签和该端口上的pw的入标签一样,所以要用下面的代码
		if(type.equals("TUNNEL") || type.equals("PW")){
			type = "WH";
		}
		//如果以后芯片支持同一端口的lsp的入标签和该端口上的pw的入标签一样,就用下面的代码,把上面的代码关掉
		try {
			sql = "update labelinfo set labelStatus=? where siteid=? and labelvalue=? and type=?";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, status);
			preparedStatement.setInt(2, siteid);
			preparedStatement.setInt(3, labelValues);
			preparedStatement.setString(4, type);
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

	}

	/**
	 * 根据主键删除 LabelInfo
	 * 
	 * @param id
	 *            主键
	 * @param connection
	 *            数据库连接
	 * @return 删除的记录数
	 * @throws Exception
	 */
	public int delete(int siteid, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "delete from labelinfo where siteid=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteid);

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 根据类型查询最大标签值
	 * 
	 * @return
	 * @throws Exception
	 */
	public String queryMaxLabelValue(int siteid, String type,Connection connection) throws Exception {

		if (connection == null) {
			throw new Exception("connection is null");
		}

		String sql = null;
		String resultStr = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {

			sql = "select MAX(labelvalue) as maxlabelvalue from labelinfo where siteid=? and type=? and lsrId = 1";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteid);
			preparedStatement.setString(2, type);
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				resultStr = resultSet.getString("maxlabelvalue");
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return resultStr;
	}

	/**
	 * 根据labelvalues查询数据
	 * 
	 * @param labelValues
	 * @param siteId
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<LabelInfo> queryByLabelvalues(List<Integer> labelValues, int siteId,String type, Connection connection) throws Exception {

		List<LabelInfo> labelInfos = null;
		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			if (labelValues.size() > 0) {
				sql = "select * from labelinfo where labelStatus=0 and siteid=? and type=? and labelvalue in (";

				for (@SuppressWarnings("unused")
				int labelvalue : labelValues) {
					sql += "?,";
				}
				sql = sql.substring(0, sql.length() - 1) + ")";
				preparedStatement = connection.prepareStatement(sql);
				preparedStatement.setInt(1, siteId);
				preparedStatement.setString(2, type);
				for (int i = 0; i < labelValues.size(); i++) {
					preparedStatement.setInt(i + 3, labelValues.get(i));
				}
				labelInfos = this.executeQuery(preparedStatement);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return labelInfos;

	}

	/**
	 * 根据标签值查询标签
	 * 
	 * @param labelValue
	 * @param siteId
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<LabelInfo> quertyByLabelValue(int labelValue, int siteid, int siteId, String type,Connection connection) throws Exception {

		List<LabelInfo> labelinfoList = null;
		String sql = null;
		PreparedStatement preparedStatement = null;

		try {
			labelinfoList = new ArrayList<LabelInfo>();
			sql = "select * from labelinfo where labelValue=? and siteid=? and type=?";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, labelValue);
			preparedStatement.setInt(2, siteid);
			preparedStatement.setString(3, type);
			labelinfoList = this.executeQuery(preparedStatement);

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return labelinfoList;

	}

	/**
	 * 获取两个网元相同的标签
	 * 
	 * @param asiteid
	 * @param zsiteid
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int quertyLabelBySite(int asiteid, int zsiteid,String type, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		try {
			sql = "select tmp.labelvalue as labelvalue from (select labelvalue from labelinfo a where a.siteid=? AND a.labelStatus =1 and a.type=?) tmp ,(select labelvalue from labelinfo z where z.siteid=? AND z.labelStatus =1 and z.type=?) tmp2 where tmp.labelvalue=tmp2.labelvalue";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, asiteid);
			preparedStatement.setString(2, type);
			preparedStatement.setInt(3, zsiteid);
			preparedStatement.setString(4, type);
			resultSet = preparedStatement.executeQuery();

			if (resultSet.next()) {
				result = resultSet.getInt("labelValue");
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}

	/**
	 * 执行查询
	 * 
	 * @param preparedStatement
	 * @return
	 * @throws Exception
	 */
	private List<LabelInfo> executeQuery(PreparedStatement preparedStatement) throws Exception {
		ResultSet resultSet = null;
		List<LabelInfo> labelinfoList = null;
		LabelInfo labelinfo = null;
		try {
			labelinfoList = new ArrayList<LabelInfo>();
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				labelinfo = new LabelInfo();
				labelinfo.setId(resultSet.getInt("id"));
				labelinfo.setLabelStatus(resultSet.getInt("labelStatus"));
				labelinfo.setSiteid(resultSet.getInt("siteid"));
				labelinfo.setLabelValue(resultSet.getInt("labelValue"));
				labelinfo.setLabelStatus(resultSet.getInt("labelStatus"));
				labelinfo.setType(resultSet.getString("type"));
				labelinfoList.add(labelinfo);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			labelinfo = null;
		}
		return labelinfoList;

	}

	/**
	 * 根据网元ID删除
	 * 
	 * @author kk
	 * 
	 * @param siteid
	 *            网元id
	 * @param connection
	 *            数据库连接
	 * 
	 * @return
	 * @throws Exception
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	public void deleteBySite(int siteId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		try {
			preparedStatement = connection.prepareStatement(this.DELETE_BY_SITE);
			preparedStatement.setInt(1, siteId);
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
		}
	}

	/**
	 * 根据条件查询
	 * 
	 * @param labelinfoCondition
	 *            查询条件
	 * @param connection
	 *            数据库连接
	 * @return List<LabelInfo> 集合
	 * @throws Exception
	 */
	public List<LabelInfo> queryByCondition(LabelInfo labelinfoCondition, Connection connection) throws Exception {

		if (null == labelinfoCondition) {
			throw new Exception("labelinfoCondition is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<LabelInfo> labelinfoList = null;
		String sql = null;
		PreparedStatement preparedStatement = null;

		try {
			labelinfoList = new ArrayList<LabelInfo>();
			sql = "select id,labelType,lsrId,labelValue,labelStatus ,type from labelinfo where labelStatus=1 and siteid = ? ";

			if (labelinfoCondition.getLabelValue() != 0) {
				sql += " and labelValue=" + labelinfoCondition.getLabelValue();
			}
			if (labelinfoCondition.getType() != null && !"".equals(labelinfoCondition.getType())) {
				sql += " and type='" + labelinfoCondition.getType()+"'";
			}

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, labelinfoCondition.getSiteid());

			labelinfoList = this.executeQuery(preparedStatement);

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return labelinfoList;
	}

	/**
	 * 获取两个网元所有相同的标签
	 * 
	 * @param asiteid
	 * @param zsiteid
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	// public int quertyLabelListBySite(int asiteid, int zsiteid,List<Integer> labelValues, Connection connection) throws Exception {
	// if (null == connection) {
	// throw new Exception("connection is null");
	// }
	//
	// String sql = null;
	// PreparedStatement preparedStatement = null;
	// ResultSet resultSet = null;
	// int result = 0;
	// int maxValue = 0;
	// try {
	// if(labelValues.size()!=0){
	// Collections.sort(labelValues);
	// int size = labelValues.size();
	// maxValue = labelValues.get(size-1);
	// if(maxValue == 1048575){
	// maxValue = 16;
	// }
	// }
	//			
	// sql = "select tmp.labelvalue as labelvalue from (select labelvalue from labelinfo a where a.siteid=? AND a.labelStatus =1) tmp ,(select labelvalue from labelinfo z where z.siteid=? AND z.labelStatus =1) tmp2 where tmp.labelvalue=tmp2.labelvalue";
	// if(labelValues.size()!=0){
	// sql += " and tmp.labelvalue > ?";
	// }
	// preparedStatement = connection.prepareStatement(sql);
	// preparedStatement.setInt(1, asiteid);
	// preparedStatement.setInt(2, zsiteid);
	// if(labelValues.size()!=0){
	// preparedStatement.setInt(3, maxValue);
	// }
	// resultSet = preparedStatement.executeQuery();
	//
	// if (resultSet.next()) {
	// result = resultSet.getInt("labelValue");
	// }
	//
	// } catch (Exception e) {
	// ExceptionManage.dispose(e,this.getClass());
	// } finally {
	// if (resultSet != null) {
	// try {
	// resultSet.close();
	// } catch (Exception e) {
	// ExceptionManage.dispose(e,this.getClass());
	// }
	// resultSet = null;
	// }
	// if (preparedStatement != null) {
	// try {
	// preparedStatement.close();
	// } catch (Exception e) {
	// }
	// preparedStatement = null;
	// }
	// sql = null;
	// }
	// return result;
	// }
	/**
	 * 获取两个网元所有相同的标签
	 * 
	 * @param asiteid
	 * @param zsiteid
	 * @param connection
	 * @param manufacturerZ 等于1是晨晓设备,入标签网元唯一
	 * @param manufacturerA 
	 * @return
	 * @throws Exception
	 */
	public List<Integer> quertyLabelListBySite(int asiteid, int zsiteid, List<Integer> labelValues, 
													String type, Connection connection, int manufacturerA,
														int manufacturerZ) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Integer> labelList = new ArrayList<Integer>();
		int maxValue = 0;
		int index = 0;
		try {
			//目前设备的芯片不支持同一端口的lsp的入标签和该端口上的pw的入标签一样,所以要用下面的代码
			if(type.equals("TUNNEL") || type.equals("PW")){
				type = "WH";
			}
			//如果以后芯片支持同一端口的lsp的入标签和该端口上的pw的入标签一样,就用下面的代码,把上面的代码关掉
//			if (labelValues.size() != 0) {
//				Collections.sort(labelValues);
//				int size = labelValues.size();
//				maxValue = labelValues.get(size-1);
//				if(maxValue >= 1048575){
//					maxValue = 16;
//				}
//			}
			
			if(manufacturerA == 1 && manufacturerZ == 0){
				sql = "select tmp.labelvalue as labelvalue from (select labelvalue from labelinfo a where a.siteid=? AND a.labelStatus =1) tmp ," +
						"(select labelvalue from labelinfo z where z.siteid=? AND z.labelStatus =1 and z.type=?) tmp2 where tmp.labelvalue=tmp2.labelvalue";
			}else if(manufacturerA == 0 && manufacturerZ == 1){
				sql = "select tmp.labelvalue as labelvalue from (select labelvalue from labelinfo a where a.siteid=? AND a.labelStatus =1 and a.type=?) tmp ," +
						"(select labelvalue from labelinfo z where z.siteid=? AND z.labelStatus =1) tmp2 where tmp.labelvalue=tmp2.labelvalue";
			}else if(manufacturerA == 1 && manufacturerZ == 1){
				sql = "select tmp.labelvalue as labelvalue from (select labelvalue from labelinfo a where a.siteid=? AND a.labelStatus =1) tmp ," +
						"(select labelvalue from labelinfo z where z.siteid=? AND z.labelStatus =1) tmp2 where tmp.labelvalue=tmp2.labelvalue";
			}else if(manufacturerA == 0 && manufacturerZ == 0){
				sql = "select tmp.labelvalue as labelvalue from (select labelvalue from labelinfo a where a.siteid=? AND a.labelStatus =1 and a.type=?) tmp ," +
						"(select labelvalue from labelinfo z where z.siteid=? AND z.labelStatus =1 and z.type=?) tmp2 where tmp.labelvalue=tmp2.labelvalue";
			}
			
//			if (labelValues.size() != 0) {
//				sql += " and tmp.labelvalue > ?";
//			}
			if (labelValues.size() != 0) {
				sql += " and tmp.labelvalue not in(";
				for (int value : labelValues) {
					sql += value+",";
				}
				sql = sql.substring(0, sql.length()-1);
				sql += ")";
			}
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, asiteid);
			if(manufacturerA == 1 && manufacturerZ == 0){
				preparedStatement.setInt(2, zsiteid);
				preparedStatement.setString(3, type);
				index = 4;
			}else if(manufacturerA == 0 && manufacturerZ == 1){
				preparedStatement.setString(2, type);
				preparedStatement.setInt(3, zsiteid);
				index = 4;
			}else if(manufacturerA == 1 && manufacturerZ == 1){
				preparedStatement.setInt(2, zsiteid);
				index = 3;
			}else if(manufacturerA == 0 && manufacturerZ == 0){
				preparedStatement.setString(2, type);
				preparedStatement.setInt(3, zsiteid);
				preparedStatement.setString(4, type);
				index = 5;
			}
			
//			if (labelValues.size() != 0) {
//				preparedStatement.setInt(index, maxValue);
//			}
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				labelList.add(resultSet.getInt("labelValue"));
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return labelList;
	}

	/**
	 * 根据标签值查询标签是否可用
	 * 
	 * @param labelValue
	 * @param siteId
	 * @param connection
	 * @return true/false  可用/不可用
	 * @throws Exception
	 */
	public boolean isUsedLabel(int labelValue, int siteId,String type, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		boolean flag = true;
		try {
			sql = "select labelvalue from labelinfo a where a.siteid=? AND a.labelStatus = 0 and a.labelValue = ? and a.type=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			preparedStatement.setInt(2, labelValue);
			preparedStatement.setString(3, type);
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				flag = false;
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return flag;
	}

	/**
	 * 获取两个网元所有相同的标签
	 * 
	 * @param asiteid
	 * @param zsiteid
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<Integer> quertyAllLabel(int asiteid, String type, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		List<Integer> allLabelList = new ArrayList<Integer>();
		try {
			sql = "select tmp.labelvalue as labelvalue from (select labelvalue from labelinfo a where a.siteid=? AND a.labelStatus =1 and a.type=?) tmp ,(select labelvalue from labelinfo z where z.siteid=? AND z.labelStatus =1 and z.type=?) tmp2 where tmp.labelvalue=tmp2.labelvalue";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, asiteid);
			preparedStatement.setString(2, type);
			preparedStatement.setInt(3, asiteid);
			preparedStatement.setString(4, type);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				result = resultSet.getInt("labelValue");
				allLabelList.add(result);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return allLabelList;
	}

	/**
	 * 插入labelInfo中没有的标签记录
	 * 
	 * @param labelInfo
	 * @param connection
	 * @throws Exception
	 */
	public void insertNewLabel(int labelValue, int siteId, String type, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		//目前设备的芯片不支持同一端口的lsp的入标签和该端口上的pw的入标签一样,所以要用下面的代码
		if(type.equals("TUNNEL") || type.equals("PW")){
			type = "WH";
		}
		//如果以后芯片支持同一端口的lsp的入标签和该端口上的pw的入标签一样,就用下面的代码,把上面的代码关掉
		try {
			sql = "insert ignore into labelinfo(lsrId,labelValue,labelStatus,siteid,type) " + "select ?,?,?,?,? from dual where (?,?,?) not in (select labelValue,siteid,type from labelinfo);";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, labelValue%100 == 0 ? 1 : 0);
			preparedStatement.setInt(2, labelValue);
			preparedStatement.setInt(3, 0);
			preparedStatement.setInt(4, siteId);
			preparedStatement.setString(5, type);
			preparedStatement.setInt(6, labelValue);
			preparedStatement.setInt(7, siteId);
			preparedStatement.setString(8, type);
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

	}

	/**
	 * 根据标签值查询标签是否可用
	 * 
	 * @param labelValue
	 * @param siteId
	 * @param connection
	 * @return true/false  可用/不可用
	 * @throws Exception 
	 * @throws Exception
	 */
	public boolean isUsedLabelForCX(int labelValue, int asiteId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		boolean flag = true;
		try {
			String sql = "select labelvalue from labelinfo a where a.siteid=? AND a.labelStatus = 0 and a.labelValue = ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, asiteId);
			preparedStatement.setInt(2, labelValue);
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				flag = false;
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
		}
		return flag;
	}

	public List<LabelInfo> queryByLabelvaluesForCX(List<Integer> labelValues,
			int siteId, Connection connection) throws Exception {
		List<LabelInfo> labelInfos = null;
		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			if (labelValues.size() > 0) {
				sql = "select * from labelinfo where labelStatus=0 and siteid=? and labelvalue in (";

				for (@SuppressWarnings("unused")
				int labelvalue : labelValues) {
					sql += "?,";
				}
				sql = sql.substring(0, sql.length() - 1) + ")";
				preparedStatement = connection.prepareStatement(sql);
				preparedStatement.setInt(1, siteId);
				for (int i = 0; i < labelValues.size(); i++) {
					preparedStatement.setInt(i + 2, labelValues.get(i));
				}
				labelInfos = this.executeQuery(preparedStatement);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return labelInfos;
	}

	public void updateLabelStatus(int siteId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;

		try {
			sql = "update labelinfo set labelStatus=1 where siteid=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
	}

	public List<LabelInfo> selectUsedLabel(LabelInfo labelinfoCondition, Connection connection) throws Exception {
		if (null == labelinfoCondition) {
			throw new Exception("labelinfoCondition is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<LabelInfo> labelinfoList = null;
		String sql = null;
		PreparedStatement preparedStatement = null;

		try {
			labelinfoList = new ArrayList<LabelInfo>();
			sql = "select * from labelinfo where labelStatus=0 and siteid = ? ";
			if (labelinfoCondition.getType() != null && !"".equals(labelinfoCondition.getType())) {
				sql += " and type='" + labelinfoCondition.getType()+"'";
			}
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, labelinfoCondition.getSiteid());
			labelinfoList = this.executeQuery(preparedStatement);
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return labelinfoList;
	}
	
	/**
	 * 新增一批可用的标签
	 * 
	 * @param labelInfo
	 *            实体
	 * @param connection
	 *            数据库连接
	 * @return 插入的记录数
	 * @throws Exception
	 */
	public void insertBatchBySite(int siteId, String type, int begin,
			int end, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			sql = "insert ignore into labelinfo(siteid,lsrId,labelValue,labelStatus,type) values(?,?,?,?,?)";
			preparedStatement = connection.prepareStatement(sql);
			for(int i = begin; i <= end; i++){
				preparedStatement.setInt(1, siteId);
				if(i == end){
					preparedStatement.setInt(2, 1);
				}else{
					preparedStatement.setInt(2, 0);
				}
				preparedStatement.setInt(3, i);
				preparedStatement.setInt(4, 1);
				preparedStatement.setString(5, type);
				preparedStatement.addBatch();
			}
			preparedStatement.executeBatch();
		} catch (Exception e) {
			connection.rollback();
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
		}
	}

	/**
	 * 将所有已使用的标签状态改为未使用，0改为1
	 * @param connection 
	 * @throws Exception 
	 */
	public void initAllLabel(Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		try {
			String sql = "update labelinfo set labelStatus=? where labelStatus=0";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, 1);
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
		}
	}
}
