package com.nms.db.dao.path;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.path.Segment;
import com.nms.ui.manager.DateUtil;
import com.nms.ui.manager.ExceptionManage;

public class SegmentDao {
	/**
	 * 根据两端端口查询 -kk
	 */
	private final String SELECT_PORTIDS = "select * from segment where (APORTID=? AND ZPORTID =? ) or (APORTID=? AND ZPORTID=?)";

	/**
	 * 根据网元查询 --kk
	 */
	private final String SELECT_SITE = "select * from segment where asiteid=? or zsiteid=?";

	public int insert(Segment paragraph, Connection connection) throws Exception {

		if (null == paragraph) {
			throw new Exception("paragraph is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		ResultSet resultSet = null;
		try {
			sql = "insert into segment(NAME,BANDWIDTH,TYPE,ASITEID,ZSITEID,APORTID,ZPORTID,CREATUSER,CREATTIME,ASLOT,ZSLOT,speed) values(?,?,?,?,?,?,?,?,?,?,?,?)";
			preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setString(1, paragraph.getNAME().trim());
			preparedStatement.setInt(2, paragraph.getBANDWIDTH());
			preparedStatement.setInt(3, paragraph.getTYPE());
			preparedStatement.setInt(4, paragraph.getASITEID());
			preparedStatement.setInt(5, paragraph.getZSITEID());
			preparedStatement.setInt(6, paragraph.getAPORTID());
			preparedStatement.setInt(7, paragraph.getZPORTID());
			preparedStatement.setString(8, paragraph.getCREATUSER());
			preparedStatement.setString(9, DateUtil.getDate(DateUtil.FULLTIME));
			preparedStatement.setInt(10, paragraph.getaSlotNumber());
			preparedStatement.setInt(11, paragraph.getzSlotNumber());
			preparedStatement.setString(12, paragraph.getSpeedSegment());
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				result = resultSet.getInt(1);
			}
		} catch (Exception e) {
			throw e;
		} finally {

			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}

			sql = null;
		}

		return result;
	}

	public int update(Segment paragraph, Connection connection) throws Exception {
		if (null == paragraph) {
			throw new Exception("paragraph is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "update segment set NAME=?,BANDWIDTH=?,TYPE=?,ASITEID=?,ZSITEID=?,APORTID=?,ZPORTID=? , CREATUSER = ? ,CREATTIME = ? , ASLOT = ? ,ZSLOT = ?,speed=? where ID=?";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, paragraph.getNAME().trim());
			preparedStatement.setInt(2, paragraph.getBANDWIDTH());
			preparedStatement.setInt(3, paragraph.getTYPE());
			preparedStatement.setInt(4, paragraph.getASITEID());
			preparedStatement.setInt(5, paragraph.getZSITEID());
			preparedStatement.setInt(6, paragraph.getAPORTID());
			preparedStatement.setInt(7, paragraph.getZPORTID());
			preparedStatement.setString(8, paragraph.getCREATUSER());
			preparedStatement.setString(9, paragraph.getCREATTIME());
			preparedStatement.setInt(10, paragraph.getaSlotNumber());
			preparedStatement.setInt(11, paragraph.getzSlotNumber());
			preparedStatement.setString(12, paragraph.getSpeedSegment());
			preparedStatement.setInt(13, paragraph.getId());
			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	public int delete(int ID, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "delete from segment where ID=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, ID);

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	public List<Segment> queryByCondition(Segment ParagraphCondition, Connection connection) throws Exception {

		if (null == ParagraphCondition) {
			throw new Exception("ParagraphCondition is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		List<Segment> list = null;
		try {
			sql = "SELECT s.ID, s.NAME, s.BANDWIDTH, s.TYPE, s.ASITEID, s.ZSITEID, s.APORTID, s.ZPORTID,s.ASLOT, s.ZSLOT,s.speed,sa.CellId AS showaSiteName, sz.CellId AS showzSiteName, pa.portName AS showaPortName, pz.portName AS showzPortName, s.CREATUSER, s.CREATTIME FROM segment s, site_inst sa, site_inst sz, port_inst pa, port_inst pz WHERE s.aSiteId = sa.site_inst_id AND s.zSiteId = sz.site_inst_id AND s.aPortId = pa.portId AND s.zPortId = pz.portId";

			if (ParagraphCondition.getId() > 0) {
				sql += " and ID=" + ParagraphCondition.getId();
			}
			if (ParagraphCondition.getNAME() != null && !"".equals(ParagraphCondition.getNAME())) {
				sql += " and s.NAME='" + ParagraphCondition.getNAME().trim() + "'";
			}
			if (ParagraphCondition.getASITEID() != 0) {
				sql += " and s.ASITEID=" + ParagraphCondition.getASITEID();
			}
			if (ParagraphCondition.getZSITEID() != 0) {
				sql += " and s.ZSITEID=" + ParagraphCondition.getZSITEID();
			}
			if (ParagraphCondition.getAPORTID() != 0) {
				sql += " and s.APORTID=" + ParagraphCondition.getAPORTID();
			}
			if (ParagraphCondition.getZPORTID() != 0) {
				sql += " and s.ZPORTID=" + ParagraphCondition.getZPORTID();
			}
			if (ParagraphCondition.getSpeedSegment()!= null && !"".equals(ParagraphCondition.getSpeedSegment())) {
				sql += " and s.speed=" + ParagraphCondition.getSpeedSegment();
			}
			if (ParagraphCondition.getCREATUSER() != null && !"".equals(ParagraphCondition.getCREATUSER())){
				sql += " and s.CREATUSER='" + ParagraphCondition.getCREATUSER() + "'";
			}
			list = this.excuteQuery(connection, sql);

		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return list;
	}

	private List<Segment> excuteQuery(Connection connection, String sql) throws Exception {
		List<Segment> SegmentList = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		Segment segment = null;
		try {
			SegmentList = new ArrayList<Segment>();
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				segment = new Segment();
				segment.setId(resultSet.getInt("ID"));
				segment.setNAME(resultSet.getString("NAME"));
				segment.setBANDWIDTH(resultSet.getInt("BANDWIDTH"));
				segment.setTYPE(resultSet.getInt("TYPE"));
				segment.setShowSiteAname(resultSet.getString("showaSiteName"));
				segment.setShowSiteZname(resultSet.getString("showzSiteName"));
				segment.setShowPortAname(resultSet.getString("showaPortName"));
				segment.setShowPortZname(resultSet.getString("showzPortName"));
				segment.setASITEID(resultSet.getInt("ASITEID"));
				segment.setZSITEID(resultSet.getInt("ZSITEID"));
				segment.setAPORTID(resultSet.getInt("APORTID"));
				segment.setZPORTID(resultSet.getInt("ZPORTID"));
				segment.setCREATUSER(resultSet.getString("CREATUSER"));
				segment.setCREATTIME(DateUtil.strDate(resultSet.getString("CREATTIME"), DateUtil.FULLTIME));
				segment.setaSlotNumber(resultSet.getInt("ASLOT"));
				segment.setzSlotNumber(resultSet.getInt("ZSLOT"));
				segment.setSpeedSegment(resultSet.getString("speed"));
				SegmentList.add(segment);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			segment = null;
		}

		return SegmentList;
	}

	private List<Segment> excuteQuery(PreparedStatement preparedStatement) throws Exception {
		List<Segment> SegmentList = null;
		ResultSet resultSet = null;
		Segment segment = null;
		try {
			SegmentList = new ArrayList<Segment>();
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				segment = new Segment();
				segment.setId(resultSet.getInt("ID"));
				segment.setNAME(resultSet.getString("NAME"));
				segment.setBANDWIDTH(resultSet.getInt("BANDWIDTH"));
				segment.setTYPE(resultSet.getInt("TYPE"));
				segment.setASITEID(resultSet.getInt("ASITEID"));
				segment.setZSITEID(resultSet.getInt("ZSITEID"));
				segment.setAPORTID(resultSet.getInt("APORTID"));
				segment.setZPORTID(resultSet.getInt("ZPORTID"));
				segment.setCREATUSER(resultSet.getString("CREATUSER"));
				segment.setCREATTIME(DateUtil.strDate(resultSet.getString("CREATTIME"), DateUtil.FULLTIME));
				segment.setaSlotNumber(resultSet.getInt("ASLOT"));
				segment.setzSlotNumber(resultSet.getInt("ZSLOT"));
				segment.setSpeedSegment(resultSet.getString("speed"));
				SegmentList.add(segment);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			segment = null;
		}

		return SegmentList;
	}

	/**
	 * 根据网元id，查询所有的段
	 * 
	 * @param siteId
	 *            网元数据库id
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<Segment> queryBySiteId(Integer siteId, Connection connection) throws Exception {

		if (null == siteId) {
			throw new Exception("siteId is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		List<Segment> list = null;
		try {
			sql = "SELECT s.ID, s.NAME,s.speed,s.BANDWIDTH, s.TYPE, s.ASITEID, s.ZSITEID, s.APORTID, s.ZPORTID, s.ASLOT, s.ZSLOT,sa.CellId AS showaSiteName, sz.CellId AS showzSiteName, pa.portName AS showaPortName, pz.portName AS showzPortName, s.CREATUSER, s.CREATTIME FROM segment s, site_inst sa, site_inst sz, port_inst pa, port_inst pz WHERE s.aSiteId = sa.site_inst_id AND s.zSiteId = sz.site_inst_id AND s.aPortId = pa.portId AND s.zPortId = pz.portId";

			if (siteId > 0) {
				sql += " and (s.ASITEID=" + siteId + " or s.ZSITEID=" + siteId + " )";
			}
			list = this.excuteQuery(connection, sql);

		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return list;
	}

	/**
	 * 根据两端端口ID查询数据
	 * 
	 * @author kk
	 * 
	 * @param portid_one
	 *            其中一个端口主键
	 * @param portid_two
	 *            第二个端口主键
	 * @param connection
	 *            数据库连接
	 * 
	 * @return
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	public List<Segment> query_search(int portid_one, int portid_two, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		List<Segment> sgementList = null;
		try {
			preparedStatement = connection.prepareStatement(this.SELECT_PORTIDS);
			preparedStatement.setInt(1, portid_one);
			preparedStatement.setInt(2, portid_two);
			preparedStatement.setInt(3, portid_two);
			preparedStatement.setInt(4, portid_one);
			sgementList = this.excuteQuery(preparedStatement);
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		return sgementList;
	}

	public List<Segment> queryBySiteIdAndPortId(Integer siteId, Integer portId, Connection connection) throws Exception {

		if (null == siteId) {
			throw new Exception("siteId is null");
		}

		if (null == portId) {
			throw new Exception("PortId is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		List<Segment> list = new ArrayList<Segment>();
		try {
			sql = "SELECT s.ID, s.speed, s.NAME, s.BANDWIDTH, s.TYPE, s.ASITEID, s.ZSITEID, s.APORTID, s.ZPORTID, s.ASLOT, s.ZSLOT,sa.CellId AS showaSiteName, sz.CellId AS showzSiteName, pa.portName AS showaPortName, pz.portName AS showzPortName, s.CREATUSER, s.CREATTIME FROM segment s, site_inst sa, site_inst sz, port_inst pa, port_inst pz WHERE s.aSiteId = sa.site_inst_id AND s.zSiteId = sz.site_inst_id AND s.aPortId = pa.portId AND s.zPortId = pz.portId";

			if (siteId > 0) {
				sql += " and (s.ASITEID=" + siteId + " or s.ZSITEID=" + siteId + " )";
			}
			if (portId > 0) {
				sql += " and (s.APORTID=" + portId + " or s.ZPORTID=" + portId + " )";
			}

			list = this.excuteQuerySegment(connection, sql);

		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return list;
	}

	private List<Segment> excuteQuerySegment(Connection connection, String sql) throws Exception {
		List<Segment> SegmentList = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		Segment segment = null;
		try {
			SegmentList = new ArrayList<Segment>();
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				segment = new Segment();
				segment.setId(resultSet.getInt("ID"));
				segment.setNAME(resultSet.getString("NAME"));
				segment.setBANDWIDTH(resultSet.getInt("BANDWIDTH"));
				segment.setTYPE(resultSet.getInt("TYPE"));
				segment.setShowSiteAname(resultSet.getString("showaSiteName"));
				segment.setShowSiteZname(resultSet.getString("showzSiteName"));
				segment.setShowPortAname(resultSet.getString("showaPortName"));
				segment.setShowPortZname(resultSet.getString("showzPortName"));
				segment.setASITEID(resultSet.getInt("ASITEID"));
				segment.setZSITEID(resultSet.getInt("ZSITEID"));
				segment.setAPORTID(resultSet.getInt("APORTID"));
				segment.setZPORTID(resultSet.getInt("ZPORTID"));
				segment.setCREATUSER(resultSet.getString("CREATUSER"));
				segment.setCREATTIME(DateUtil.strDate(resultSet.getString("CREATTIME"), DateUtil.FULLTIME));
				segment.setaSlotNumber(resultSet.getInt("ASLOT"));
				segment.setzSlotNumber(resultSet.getInt("ZSLOT"));
				segment.setSpeedSegment(resultSet.getString("speed"));
				SegmentList.add(segment);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			segment = null;
		}

		return SegmentList;
	}

	/**
	 * 根据网元ID查询
	 * 
	 * @author kk
	 * 
	 * @param
	 * 
	 * @return
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	public List<Segment> query_site(int siteId, Connection connection) throws Exception {

		PreparedStatement preparedStatement = null;
		List<Segment> segmentList = null;
		try {

			preparedStatement = connection.prepareStatement(this.SELECT_SITE);
			preparedStatement.setInt(1, siteId);
			preparedStatement.setInt(2, siteId);

			segmentList = this.excuteQuery(preparedStatement);

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		return segmentList;
	}

	public List<Segment> query_SegmentPortId(int portId, Connection connection) throws Exception {

		PreparedStatement preparedStatement = null;
		List<Segment> segmentList = null;
		try {
			String sql = "select * from segment where aportid=? or zportid=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, portId);
			preparedStatement.setInt(2, portId);

			segmentList = this.excuteQuery(preparedStatement);

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		return segmentList;
	}

	/**
	 * 查询名称是否重复
	 * 
	 * @author kk
	 * 
	 * @param
	 * 
	 * @return
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	public int query_name(String afterName, String beforeName, Connection connection) throws Exception {
		if (null == afterName) {
			throw new Exception("afterName is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		List<Object> paramList = new ArrayList<Object>();
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		try {
			sql = "select count(*) as selectcount from segment where name=?";
			paramList.add(afterName);
			if (null != beforeName) {
				sql += " and name!=?";
				paramList.add(beforeName);
			}
			preparedStatement = connection.prepareStatement(sql);
			for (int i = 0; i < paramList.size(); i++) {
				preparedStatement.setObject(i + 1, paramList.get(i));
			}
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				result = resultSet.getInt("selectcount");
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			paramList = null;
			sql = null;
		}

		return result;
	}
	
}
