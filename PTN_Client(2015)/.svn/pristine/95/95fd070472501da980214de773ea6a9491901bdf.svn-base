package com.nms.db.dao.ptn.clock;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.clock.LineClockInterface;
import com.nms.ui.manager.ExceptionManage;

public class TimeLineClockInterfaceDao {
	/**
	 * @param timeLineClockInterfaceInfo
	 *            实体
	 * @param conection
	 *            数据库连接
	 * @return 判断是否插入成功 返回的ID号 只要不是0就是插入成功
	 * @throws Exception
	 * 插入数据
	 */
	public int insert(LineClockInterface lineClockInterface,Connection conection) throws Exception {
		if (null == lineClockInterface) {
			throw new Exception("lineClockInterface is null");
		}
		if (null == conection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		try {
			sql = "insert into timeClockInterfac(siteId,port,rate,ssmSendingEnabled," +
					"dnuGroup,portName)value(?,?,?,?,?,?)";
			preparedStatement = conection.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, lineClockInterface.getSiteId());
			preparedStatement.setInt(2, lineClockInterface.getPort());
			preparedStatement.setString(3, lineClockInterface.getRate());
			preparedStatement.setInt(4, lineClockInterface.getSsmSendingEnabled());
			preparedStatement.setString(5, lineClockInterface.getDnuGroup());
			preparedStatement.setString(6, lineClockInterface.getPortName());
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				result = resultSet.getInt(1);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
	}
/**
 * 
 * @param timeLineClockInterfaceInfo 实体
 * @param connection 数据库连接
 * @return 1删除成功，0不成功；
 * @throws Exception
 * function:通过关联网元表主键 来删除数据
 */
	public int delete(LineClockInterface lineClockInterface,Connection connection) throws Exception {
		if (connection == null) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result=0;
		try {
			sql = "delete from timeClockInterfac where siteId=?";
            
			preparedStatement = connection.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, lineClockInterface.getId());
			
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		}finally{
			sql=null;
			if(preparedStatement!=null){
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement=null;
			}
		}
		return result;
	}
	/**
	 * function: 查找单个的网元时钟的状态和属性
	 * @param conn 数据库连接
	 * @return 所有网元时钟的状态和属性 集合
	 * @throws Exception
	 */
public List<LineClockInterface> select(Connection conn,int id) throws Exception{
	if(conn==null){
		throw new Exception("connection is null");
	}
	String sql=null;
	PreparedStatement pre=null;
	ResultSet ste=null;
	List<LineClockInterface> lineClockInterfaceBeanList=null;
	LineClockInterface lineClockInterface=null;
	try {
		lineClockInterfaceBeanList=new ArrayList<LineClockInterface>();
		sql="select * from timeClockInterfac where siteId=?";
		
		pre=conn.prepareStatement(sql);
		pre.setInt(1, id);
		ste=pre.executeQuery();		
		while(ste.next()){
			lineClockInterface=new LineClockInterface();

			lineClockInterface.setId(ste.getInt("id"));
			lineClockInterface.setSiteId(ste.getInt("siteId"));
			lineClockInterface.setPort(ste.getInt("port"));
			lineClockInterface.setRate(ste.getString("rate"));
			lineClockInterface.setSsmSendingEnabled(ste.getInt("ssmSendingEnabled"));
			lineClockInterface.setDnuGroup(ste.getString("dnuGroup"));
			
//			/**
//			 * 通过 port   查  port-inst表
//			 * portName  作为页面显示
//			 */
//			portInst=new PortInst();
//			portInst.setPortId(lineClockInterface.getPort());
//			portInst =  portService.select(portInst).get(0);
			lineClockInterface.setPortName(ste.getString("portName"));
			lineClockInterfaceBeanList.add(lineClockInterface);
		}
	} catch (Exception e) {
		throw e;
	}finally{
		sql=null;
		if (ste != null) {
			try {
				ste.close();
			} catch (Exception e) {
				ExceptionManage.dispose(e,this.getClass());
			}
			ste = null;
		}
		if (pre != null) {
			try {
				pre.close();
			} catch (Exception e) {
				ExceptionManage.dispose(e,this.getClass());
			}
			pre = null;
		}
	}
	return lineClockInterfaceBeanList;
	}
	/**
	 * 
	 * @param timeLineClockInterfaceInfo 实体
	 * @param conn 数据库连接
	 * @return 1成功，0不成功
	 * @throws Exception
	 * function:根新数据
	 */
public int update(LineClockInterface lineClockInterface,Connection conn)throws Exception{
	if(lineClockInterface==null){
		throw new Exception("lineClockInterface is null");
	}
	if(conn==null){
		throw new Exception("conn is null");
	}
	StringBuffer sql=null;;
	PreparedStatement pre=null;
	int result=0;
	try {
		sql=new StringBuffer();

		sql.append("update timeClockInterfac set port=?, rate=?,ssmSendingEnabled=?,dnuGroup=?,portName=? where id=?");
	    
	    pre=conn.prepareStatement(sql.toString());
	    pre.setInt(1, lineClockInterface.getPort());
	    pre.setString(2, lineClockInterface.getRate());
	    pre.setInt(3, lineClockInterface.getSsmSendingEnabled());
	    pre.setString(4, lineClockInterface.getDnuGroup());
	    pre.setString(5, lineClockInterface.getPortName());
	    pre.setInt(6, lineClockInterface.getId());
	    
	    result=pre.executeUpdate();
	    
	} catch (Exception e) {
		throw e;
	}finally{
		sql=null;
		if (pre != null) {
			try {
				pre.close();
			} catch (Exception e) {
				ExceptionManage.dispose(e,this.getClass());
			}
			pre = null;
		}
	}
	return result;
}

	/**
	 * 条件查询
	 * @param conn
	 * @param condition
	 * @return
	 * @throws Exception
	 */
	public List<LineClockInterface> select(Connection conn, LineClockInterface condition)
			throws Exception {
		if (conn == null) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement pre = null;
		ResultSet ste = null;
		List<LineClockInterface> lineClockInterfaceBeanList = null;
		LineClockInterface lineClockInterface = null;
		try {
			lineClockInterfaceBeanList = new ArrayList<LineClockInterface>();
			sql = "select * from timeClockInterfac where 1=1 ";
			if(0!=condition.getId()){
				sql += " and id = " +condition.getId();
			}
			/**
			 * 同步时 
			 * 添加 查库 条件
			 */
			if(0!=condition.getSiteId()){
				sql +=" and siteId = "+condition.getSiteId();
			}
			if(null!=condition.getPortName()){
				sql +=" and portName = '" +condition.getPortName()+"'";
			}
			pre = conn.prepareStatement(sql);
			ste = pre.executeQuery();

			while (ste.next()) {
				lineClockInterface = new LineClockInterface();
				lineClockInterface.setId(ste.getInt("id"));
				lineClockInterface.setSiteId(ste.getInt("siteId"));
				lineClockInterface.setPort(ste.getInt("port"));
				lineClockInterface.setRate(ste.getString("rate"));
				lineClockInterface.setPortName(ste.getString("portName"));
				lineClockInterface.setSsmSendingEnabled(ste
						.getInt("ssmSendingEnabled"));
				lineClockInterface.setDnuGroup(ste.getString("dnuGroup"));
				lineClockInterfaceBeanList.add(lineClockInterface);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
			if (ste != null) {
				try {
					ste.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				ste = null;
			}
			if (pre != null) {
				try {
					pre.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				pre = null;
			}
		}
		return lineClockInterfaceBeanList;
	}
}
