<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.nms.db.dao.system.loginlog.LoginLogMapper" >
   <sql id="Base_Column_List" >
    id, user_id, loginTime, outTime, IP, state, loginState, logoutState
  </sql>
  
   <insert id="insertLoginLog" parameterType="LoginLog" useGeneratedKeys="true" keyProperty="id">
    insert into login_log (user_id, loginTime,outTime, IP, state,loginState, logoutState)
    values (#{user_id,jdbcType=INTEGER}, #{loginTime,jdbcType=VARCHAR}, #{outTime,jdbcType=VARCHAR}, #{IP,jdbcType=VARCHAR}, 
    #{state,jdbcType=INTEGER}, #{loginState,jdbcType=INTEGER}, #{logoutState,jdbcType=INTEGER})
  </insert>
 
 <update id="updateExitLoginLog" parameterType="LoginLog" >
    update login_log
    <set >    
        outTime = #{outTime,jdbcType=VARCHAR},
        logoutState = #{logoutState,jdbcType=INTEGER}
    </set>
    <where>
      <if test="id >0">id = #{id}</if>
      <if test="user_id >0">and user_id = #{user_id}</if>
      <if test="loginTime !=null and loginTime !='' ">and loginTime = #{loginTime}</if>
    </where>
 
  </update>
  
   <select id="findState" resultType="LoginLog" parameterType="map" >
    select id,user_id,loginTime,outTime,state,loginState,logoutState from login_log  where 1=1
     <if test="loginLog.user_id>0" >
       <choose>
        <when test="maxId==4">
           and user_id= 1 order by loginTime DESC LIMIT 0,#{maxId}
        </when>
        <when test="maxId==1">
           and user_id= 1 order by loginTime DESC LIMIT 0,#{maxId}
        </when>
          <when test="maxId !=1 and maxId!=4">
           and user_id= 1
        </when>
      </choose>   
     </if>
  </select>
  
    <select id="queryByCondition" resultType="LoginLog" parameterType="LoginLog" >
    select u.user_name,l.user_id,loginTime,outTime,IP,loginState,logoutState from login_log l,
    user_inst u where state=1
    <if test="loginLog.user_id >0 "> and u.user_id=#{loginLog.user_id } and l.user_id=u.user_id</if>
    <if test="loginLog.user_name!=null and loginLog.user_name!='' ">
       <if test="loginLog.isSelect ==true "> and l.user_id=u.user_id and u.user_name like #{loginLog.user_name}</if>
       <if test="loginLog.isSelect ==false "> and l.user_id=u.user_id and u.user_name =  #{loginLog.user_name}</if>
    </if>
    <if test="loginLog.user_id <=0 and loginLog.user_name ==null or loginLog.user_name =='' ">
     and l.user_id=u.user_id
    </if>
    <if test="loginLog.loginIp!=null and loginLog.loginIp=='' ">
       <if test="loginLog.isSelect ==true "> and l.IP like #{loginLog.loginIp}</if>
       <if test="loginLog.isSelect ==false "> and l.IP={loginLog.loginIp}</if>
    </if>
	<if test="lgoinLog.loginBeginTime!='' and lgoinLog.loginBeginTime!=null and loginLog.loginEndTime!='' and loginLog.loginEndTime!=null "> 
	    and l.loginTime between #{lgoinLog.loginBeginTime} and #{loginLog.loginEndTime}
	</if>												
	<if test="lgoinLog.loginBeginTime=='' and lgoinLog.loginBeginTime==null">
	   <if test="loginLog.loginEndTime!='' and loginLog.loginEndTime!=null">
	       and l.loginTime < #{loginLog.loginEndTime}
	   </if>
	</if>
<!-- 		
			// 判断 ：登录开始时间的  2个时间点 不  都选中时
			if(("".equals(loginlog.getLoginBeginTime())||loginlog.getLoginBeginTime()==null)||("".equals(loginlog.getLoginEndTime())||loginlog.getLoginEndTime()==null)){
				//    第2个时间点不为空，-且有 选中时
				if(!("".equals(loginlog.getLoginEndTime())||loginlog.getLoginEndTime()==null)){
					sql +=" and l.loginTime < '"+loginlog.getLoginEndTime()+"'";				
				}else if(!("".equals(loginlog.getLoginBeginTime())||loginlog.getLoginBeginTime()==null)){
//				    第1个时间点不为空，-且有 选中时
					sql +=" and l.loginTime > '"+loginlog.getLoginBeginTime()+" '";				
				}
			}
			
			//判断 ：离开时间的  2个时间点都选中时
			if((!("".equals(loginlog.getLeaveBeginTime())||loginlog.getLeaveBeginTime()==null))&&(!"".equals(loginlog.getLeaveEndTime())||loginlog.getLeaveEndTime()!=null)){					
				sql +=" and l.outTime between '"+loginlog.getLeaveBeginTime()+"' and '"+ loginlog.getLeaveEndTime()+" ' ";				
			}
			// 判断 ：离开时间的  2个时间点 不  都选中时
			if(("".equals(loginlog.getLeaveBeginTime())||loginlog.getLeaveBeginTime()==null)||("".equals(loginlog.getLeaveEndTime())||loginlog.getLeaveEndTime()==null)){
				//    第2个时间点不为空，-且有 选中时
				if(!("".equals(loginlog.getLeaveEndTime())||loginlog.getLeaveEndTime()==null)){
					sql +=" and l.outTime < '"+loginlog.getLeaveEndTime()+"'";				
				}else if(!("".equals(loginlog.getLeaveBeginTime())||loginlog.getLeaveBeginTime()==null)){
					sql +=" and l.outTime > '"+loginlog.getLeaveBeginTime()+" '";				
				}
			}
			//查看登陆成功/失败
			if(loginlog.getLoginState() > 0){
				sql += " and l.loginState = " + loginlog.getLoginState();
			}
			//查看退出成功/失败
			if(loginlog.getLogoutState() > 0){
				sql += " and l.logoutState = " + loginlog.getLogoutState();
			}
			
			sql +=" order by loginTime desc";  
     </if>
      -->	
  </select>
 
</mapper>