package com.nms.db.dao.system.roleManage;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.system.roleManage.RoleInfo;
import com.nms.ui.manager.ExceptionManage;

/**
 * 操作    角色信息表（roleInfo）
 * @author Administrator
 *
 */
public class RoleInfoDao { 
	//  查询 语句
	private final String SQL_INSERT="select id,roleName,remark,roleEnName from roleinfo where 1=1";
	/**
	 * 根据条件  
	 * 查找   数据库
	 * @param roleInfo
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<RoleInfo> select(RoleInfo roleInfo,Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		ResultSet resultSet=null;
		List<RoleInfo> roleInfoList=null;
		RoleInfo info=null;
		String sql=this.SQL_INSERT;
		try {
			if(null != roleInfo){
				//通过  ID   查询
				if(roleInfo.getId()>0 && roleInfo.getId() != 1){
					sql += " and id= " +roleInfo.getId();
				}
		
			 //通过    角色 名称 查询
			 if(!("".equals(roleInfo.getRoleName())||null==roleInfo.getRoleName())){
				sql += " and roleName = '" +roleInfo.getRoleName()+" '" ;
			 }
			 if(!("".equals(roleInfo.getRoleEnName())||null==roleInfo.getRoleEnName())){
					sql += " and roleEnName = '" +roleInfo.getRoleEnName()+" '" ;
				 }
			}	
			preparedStatement = connection.prepareStatement(sql);
			resultSet= preparedStatement.executeQuery();
			roleInfoList=new ArrayList<RoleInfo>();
			while(resultSet.next()){
				info=new RoleInfo();
				info.setId(resultSet.getInt("id"));
				info.setRoleName(resultSet.getString("roleName"));
				info.setRemark(resultSet.getString("remark"));
				info.setRoleEnName(resultSet.getString("roleEnName"));
				roleInfoList.add(info);
			}
		
		} catch (Exception e) {
			throw e;
		}finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			info=null;
		}
		return roleInfoList;
	}
	/**
	 * 更新
	 * @param roleInfo
	 * @param connection
	 * @return 
	 * @throws Exception
	 */
	public int update(RoleInfo roleInfo,Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql="update roleinfo set roleName=? ,remark=?,roleEnName=? where 1=1";
		int result=0;
		PreparedStatement preparedStatement = null;
		try {
			if(roleInfo.getId()>0){
				sql += " and id= " +roleInfo.getId();
			}
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, roleInfo.getRoleName());
			preparedStatement.setString(2,roleInfo.getRemark());
			preparedStatement.setString(3,roleInfo.getRoleEnName());
			result= preparedStatement.executeUpdate();
		
		} catch (Exception e) {
			throw e;
		}finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
	}
	/**
	 * 删除
	 * @param roleInfo
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int delete(RoleInfo roleInfo,Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		if(null==roleInfo){
			throw new Exception("roleInfo is null");
		}
		PreparedStatement preparedStatement = null;
		int result=0;
		String sql="delete from roleinfo   where id=?";
		try {
			preparedStatement = connection.prepareStatement(sql);
			
			preparedStatement.setInt(1, roleInfo.getId());
			result= preparedStatement.executeUpdate();
		
		} catch (Exception e) {
			throw e;
		}finally {
			
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
		
	}
	/**
	 * 新增
	 * @param roleInfo
	 * @param connection
	 * @return   返回 添加记录的 主键ID
	 * @throws Exception
	 */
	public int insert(RoleInfo roleInfo,Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		if(null==roleInfo){
			throw new Exception("roleInfo is null");
		}
		int result=0;
		PreparedStatement preparedStatement = null;
		 ResultSet resultSet=null;
		String sql="insert into roleinfo (roleName,remark,roleEnName) values (?,?,?)";
		try {
			preparedStatement = connection.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setString(1,roleInfo.getRoleName());
			preparedStatement.setString(2, roleInfo.getRemark());
			preparedStatement.setString(3, roleInfo.getRoleName());
			 preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				result = resultSet.getInt(1);
			}
		
		} catch (Exception e) {
			throw e;
		}finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
	}
	/**
	 * 更新 时  ，不可重名
	 * 根据条件  
	 * 查找   数据库
	 * @param roleInfo
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<RoleInfo> selectNoName(RoleInfo roleInfo,Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		 ResultSet resultSet=null;
		String sql=this.SQL_INSERT;
		List<RoleInfo> roleInfoList=null;
		RoleInfo info=null;
		try {
			if(null!=roleInfo){
				//通过  ID   查询
				if(roleInfo.getId()>0){
					sql += " and id != " +roleInfo.getId();
				}
			}	
			preparedStatement = connection.prepareStatement(sql);
			resultSet= preparedStatement.executeQuery();
			roleInfoList=new ArrayList<RoleInfo>();
			while(resultSet.next()){
				info=new RoleInfo();
				info.setId(resultSet.getInt("id"));
				info.setRoleName(resultSet.getString("roleName"));
				info.setRemark(resultSet.getString("remark"));
				info.setRoleEnName(resultSet.getString("roleEnName"));
				roleInfoList.add(info);
			}
		
		} catch (Exception e) {
			throw e;
		}finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			info=null;
		}
		return roleInfoList;
	}

}
