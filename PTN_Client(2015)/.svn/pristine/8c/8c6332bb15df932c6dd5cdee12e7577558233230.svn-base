package com.nms.model.ptn.clock;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.clock.ExternalClockInterface;
import com.nms.db.dao.ptn.clock.ExternalClockInterfaceDao;
import com.nms.model.util.ObjectService;
import com.nms.ui.manager.ExceptionManage;

public class ExternalClockInterfaceService extends ObjectService{
	
	public void setConnection(Connection connection) {
		super.connection = connection;
	}

	public void setPtnuser(String prnuser) {
		super.ptnuser = prnuser;
	}

	private ExternalClockInterfaceDao externalClockInterfaceDao = new ExternalClockInterfaceDao();

	/**
	 *添加数据
	 *
	 * @param externalClockInterface 实体
	 * @return 只要不是0就是插入成功
	 * @throws Exception 
	 */
	public int insertTimeManageInfo(ExternalClockInterface externalClockInterface) throws Exception {
		if (null == externalClockInterface) {
			throw new Exception("externalClockInterface is null");
		}
		int information = 0;
		try {
			connection.setAutoCommit(false);
			information = externalClockInterfaceDao.insert(externalClockInterface, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
		return information;
	}

	/**
	 * function:删除相关联数据
	 * 
	 * @param lineClockInterface
	 *            实体
	 * @return
	 * @throws Exception
	 */
	public int delete(ExternalClockInterface externalClockInterface)throws Exception {
		int information = 0;
		try {
			if(externalClockInterface==null){
				throw new Exception("externalClockInterface is null");
			}
				information = externalClockInterfaceDao.delete(externalClockInterface, connection);
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
		}
		return information;
	}
	/**
	 * 查询相关信息
	 * 
	 * @return lineClockInterface
	 * @throws Exception
	 */

	public List<ExternalClockInterface> select(ExternalClockInterface externalClockInterface) throws Exception {
		List<ExternalClockInterface> lists=null;
		try {
			lists=new ArrayList<ExternalClockInterface>();
			lists = externalClockInterfaceDao.select(connection,externalClockInterface);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return lists;
	}

	/**
	 * 删除相关的数据
	 * 
	 * @param externalClockInterface
	 *            实体
	 * @return int 1:成功，0不成功
	 * @throws Exception
	 */
	public int update(ExternalClockInterface externalClockInterface)throws Exception {
		if (null == externalClockInterface) {
			throw new Exception("externalClockInterface is null");
		}
		int isOK = 0;
		try {
			connection.setAutoCommit(false);
			isOK = externalClockInterfaceDao.update(externalClockInterface,connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
		return isOK;
	}

	public void updateActiveStatus(int siteId, int value) throws Exception {
		if (0 == siteId) {
			throw new Exception("siteId is null");
		}
		try {
			connection.setAutoCommit(false);
			externalClockInterfaceDao.updateActiveStatus(siteId,value,connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
		
	}
}
