package com.nms.ui.ptn.performance.controller;

import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.perform.CurrentPerforInfo;
import com.nms.db.enums.EObjectType;
import com.nms.db.enums.EOperationLogType;
import com.nms.rmi.ui.util.RmiKeys;
import com.nms.ui.frame.AbstractController;
import com.nms.ui.manager.AddOperateLog;
import com.nms.ui.manager.DialogBoxUtil;
import com.nms.ui.manager.DispatchUtil;
import com.nms.ui.manager.ExceptionManage;
import com.nms.ui.manager.MyActionListener;
import com.nms.ui.manager.ResourceUtil;
import com.nms.ui.manager.UiUtil;
import com.nms.ui.manager.keys.StringKeysTip;
import com.nms.ui.ptn.alarm.service.CSVUtil;
import com.nms.ui.ptn.performance.model.CurrentPerformanceFilter;
import com.nms.ui.ptn.performance.util.PerformanceOfflineUitl;
import com.nms.ui.ptn.performance.view.CurrentPerforFilterDialog;
import com.nms.ui.ptn.performance.view.CurrentPerformancePanel;

/**
 * 当前性能控制?
 * 
 * @author lp
 * 
 */
public class CurrentPerformanceController extends AbstractController {

	private CurrentPerformancePanel view;
	private CurrentPerformanceFilter filter;
	private List<CurrentPerforInfo> cureenPerformanceFilterList = null;

	public CurrentPerformanceController(CurrentPerformancePanel view) {
		this.view = view;
	}

	// 清空过滤条件
	@Override
	public void clearFilter() {
		filter = null;
		this.view.clear();
	}

	// 打开设置过滤对话?
	@Override
	public void openFilterDialog() {
		final CurrentPerforFilterDialog filterDialog = new CurrentPerforFilterDialog();
		filterDialog.getConfirm().addActionListener(new MyActionListener() {

			@Override
			public void actionPerformed(ActionEvent evt) {
				try {
					if (filterDialog.validateParams()) {
						CurrentPerformanceController.this.setFilter(filterDialog);
					}
				} catch (Exception e) {
					ExceptionManage.dispose(e, CurrentPerformanceController.class);
				}
			}
			@Override
			public boolean checking() {
				return true;
			}
		});
		UiUtil.showWindow(filterDialog, 530, 560);
	}

	private void setFilter(CurrentPerforFilterDialog dialog) {
		PerformanceOfflineUitl performanceOfflineUitl = new PerformanceOfflineUitl();
		try {
			filter = dialog.get();
			cureenPerformanceFilterList = new ArrayList<CurrentPerforInfo>();
			if (filter != null) {
				 queryPerforByFilter();
			} else {
				DialogBoxUtil.errorDialog(this.view, ResourceUtil.srcStr(StringKeysTip.TIP_CHOOSE_FILTER));
				return;
			}
			// 添加日志记录
			AddOperateLog.insertOperLog(dialog.getConfirm(), EOperationLogType.CURRENTPERFORMANCESELECT.getValue(),null);

			this.view.clear();
			this.view.initData(cureenPerformanceFilterList);
			this.view.updateUI();
			DialogBoxUtil.succeedDialog(dialog, performanceOfflineUitl.getPerformanceResult(filter));
			dialog.dispose();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
			dialog.dispose();
		} finally{
			performanceOfflineUitl = null;
		}
	}

	// 从后台查询性能?
	@Override
	public void refresh() {
		PerformanceOfflineUitl performanceOfflineUitl = new PerformanceOfflineUitl();
		try {
			if (cureenPerformanceFilterList != null && cureenPerformanceFilterList.size() > 0) {
				cureenPerformanceFilterList.clear();
			}
			if (filter == null) {
				DialogBoxUtil.errorDialog(this.view, ResourceUtil.srcStr(StringKeysTip.TIP_CHOOSE_FILTER));
				return;
			} else {
			    queryPerforByFilter();
			}
			this.view.clear();
//			this.view.initData(removeRepeatedType(cureenPerformanceFilterList));
			this.view.initData(cureenPerformanceFilterList);
			DialogBoxUtil.succeedDialog(null, performanceOfflineUitl.getPerformanceResult(filter));
			this.view.updateUI();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}finally{
			performanceOfflineUitl = null;
		}
	}

	/**
	 * function:通过一些过滤条件来获取相应的数据
	 * @param infos
	 */
	private boolean setFilterCurrentPerformance(CurrentPerforInfo currentPerformanceInfo) {
		boolean flag = false;
		try {
			String[] filrertypes = filter.getTypeStr().trim().split(",");
			if (currentPerformanceInfo.getCapability() != null) {
				for (int i = 0; i < filrertypes.length; i++) {
					try {
						if (filrertypes[i].equals(currentPerformanceInfo.getCapability().getCapabilitytype())) {
							for (String strType : filter.getCapabilityNameList()) {
								if (filter.getFilterZero() > 0) {
									if (currentPerformanceInfo.getCapability().getCapabilitydesc().equalsIgnoreCase(strType)
											&& currentPerformanceInfo.getPerformanceValue() != 0
											&& currentPerformanceInfo.getObjectName() != null) {
										return true;
									}
								} else {
									if (currentPerformanceInfo.getCapability().getCapabilitydesc().equalsIgnoreCase(strType)
											&& currentPerformanceInfo.getObjectName() != null
									) {
										return true;
									}
								}
							}
						}
					} catch (Exception e) {
						ExceptionManage.dispose(e, getClass());
					}
				}
			}else{
				ExceptionManage.infor("Capability()== null", getClass());
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e, getClass());
		}
		return flag;
	}

	// 界面零值过滤
	@Override
	public void filterZero() {
		List<CurrentPerforInfo> cureenPerformanceInfos = null;
		try {
			cureenPerformanceInfos = new ArrayList<CurrentPerforInfo>();
			if (filter == null) {
				DialogBoxUtil.errorDialog(this.view, ResourceUtil.srcStr(StringKeysTip.TIP_CHOOSE_FILTER));
				return;
			} else {
				for (CurrentPerforInfo hisPerformanceInfo : cureenPerformanceFilterList) {
					// 将数据为零的数据去掉
					if (hisPerformanceInfo.getPerformanceValue() != 0) {
						cureenPerformanceInfos.add(hisPerformanceInfo);
					}
				}
				cureenPerformanceFilterList.clear();
				cureenPerformanceFilterList.addAll(cureenPerformanceInfos);
			}
			this.view.clear();
			this.view.initData(cureenPerformanceFilterList);
			this.view.updateUI();

		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			cureenPerformanceInfos = null;
		}
	};

	// 导出
	@Override
	public void export() throws Exception {
		CSVUtil csvUtil = null;
		String path = null;
		String[] s = {};
		UiUtil uiUtil = new UiUtil();
		int reult = 0;
		try {
			if (filter == null) {
				DialogBoxUtil.errorDialog(this.view, ResourceUtil.srcStr(StringKeysTip.TIP_CHOOSE_FILTER));
				return;
			} else {
				csvUtil = new CSVUtil();
				if(ResourceUtil.language.equals("zh_CN")){
					path = csvUtil.showChooserWindow("save", "选择文件", s);
				}else{
					path = csvUtil.showChooserWindow("save", "Select File", s);
				}
				if(path != null && !"".equals(path)){
					String csvFilePath = path + ".csv";
					if(uiUtil.isExistAlikeFileName(csvFilePath)){
						reult = DialogBoxUtil.confirmDialog(null, ResourceUtil.srcStr(StringKeysTip.TIP_CHOOSE_FILEPATHHASEXIT));
						if(reult == 1){
							return ;
						}
					}
					csvUtil.WriteCsvCureenPerformace(csvFilePath, cureenPerformanceFilterList);
				}
			}

		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			uiUtil = null;
			csvUtil = null;
			path = null;
		}
	};

	private void queryPerforByFilter() throws Exception {
		DispatchUtil dispatch = null;
		// key为网元数据库id，value为槽位的集合
		List<CurrentPerforInfo> queryPerforList = null;
		try {
			dispatch = new DispatchUtil(RmiKeys.RMI_PERFORMANCE);
			queryPerforList = dispatch.executeQueryCurrPerforByFilter(filter);
			if (filter.getObjectType() != null && filter.getObjectType() == EObjectType.SLOTINST) {
				// 设备只支持网元的性能查询，所以查询后的性能数据根据槽位过滤
				if (queryPerforList != null && queryPerforList.size() > 0) {
					for (int i = 0; i < filter.getSlotInsts().size(); i++) {
						int slotInstId = filter.getSlotInsts().get(i);
						for (CurrentPerforInfo info : queryPerforList) {
							if (info.getMasterCardAddress() == slotInstId) {
								if(setFilterCurrentPerformance(info)){
									cureenPerformanceFilterList.add(info);
								}
							}
						}
					}
				}

			} else {
				if (queryPerforList != null && queryPerforList.size() > 0) {
					for (CurrentPerforInfo info : queryPerforList) {
						if(setFilterCurrentPerformance(info)){
							cureenPerformanceFilterList.add(info);
						}
					}
				}
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
			throw e;
		} finally {
			dispatch = null;
			queryPerforList = null;
		}
	}

	public CurrentPerformancePanel getView() {
		return view;
	}
}
