package com.nms.db.dao.system;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.system.NetWork;
import com.nms.db.bean.system.user.UserInst;
import com.nms.ui.manager.ExceptionManage;

public class NetDao {
	
	
	public int insert(NetWork netWork,Connection connection) throws Exception{
		if (null == netWork) {
			throw new Exception("netWork is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet=null;
		int result = 0;

		try {
			sql = "insert into `netWork`(netX,netY,isDeleteTopo,netWorkName) values(?,?,?,?)";
			preparedStatement = connection.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, netWork.getNetX());
			preparedStatement.setInt(2, netWork.getNetY());
			preparedStatement.setInt(3, netWork.getIsDeleteTopo());
			preparedStatement.setString(4, netWork.getNetWorkName());
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				result = resultSet.getInt(1);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}

			sql = null;
		}

		return result;
	}
	
	/**
	 * 更新
	 * @param netWork
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int update(NetWork netWork,Connection connection) throws Exception{
		if (null == netWork) {
			throw new Exception("netWork is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		try {
			sql = "update `netWork` set netX=?,netY=?,isDeleteTopo=? ,netWorkName=?  where netWorkId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, netWork.getNetX());
			preparedStatement.setInt(2, netWork.getNetY());
			preparedStatement.setInt(3, netWork.getIsDeleteTopo());
			preparedStatement.setString(4, netWork.getNetWorkName());
			preparedStatement.setInt(5, netWork.getNetWorkId());
			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}
	/**
	 * 查询所有
	 * @param connection
	 * @return
	 * @throws Exception 
	 */
	public List<NetWork> select(Connection connection) throws Exception{
		if (null == connection) {
			throw new Exception("connection is null");
		}
		List<NetWork> netWorks = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet=null;
		String sql = "select*from netWork";
		try {
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			netWorks = new ArrayList<NetWork>();
			NetWork netWork = null;
			while(resultSet.next()){
				netWork = new NetWork();
				netWork.setNetWorkId(resultSet.getInt("netWorkId"));
				netWork.setNetX(resultSet.getInt("netX"));
				netWork.setNetY(resultSet.getInt("netY"));
				netWork.setIsDeleteTopo(resultSet.getInt("isDeleteTopo"));
				netWork.setNetWorkName(resultSet.getString("netWorkName"));
				netWorks.add(netWork);
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}

			sql = null;
		}
		
		return netWorks;
	}
	
	/**
	 * 查询所有
	 * @param connection
	 * @return
	 * @throws Exception 
	 */
	public List<NetWork> select(NetWork net,Connection connection) throws Exception{
		if (null == connection) {
			throw new Exception("connection is null");
		}
		List<NetWork> netWorks = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet=null;
		String sql = "select*from netWork where netWorkId="+net.getNetWorkId()+"";
		try {
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			netWorks = new ArrayList<NetWork>();
			NetWork netWork = null;
			while(resultSet.next()){
				netWork = new NetWork();
				netWork.setNetWorkId(resultSet.getInt("netWorkId"));
				netWork.setNetX(resultSet.getInt("netX"));
				netWork.setNetY(resultSet.getInt("netY"));
				netWork.setIsDeleteTopo(resultSet.getInt("isDeleteTopo"));
				netWork.setNetWorkName(resultSet.getString("netWorkName"));
				netWorks.add(netWork);
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}

			sql = null;
		}
		
		return netWorks;
	}
	
	/**
	 * 更新
	 * @param netWork
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int delete(NetWork netWork,Connection connection) throws Exception{
		if (null == netWork) {
			throw new Exception("netWork is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		try {
			sql = "delete from netWork where netWorkId="+netWork.getNetWorkId()+"";
			preparedStatement = connection.prepareStatement(sql);
			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}
	
	/**
	 * 批量更新
	 * @param netWorks
	 * @param connection
	 * @return
	 */
	public void updateBatch(List<NetWork> netWorks,Connection connection){
		PreparedStatement preparedStatement = null;
		String sql = "";
		try {
			sql = "update `netWork` set netX=?,netY=?,isDeleteTopo=? ,netWorkName=?  where netWorkId=?";
			connection.setAutoCommit(false);
			preparedStatement = connection.prepareStatement(sql);
			for(NetWork netWork: netWorks){
				preparedStatement.setInt(1, netWork.getNetX());
				preparedStatement.setInt(2, netWork.getNetY());
				preparedStatement.setInt(3, netWork.getIsDeleteTopo());
				preparedStatement.setString(4, netWork.getNetWorkName());
				preparedStatement.setInt(5, netWork.getNetWorkId());
				preparedStatement.addBatch();
			}
			preparedStatement.executeBatch();
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			try {
				connection.rollback();
			} catch (SQLException e1) {
				ExceptionManage.dispose(e1, this.getClass());
			}
			ExceptionManage.dispose(e, this.getClass());
		}finally{
			try {
				connection.setAutoCommit(true);
			} catch (SQLException e) {
				ExceptionManage.dispose(e,this.getClass());
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
	}

	/**
	 * 通过用户 ID 关联表 用户— 域 取得 用户 的 域的集合
	 * @param userinst
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<NetWork> queryByUserIdField(UserInst userinst,Connection connection) throws Exception {

		if (null == userinst) {
			throw new Exception("userinst is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<NetWork> netWorks = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		NetWork netWork = null;
//        String fileid = null;
		try {
//			fileid = userinst.toString();
//			fileid.substring(1, fileid.length()-1);
			netWorks = new ArrayList<NetWork>();
			
			String sql="select * from netWork";
			if(userinst.getIsAll()==0){
				sql+=" where netWorkId in (select field_id from user_field where user_id=? )";
				preparedStatement = connection.prepareStatement(sql);
				preparedStatement.setInt(1, userinst.getUser_Id());
			}else{
				preparedStatement = connection.prepareStatement(sql);
			}
			
			resultSet = preparedStatement.executeQuery();			
			while (resultSet.next()) {
				netWork = new NetWork();
				netWork.setNetWorkId(resultSet.getInt("netWorkId"));
				netWork.setNetX(resultSet.getInt("netX"));
				netWork.setNetY(resultSet.getInt("netY"));
				netWork.setIsDeleteTopo(resultSet.getInt("isDeleteTopo"));
				netWork.setNetWorkName(resultSet.getString("netWorkName"));
				netWorks.add(netWork);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}

		}
       return netWorks;
	}
}
