package com.nms.model.alarm;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.nms.db.bean.alarm.HisAlarmInfo;
import com.nms.db.bean.alarm.WarningLevel;
import com.nms.db.bean.equipment.shelf.SiteInst;
import com.nms.db.dao.alarm.HisAlarmDao;
import com.nms.db.enums.EManufacturer;
import com.nms.model.equipment.shlef.SiteService;
import com.nms.model.util.ObjectService;
import com.nms.model.util.Services;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.ExceptionManage;
import com.nms.ui.manager.ResourceUtil;
import com.nms.ui.ptn.alarm.AlarmTools;
import com.nms.ui.ptn.alarm.model.CurrentAlarmFilter;

public class HisAlarmService extends ObjectService {
	private HisAlarmDao hisDao = new HisAlarmDao();

	public void setConnection(Connection connection) {
		super.connection = connection;
	}

	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}

	/**
	 * 插入或者修改历史告警数据
	 * 
	 * @param hisInfo
	 *            历史性能数据实体
	 * @return
	 * @throws Exception
	 */
	public int saveOrUpdate(HisAlarmInfo hisInfo) throws Exception {
		if (hisInfo == null) {
			throw new Exception("taskInfo is null");
		}
		int resultcesId = 0;
		SiteInst siteInst = null;
		WarningLevel warningLevel = null;
		List<WarningLevel> warnList = null;
		SiteService siteService = null;
		WarningLevelService warningLevelService = null;
		try {
			warningLevelService = (WarningLevelService) ConstantUtil.serviceFactory.newService(Services.WarningLevel, this.connection);
			siteService = (SiteService) ConstantUtil.serviceFactory.newService(Services.SITE, this.connection);
			siteInst = new SiteInst();
			siteInst = siteService.select(hisInfo.getSiteId());
			warningLevel = new WarningLevel();
			warningLevel.setWarningcode(hisInfo.getAlarmCode());
			warningLevel.setWarninglevel(hisInfo.getAlarmLevel());
			if (siteInst.getManufacturer()==0) {
				warningLevel.setManufacturer(1); // 1表示武汉
			} else {
				warningLevel.setManufacturer(2); // 2表示晨晓
			}
		
			warnList = warningLevelService.select(warningLevel);
			if(warnList != null && warnList.size() > 0){
				hisInfo.setWarningLevel_temp(warnList.get(0).getWarninglevel_temp());
			}
			
			if (hisInfo.getId() != 0) {
				resultcesId = this.hisDao.update(hisInfo, connection);
			} else {
				resultcesId = this.hisDao.insert(hisInfo, connection);
			}
		} catch (Exception e) {
			throw e;
		} finally {
//			UiUtil.closeService(warningLevelService);
//			UiUtil.closeService(siteService);
		}
		return resultcesId;
	}

	/**
	 * 根据历史告警数据主键id，删除历史性能数据
	 * 
	 * @param hisId
	 *            主键id
	 * @return
	 * @throws Exception
	 */
	public int delete(int hisId) throws Exception {
		if (hisId == 0) {
			throw new Exception("hisId is null");
		}
		int resultcesId = 0;
		try {
			resultcesId = this.hisDao.delete(hisId, connection);
		} catch (Exception e) {
			throw e;
		}
		return resultcesId;
	}

	/**
	 * 获取所有历史告警数据
	 * 
	 * @return
	 * @throws Exception
	 */
	public List<HisAlarmInfo> select() throws Exception {
		List<HisAlarmInfo> hisInfoList = null;
		try {
			HisAlarmInfo condition = new HisAlarmInfo();
			hisInfoList = hisDao.queryByCondition(condition, connection);
			wrapHisAlarmInfo(hisInfoList);
		} catch (Exception e) {
			throw e;
		}
		return hisInfoList;
	}

	/**
	 * 根据查询条件，获取所有历史告警数据
	 * 
	 * @return
	 * @throws Exception
	 */
	public List<HisAlarmInfo> select(HisAlarmInfo condition) throws Exception {
		List<HisAlarmInfo> hisInfoList = null;
		try {
			hisInfoList = hisDao.queryByCondition(condition, connection);
			wrapHisAlarmInfo(hisInfoList);
		} catch (Exception e) {
			throw e;
		}
		return hisInfoList;
	}

	/**
	 * 根据告警主键集合，批量删除
	 * 
	 * @param idList
	 * @return
	 * @throws Exception
	 */
	public int delete(List<Integer> idList) throws Exception {
		int result = 0;
		try {
			if (idList == null || idList.size() == 0) {
				return 0;
			}
			result = hisDao.delete(idList, connection);
		} catch (Exception e) {
			throw e;
		}
		return result;
	}

	/**
	 * 根据网元id集合，查询历史告警
	 * 
	 * @return
	 */
	public List<HisAlarmInfo> queryHisBySites(List<Integer> siteIds) throws Exception {
		List<HisAlarmInfo> hisInfoList = new ArrayList<HisAlarmInfo>();
		try {
			hisInfoList = hisDao.queryHisBySites(siteIds, connection);
			wrapHisAlarmInfo(hisInfoList);
		} catch (Exception e) {
			throw e;
		}
		return hisInfoList;
	}

	/**
	 * 封装历史告警对象
	 */
	private void wrapHisAlarmInfo(List<HisAlarmInfo> hisInfoList) throws Exception {
		List<WarningLevel> warnList = null;
		AlarmTools alarmTools=new AlarmTools();
		WarningLevelService warningLevelService = null;
		SiteService siteService = null;
		try {
			warningLevelService = (WarningLevelService) ConstantUtil.serviceFactory.newService(Services.WarningLevel, this.connection);
			siteService = (SiteService) ConstantUtil.serviceFactory.newService(Services.SITE, this.connection);
			Map<Integer, String> siteIdAndNameMap = this.getsiteIdAndNameMap(siteService);
			for (HisAlarmInfo hisInfo : hisInfoList) {
				// 封装网元信息
				String siteNameAndManuf = siteIdAndNameMap.get(hisInfo.getSiteId());
				int manufacturer = Integer.parseInt(siteNameAndManuf.split("/", 2)[0]);
				String siteName = siteNameAndManuf.split("/", 2)[1];
				if(siteName != null && !"".equals(siteName)){
					hisInfo.setSiteName(siteName);
				}else{
					hisInfo.setSiteName("EMS服务器");
				}
				// 封装告警数据
				WarningLevel warningLevel = hisInfo.getWarningLevel();
				if(manufacturer == EManufacturer.WUHAN.getValue()){
					warningLevel.setManufacturer(1);  //1表示武汉
				}else {
					warningLevel.setManufacturer(2);  //2表示晨晓
				}
				warnList = warningLevelService.select(warningLevel);
				if (warnList != null && warnList.size() > 0) {
					warningLevel = warnList.get(0);
					hisInfo.setWarningLevel(warningLevel);
//					if(UiUtil.getManufacturer(siteInst.getSite_Inst_Id()) == EManufacturer.valueOf("WUHAN").getValue()){
//						hisInfo.setAlarmSeverity(AlarmTools.getWHAlarmSeverity(hisInfo.getWarningLevel().getWarninglevel()));  //1表示武汉
//					}else {
						hisInfo.setAlarmSeverity(alarmTools.getAlarmSeverity(hisInfo.getWarningLevel().getWarninglevel_temp()));  //2表示晨晓
//					}
					if("zh_CN".equals(ResourceUtil.language)){
						hisInfo.setAlarmDesc(warningLevel.getWarningdescribe());
					}else{
						hisInfo.setAlarmDesc(warningLevel.getWarningname());
					}
					
				}
				else
				{
					String msg="不显示的告警码为：" + hisInfo.getAlarmCode() + "  级别为：" + hisInfo.getAlarmLevel();
					ExceptionManage.infor(msg, this.getClass());
				}
				if (hisInfo.getAckTime() != null && !"".equals(hisInfo.getAckTime())) {
					hisInfo.setAcked(true);
				} else {
					hisInfo.setAcked(false);
				}
				if (hisInfo.getClearedTime() != null && !"".equals(hisInfo.getClearedTime())) {
					hisInfo.setCleared(true);
				} else {
					hisInfo.setCleared(false);
				}
			}
		} catch (Exception e) {
			throw e;
		} finally {
//			UiUtil.closeService(warningLevelService);
//			UiUtil.closeService(siteService);
		}

	}

	private Map<Integer, String> getsiteIdAndNameMap(SiteService siteService) {
		Map<Integer, String> siteIdAndNameMap = new HashMap<Integer, String>();
		try {
			List<SiteInst> siteList = siteService.select();
			if(siteList != null){
				for (SiteInst site : siteList) {
					siteIdAndNameMap.put(site.getSite_Inst_Id(), site.getManufacturer()+"/"+
							site.getCellId());
				}
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}
		
		return siteIdAndNameMap;
	}

	/**
	 * 根据网元id+槽位id集合，查询历史告警
	 * 
	 * @return
	 */
	public List<HisAlarmInfo> queryHisBySlots(Integer siteId, List<Integer> slotIds) throws Exception {
		List<HisAlarmInfo> hisInfoList = new ArrayList<HisAlarmInfo>();
		AlarmTools alarmTools = new AlarmTools();
		WarningLevelService warningLevelService = null;
		try {
			hisInfoList = hisDao.queryHisBySlots(siteId, slotIds, connection);
			warningLevelService = (WarningLevelService) ConstantUtil.serviceFactory.newService(Services.WarningLevel, this.connection);
			for (HisAlarmInfo hisInfo : hisInfoList) {
				// 封装告警数据
				WarningLevel warningLevel = hisInfo.getWarningLevel();
				warningLevel = warningLevelService.select(warningLevel).get(0);
				hisInfo.setWarningLevel(warningLevel);
				hisInfo.setAlarmSeverity(alarmTools.getAlarmSeverity(hisInfo.getWarningLevel().getWarninglevel_temp()));
				if (hisInfo.getAckTime() != null && !"".equals(hisInfo.getAckTime())) {
					hisInfo.setAcked(true);
				} else {
					hisInfo.setAcked(false);
				}
				if (hisInfo.getClearedTime() != null && !"".equals(hisInfo.getClearedTime())) {
					hisInfo.setCleared(true);
				} else {
					hisInfo.setCleared(false);
				}
			}
		} catch (Exception e) {
			throw e;
		} finally {
//			UiUtil.closeService(warningLevelService);
		}
		return hisInfoList;
	}

	/**
	 * 根据网元id集合，查询当前告警
	 * 
	 * @param siteIds
	 * @return
	 * @throws Exception
	 */
	public List<HisAlarmInfo> queryCurrBySites(List<Integer> siteIds) throws Exception {
		List<HisAlarmInfo> hisInfoList = new ArrayList<HisAlarmInfo>();
		HisAlarmInfo info = null;
		WarningLevelService warningLevelService = null;
		try {
			AlarmTools alarmTools = new AlarmTools();
			for (Integer id : siteIds) {
				info = hisDao.queryCurrBySites(id, connection);
				if (info != null) {
					hisInfoList.add(info);
				}
			}
			warningLevelService = (WarningLevelService) ConstantUtil.serviceFactory.newService(Services.WarningLevel, this.connection);
			for (HisAlarmInfo hisInfo : hisInfoList) {
				// 封装告警数据
				WarningLevel warningLevel = hisInfo.getWarningLevel();
				warningLevel = warningLevelService.select(warningLevel).get(0);
				hisInfo.setWarningLevel(warningLevel);
				hisInfo.setAlarmSeverity(alarmTools.getAlarmSeverity(hisInfo.getWarningLevel().getWarninglevel_temp()));
			}
		} catch (Exception e) {
			throw e;
		} finally {
//			UiUtil.closeService(warningLevelService);
		}
		return hisInfoList;
	}

	/**
	 * 根据槽位，查询当前告警
	 * 
	 * @param siteId
	 *            网元id
	 * @param slotIds
	 *            槽位id集合
	 * @return
	 * @throws Exception
	 */
	public List<HisAlarmInfo> queryCurrBySlots(Integer siteId, List<Integer> slotIds) throws Exception {
		List<HisAlarmInfo> hisInfoList = new ArrayList<HisAlarmInfo>();
		HisAlarmInfo info = null;
		WarningLevelService warningLevelService = null;
		try {
			AlarmTools alarmTools = new AlarmTools();
			for (Integer id : slotIds) {
				info = hisDao.queryCurrBySlot(siteId, id, connection);
				if (info != null) {
					hisInfoList.add(info);
				}
			}
			warningLevelService = (WarningLevelService) ConstantUtil.serviceFactory.newService(Services.WarningLevel, this.connection);
			for (HisAlarmInfo hisInfo : hisInfoList) {
				// 封装历史性能数据
				WarningLevel warningLevel = hisInfo.getWarningLevel();
				warningLevel = warningLevelService.select(warningLevel).get(0);
				hisInfo.setWarningLevel(warningLevel);
				hisInfo.setAlarmSeverity(alarmTools.getAlarmSeverity(hisInfo.getWarningLevel().getWarninglevel_temp()));
			}
		} catch (Exception e) {
			throw e;
		} finally {
//			UiUtil.closeService(warningLevelService);
		}
		return hisInfoList;
	}
	/**
	 * 查看 历史告警表多少条记录
	 * 返回   result 条
	 * @param list 符合条件的网元id
	 * @param filter 过滤条件
	 * @return
	 * @throws Exception
	 */
	public int selectCount(CurrentAlarmFilter filter, List<Integer> siteIdList)throws Exception{
		int result=0;
		result=hisDao.selectAlarmCount(filter, siteIdList, connection);
		return result;
	}
	/**
	 * 批量添加 sql   語句
	 * @param sql
	 * @return
	 * @throws Exception
	 */
	public int insertSql(List<String> sql) throws Exception{
		int result=0;
		try {
			connection.setAutoCommit(false);
			@SuppressWarnings("rawtypes")
			Iterator i=sql.iterator();
			while(i.hasNext()){
				String insertSql=(String) i.next();
				//insertSql.startsWith("insert")||
				if(insertSql.startsWith("insert")||insertSql.equals("INSERT")){
					int resultSet = hisDao.insertInport(insertSql, connection);
					if(resultSet>0){
						result++;
					}
				}
			}
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e, getClass());
		}finally{
			connection.setAutoCommit(true);
		}
		return result;
	}
	/**
	 * 查看
	 * @param tableName 是否存在
	 * 
	 * @return
	 */
	public boolean selectTable(String tableName){
		boolean flag=false;
		try {
			flag = hisDao.selectTable(tableName, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return flag;
	}
	
	/**
	 * 条件删除历史告警
	 * @param currentAlarmInfo
	 * @return
	 * @throws Exception
	 */
	public int deleteHisAlarmInfo(HisAlarmInfo hisAlarmInfo) throws Exception {
		if (hisAlarmInfo == null) {
			throw new Exception("hisAlarmInfo is null");
		}
		int resultcesId = 0;
		try {
			resultcesId = this.hisDao.deleteHisAlarmInfo(hisAlarmInfo, connection);
		} catch (Exception e) {

			throw e;
		}
		return resultcesId;
	}

	public List<HisAlarmInfo> selectHisAlarmByCond(String raiseTimeDuration,
			String clearTimeDuration, List<String> siteIdList,
			List<Integer> alarmSeverityList, List<Integer> alarmTypeList, String[] probableCauseArray) {
		List<HisAlarmInfo> hisAlarmInfos = null;
		try {
			hisAlarmInfos = hisDao.selectHisAlarmByCond(raiseTimeDuration,
					clearTimeDuration, siteIdList, alarmSeverityList, alarmTypeList,probableCauseArray, connection);
			this.wrapHisAlarmInfo(hisAlarmInfos);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return hisAlarmInfos;
	}

	
	/**
	 * 根据时间段来查询历史告警
	 * @throws Exception 
	 */
	public List<HisAlarmInfo> selectByTime(String startTime, String endTime) throws Exception {
		List<HisAlarmInfo> hisInfoList = null;
		try {
			hisInfoList = hisDao.queryByCondition(startTime, endTime, connection);
			this.wrapHisAlarmInfo(hisInfoList);
		} catch (Exception e) {
			throw e;
		}
		return hisInfoList;
	}
	
	
	
	/**
	 * 查询非设备的告警
	 * @return
	 */
	public List<HisAlarmInfo> alarmByAlarmLevel(int alarmLevel)throws Exception{
		List<HisAlarmInfo> hisAlarmInfoList = null;
		try {
			hisAlarmInfoList = new ArrayList<HisAlarmInfo>();
			hisAlarmInfoList = hisDao.queryByClent(alarmLevel,connection);
			this.wrapHisAlarmInfo(hisAlarmInfoList);
		} catch (Exception e) {
			throw e;
		}
		return hisAlarmInfoList;
	}

	/**
	 * 分页查询历史告警
	 */
	public List<HisAlarmInfo> selectByPage(int direction, int id, CurrentAlarmFilter filter,
			List<Integer> siteIdList, int pageCount) throws Exception {
		List<HisAlarmInfo> hisInfoList = new ArrayList<HisAlarmInfo>();
		try {
			hisInfoList = hisDao.selectByPage(direction, id, filter, siteIdList, connection, pageCount);
			this.wrapHisAlarmInfo(hisInfoList);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}
		return hisInfoList;
	}
	
	/**
	 * 获取告警的最大id号
	 * 
	 * @return
	 * @throws Exception
	 */
	public int selectMaxId() throws Exception {
		return this.hisDao.queryMaxId(connection);
	}

	public List<Integer> selectCurrAlarmId(CurrentAlarmFilter filter,List<Integer> siteIdList) throws SQLException{
		return this.hisDao.selectAllIdList(filter, siteIdList, connection);
	}
}
