package com.nms.ui.ptn.business.dialog.qinq;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;

import twaver.Element;
import twaver.Link;
import twaver.Node;
import twaver.PopupMenuGenerator;
import twaver.TDataBox;
import twaver.TUIManager;
import twaver.TView;
import twaver.TWaverConst;

import com.nms.db.bean.equipment.port.PortInst;
import com.nms.db.bean.equipment.shelf.SiteInst;
import com.nms.db.bean.path.Segment;
import com.nms.db.bean.ptn.path.tunnel.Lsp;
import com.nms.db.enums.EOperationLogType;
import com.nms.db.enums.ETunnelMenu;
import com.nms.model.equipment.shlef.SiteService;
import com.nms.model.path.SegmentService;
import com.nms.model.util.Services;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.DialogBoxUtil;
import com.nms.ui.manager.ExceptionManage;
import com.nms.ui.manager.ResourceUtil;
import com.nms.ui.manager.SegmentBasedQinqTopoPanel;
import com.nms.ui.manager.TopoAttachment;
import com.nms.ui.manager.UiUtil;
import com.nms.ui.manager.keys.StringKeysMenu;
import com.nms.ui.manager.keys.StringKeysObj;
import com.nms.ui.manager.keys.StringKeysTip;
import com.nms.ui.ptn.basicinfo.dialog.site.SelectSiteDialog;

public class QinQTopoPanel  extends javax.swing.JPanel{
	private static final long serialVersionUID = -4064842245314003518L;
	//private static QinQTopoPanel qinQTopoPanel = null;
	private SegmentBasedQinqTopoPanel segmentTopo = null;
	private PassNode node_a = null;
	private PassNode node_z = null;
	private PassNode psNode = null;
	private final List<PassNode> mustPNList = new ArrayList<PassNode>();
	private List<Lsp> lspP = null;
	public  SiteInst siteA = null;
	public  SiteInst siteZ = null;
	public  Element ElementA = null;
	public  Element ElementZ = null;
	public  List<Element> ElementM = new ArrayList<Element>();
	public  List<Segment> sgMust = new ArrayList<Segment>();
	public  List<SiteInst> SiteMust = new ArrayList<SiteInst>();
	AddQinQDialog addQinQDialog = null;
	public  boolean isMust = false;
	public  boolean isSgMust = false;

	{
		TUIManager.registerAttachment("topoTitle", TopoAttachment.class);
	}

	
//	public static QinQTopoPanel getTopology() {
//		if (qinQTopoPanel == null) {
//			qinQTopoPanel = new QinQTopoPanel(AddQinQDialog.getDialog());
//		}
//		return qinQTopoPanel;
//	}

	/** Creates new form EquipmentTopology */
	public QinQTopoPanel(AddQinQDialog addQinQPathDialog) {
		super(new BorderLayout());
		try {
			addQinQDialog = addQinQPathDialog;
			
			segmentTopo = new SegmentBasedQinqTopoPanel();
			segmentTopo.getNetwork().setPopupMenuGenerator(new PopupMenuGenerator() {
				@Override
				public JPopupMenu generate(TView tview, MouseEvent mouseEvent) {

					JPopupMenu menu = new JPopupMenu();

					if (tview.getDataBox().getSelectionModel().isEmpty()) {
						// 添加搜索网元菜单
						creatMenu(menu, ResourceUtil.srcStr(StringKeysMenu.MENU_SELECTSITE), ETunnelMenu.SERACH.getValue(), null);
					} else {
						final Element element = tview.getDataBox().getLastSelectedElement();
						if (element instanceof Link) {
							creatMenu(menu, ResourceUtil.srcStr(StringKeysTip.TIP_SETMUSTPATH), ETunnelMenu.MUSTSEGMENT.getValue(), element);
							creatMenu(menu, ResourceUtil.srcStr(StringKeysTip.TIP_CANCELSETMUSTPATH), ETunnelMenu.CANCELMUSTSEGMENT.getValue(),element);
						}
						if (element instanceof Node) {

							Node nodeSelect = (Node) element;

							// 如果此网元没有任何连接的段,就没有菜单
							if (nodeSelect.getAllLinks() == null) {
								return null;
							}
							// 获取dialog中tunnel类型的�?
							if (null == nodeSelect.getBusinessObject()) {

								// 设置选择A端菜单
								creatMenu(menu, ResourceUtil.srcStr(StringKeysMenu.MENU_SETA), ETunnelMenu.SELECTA.getValue(), element);

								// 设置选择Z端菜单
								creatMenu(menu, ResourceUtil.srcStr(StringKeysMenu.MENU_SETZ), ETunnelMenu.SELECTZ.getValue(), element);

								// 设置选择必经网元菜单
								creatMenu(menu, ResourceUtil.srcStr(StringKeysMenu.MENU_SETMUSTPASSTHROUGH), ETunnelMenu.MUSTSITE.getValue(), element);
							} else {
								// 如果右键选中网元不是A不是Z 才能可以选择保护

									// 取消设置菜单
									creatMenu(menu, ResourceUtil.srcStr(StringKeysMenu.MENU_CANEL_CONFIG), ETunnelMenu.CANELCONFIG.getValue(),
											element);
							}
						}
					}

					return menu;
				}
			});
			
			
			segmentTopo.getNetwork().addElementClickedActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					Element element = (Element) e.getSource();
					if(element!=null&&element instanceof Link){
						if(element.getUserObject()!=null&&element.getBusinessObject()==null){
							TUIManager.registerAttachment("SegmenttopoTitle", TopoAttachment.class,1, (int) element.getX(), (int) element.getY());
							Segment sgmust =  (Segment)element.getUserObject();
							element.setBusinessObject(sgmust.getNAME());
							element.addAttachment("SegmenttopoTitle");
						}else{
							element.removeAttachment("SegmenttopoTitle");
							element.setBusinessObject(null);
						}    
					}
				}
			});

			this.add(segmentTopo);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
	}


	/**
	 * 
	 * 设置菜单
	 * 
	 * @author kk
	 * 
	 * @param menu
	 *            菜单对象
	 * @param menuText
	 *            菜单显示语言
	 * @param type
	 *            菜单类型
	 * @param element
	 *            点击网元对象
	 * 
	 * @return
	 * 
	 * @Exception 异常对象
	 */
	private void creatMenu(JPopupMenu menu, String menuText, final int type, final Element element) {
		JMenuItem jMenuItem = new JMenuItem(menuText);
		jMenuItem.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {

				if (ETunnelMenu.SERACH.getValue() == type) { // 搜索网元
					try {
						SelectSiteDialog selectsitedialog = new SelectSiteDialog(segmentTopo.getNetwork(), true);
						selectsitedialog.setLocation(UiUtil.getWindowWidth(selectsitedialog.getWidth()), UiUtil.getWindowHeight(selectsitedialog.getHeight()));
						selectsitedialog.setVisible(true);
					} catch (Exception e) {
						ExceptionManage.dispose(e,this.getClass());
					}
				} else if (ETunnelMenu.SELECTA.getValue() == type) {
					// 返回A网元
					siteA = (SiteInst) element.getUserObject();
					setNodeAttachment("A", element);
					ElementA = element;
					addQinQDialog.setASiteField(siteA.getCellId());
				} else if (ETunnelMenu.SELECTZ.getValue() == type) {
					// 返回Z网元
					siteZ = (SiteInst) element.getUserObject();
					setNodeAttachment("Z", element);
					ElementZ = element;
					addQinQDialog.setZSiteField(siteZ.getCellId());
				} else if (ETunnelMenu.MUSTSITE.getValue() == type) {
					SiteInst site = null;
					// 设为必经
					if (siteA == null || siteZ == null) {
						mustTip();
						return;
					}
					site = (SiteInst) element.getUserObject();
					setNodeAttachment("between", element);
					ElementM.add(element);
					SiteMust.add(site);
					isMust = true;
				} else if (ETunnelMenu.CANELCONFIG.getValue() == type) { // 取消设置
					if ("A".equals(element.getBusinessObject()) || "Z".equals(element.getBusinessObject())) {
						canelConfig(element, element.getBusinessObject().toString());
					} else {
						canelConfig(element, "between");
					}

				} else if (ETunnelMenu.MUSTSEGMENT.getValue() == type) {
					// 设为必经段
					Segment sgmust = (Segment) element.getUserObject();
					((Link) element).putLinkColor(new Color(75, 0, 130));
					sgMust.add(sgmust);
					isSgMust = true;
				} else if (ETunnelMenu.CANCELMUSTSEGMENT.getValue() == type) {
					// 取消设为必经段
		
					((Link) element).putLinkColor(Color.GREEN);
					sgMust.clear();
					isSgMust = false;
				}

			}
		});
		menu.add(jMenuItem);
	}

	public void removePopMenu() {
		segmentTopo.getNetwork().setPopupMenuGenerator(null);
	}

	/**
	 * 取消设置菜单事件
	 * 
	 * @author kk
	 * 
	 * @param
	 * 
	 * @return
	 * 
	 * @Exception 异常对象
	 */
	private void canelConfig(Element element, String type) {
		if ("A".equals(type)) {
			this.setNode_a(null);
			addQinQDialog.setPortInst_A(null);
			addQinQDialog.setASiteField("");
			siteA = null;
			// 移除提示?
			element.removeAttachment("topoTitle");
			element.setBusinessObject(null);
		} else if ("Z".equals(type)) {
			this.setNode_z(null);
			addQinQDialog.setPortInst_A(null);
			addQinQDialog.setZSiteField("");
			siteZ = null;
			// 移除提示?
			element.removeAttachment("topoTitle");
			element.setBusinessObject(null);
		} else if ("between".equals(type)) {
			for (PassNode passNode : this.mustPNList) {
				if (passNode.getElement() == element) {
					this.mustPNList.remove(passNode);
					break;
				}
			}
			isMust = false;
			SiteMust.clear();
			this.removeBusinessObjct(element, ResourceUtil.srcStr(StringKeysObj.STRING_PROTECT_SITE));
		}

		// 设置完路径后要做路径检查
	//	AddTunnelPathDialog.getDialog().setHasCheck(false);
		// 设置所有link为绿色。需要重新检查路径
		this.setLinkColor(Color.GREEN);
	}

	/**
	 * 移除提示文本
	 * 
	 * @author kk
	 * 
	 * @param
	 * 
	 * @return
	 * 
	 * @Exception 异常对象
	 */
	public  void removeBusinessObjct(Element element, String tip) {

		if (element.getBusinessObject().toString().indexOf("/") == -1) {
			// 移除提示?
			element.removeAttachment("topoTitle");
			element.setBusinessObject(null);
		} else {
			// 移除提示?
			element.removeAttachment("topoTitle");
			element.setBusinessObject(null);

			element.setBusinessObject(tip);
			element.addAttachment("topoTitle");
		}

	}

	private void mustTip() {
		DialogBoxUtil.errorDialog(this, ResourceUtil.srcStr(StringKeysTip.TIP_AZ_CONFIG_BEFORE));
		UiUtil.insertOperationLog(EOperationLogType.TUNNELTOPO1.getValue());//436
	}

	/**
	 * 设置AZ端的title
	 */
	@SuppressWarnings("unchecked")
	public void setNodeAttachment(String type, Element selectElement) {
		List<Element> elementList = segmentTopo.getBox().getAllElements();
		if ("A".equals(type) || "Z".equals(type)) {
			for (Element element : elementList) {
				if (element instanceof Node) {
					if (element.getBusinessObject() != null) {
						if (element.getBusinessObject().equals(type)) {
							element.removeAttachment("topoTitle");
							element.setBusinessObject(null);
						}
					}
				}
			}
			selectElement.setBusinessObject(type);
		} else {

			String text = null;
			if (null == selectElement.getBusinessObject()) {
				text = type;
			} else {
				text = selectElement.getBusinessObject() + "/" + type;
				selectElement.removeAttachment("topoTitle");
				selectElement.setBusinessObject(null);
			}

			if (text.equals("between")) {
				text = ResourceUtil.srcStr(StringKeysObj.STRING_MUST_PASS_SITE);
			}

			selectElement.setBusinessObject(text);
		}

		selectElement.addAttachment("topoTitle");
	}

	
	

	/**
	 * 设置link的颜色
	 * 
	 * @author kk
	 * 
	 * @param
	 * 
	 * @return
	 * 
	 * @Exception 异常对象
	 */
	@SuppressWarnings("unchecked")
	public  void setLinkColor(Color color) {
		TDataBox box = segmentTopo.getBox();
		List<Element> elementList = box.getAllElements();

		for (int i = elementList.size() - 1; i >= 0; i--) {
			Element element = elementList.get(i);
			if (element instanceof Link) {
				((Link) element).setLinkType(TWaverConst.LINE_TYPE_DEFAULT);
				((Link) element).putLinkColor(color);
				((Link) element).putLinkFlowingWidth(3);
				((Link) element).putLinkWidth(3);
			}
		}
	}

	/**
	 *查询并返回完整路径的�?
	 * 
	 * @return
	 */
	private List<Segment> checkAndGetPathWithSegment(List<Segment> list, String type) {

		List<PassNode> passNodes = new ArrayList<PassNode>();
		List<Segment> link = new ArrayList<Segment>();
		PortInst Aport = null;
		PortInst Zport = null;
		PortInst startPort = null;
		PortInst endPort = null;
		Segment segment = null;
		try {
			if ("between".equals(type)) {
				passNodes.addAll(mustPNList);
				Aport = this.getNode_a().getaPort();
				Zport = this.getNode_z().getzPort();
			}
			startPort = Aport;
			while (passNodes.size() > 0) {
				segment = getSegmentByport(startPort, list);
				if (segment == null) // there is no segment with the port of
					// startPort
					return null;
				link.add(segment);

				endPort = getPortinstBySegment(startPort, segment);
				startPort = getPeerportInPassnode(endPort, passNodes);
				if (startPort == null) // peer site is not in mustPNList
					return null;
			}
			segment = existSegmetwithPorts(startPort, Zport, list);// judge the
			if (segment != null)
				link.add(segment);
			else
				return null;
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			Aport = null;
			Zport = null;
			startPort = null;
			endPort = null;
			segment = null;
		}
		return link;
	}

	/**
	 *@return 两端口对应的�?
	 */
	private Segment existSegmetwithPorts(PortInst startPort, PortInst zport, List<Segment> list) {
		for (Segment obj : list) {
			if ((obj.getAPORTID() == startPort.getPortId() && obj.getASITEID() == startPort.getSiteId() && obj.getZPORTID() == zport.getPortId() && obj
					.getZSITEID() == zport.getSiteId())
					|| (obj.getZPORTID() == startPort.getPortId() && obj.getZSITEID() == startPort.getSiteId()
							&& obj.getAPORTID() == zport.getPortId() && obj.getASITEID() == zport.getSiteId())) {
				return obj;
			}
		}
		return null;
	}

	/**
	 * 通过端口找必经网元的另一出端?
	 */
	private PortInst getPeerportInPassnode(PortInst endPort, List<PassNode> passNodes) {
		for (PassNode obj : passNodes) {
			if (obj.getaPort().getPortId() == endPort.getPortId() && obj.getaPort().getSiteId() == endPort.getSiteId()) {
				passNodes.remove(obj);
				return obj.getzPort();
			} else if (obj.getzPort().getPortId() == endPort.getPortId() && obj.getzPort().getSiteId() == endPort.getSiteId()) {
				passNodes.remove(obj);
				return obj.getaPort();
			}
		}
		return null;
	}

	/**
	 * 通过端口返回段的另一端口
	 */
	private PortInst getPortinstBySegment(PortInst startPort, Segment segment) {
		PortInst port = new PortInst();
		if (segment.getASITEID() == startPort.getSiteId() && segment.getAPORTID() == startPort.getPortId()) {
			port.setPortId(segment.getZPORTID());
			port.setSiteId(segment.getZSITEID());
		} else if (segment.getZSITEID() == startPort.getSiteId() && segment.getZPORTID() == startPort.getPortId()) {
			port.setPortId(segment.getAPORTID());
			port.setSiteId(segment.getASITEID());
		}
		return port;
	}

	/**
	 * 查找端口所承载的段
	 */
	private Segment getSegmentByport(PortInst startPort, List<Segment> list) {
		for (Segment obj : list) {
			if ((obj.getASITEID() == startPort.getSiteId() && obj.getAPORTID() == startPort.getPortId())
					|| (obj.getZSITEID() == startPort.getSiteId() && obj.getZPORTID() == startPort.getPortId())) {
				return obj;
			}
		}
		return null;
	}

	@SuppressWarnings("unchecked")
	public void drawTopoByPassLinks(List<Segment> segmentList) throws Exception {
		TDataBox box = segmentTopo.getBox();
		List<Element> elementList = box.getAllElements();
		PortInst startnode = this.node_a.getaPort();
		PortInst endnode = new PortInst();
		lspP = new ArrayList<Lsp>();
		Lsp lsp = null;

		for (Segment obj : segmentList) {
			for (int i = elementList.size() - 1; i >= 0; i--) {
				Element element = elementList.get(i);
				if (element instanceof Link && linkSimilarWithSegment((Link) element, obj)) {
					((Link) element).setLinkType(TWaverConst.LINE_TYPE_DEFAULT);
					((Link) element).putLinkColor(Color.RED);
					((Link) element).putLinkFlowingWidth(3);
					((Link) element).putLinkWidth(3);

					lsp = getLspParticular(obj, startnode, endnode);
					((Link) element).setUserObject(lsp);
					startnode = getStartnode(endnode);
					lspP.add(lsp);
					break;
				}
			}
		}
	}

	private boolean linkSimilarWithSegment(Link link, Segment seg2) {
		if (link.getUserObject() instanceof Segment) {
			Segment seg1 = (Segment) link.getUserObject();
			if ((seg1.getAPORTID() == seg2.getAPORTID() && seg1.getASITEID() == seg2.getASITEID() && seg1.getZPORTID() == seg2.getZPORTID() && seg1
					.getZSITEID() == seg2.getZSITEID())
					|| (seg1.getAPORTID() == seg2.getZPORTID() && seg1.getASITEID() == seg2.getZSITEID() && seg1.getZPORTID() == seg2.getAPORTID() && seg1
							.getZSITEID() == seg2.getASITEID()))
				return true;
		} else if (link.getUserObject() instanceof Lsp) {
			Lsp lspp = (Lsp) link.getUserObject();
			if ((lspp.getAPortId() == seg2.getAPORTID() && lspp.getASiteId() == seg2.getASITEID() && lspp.getZPortId() == seg2.getZPORTID() && lspp
					.getZSiteId() == seg2.getZSITEID())
					|| (lspp.getAPortId() == seg2.getZPORTID() && lspp.getASiteId() == seg2.getZSITEID() && lspp.getZPortId() == seg2.getAPORTID() && lspp
							.getZSiteId() == seg2.getASITEID()))
				return true;
		}

		return false;
	}

	private PortInst getStartnode(PortInst endtnode) {
		for (PassNode node : mustPNList) {
			if (node.getaPort().getSiteId() == endtnode.getSiteId() && node.getaPort().getPortId() == endtnode.getPortId())
				return node.getzPort();
			else if (node.getzPort().getSiteId() == endtnode.getSiteId() && node.getzPort().getPortId() == endtnode.getPortId())
				return node.getaPort();
		}
		return null;
	}

	private Lsp getLspParticular(Segment obj, PortInst startnode, PortInst endnode) throws Exception {
		
		SiteService siteService=(SiteService) ConstantUtil.serviceFactory.newService(Services.SITE);
		Lsp lspP = new Lsp();
		try {
			lspP.setAPortId(startnode.getPortId());
			lspP.setASiteId(startnode.getSiteId());
			lspP.setZoppositeId(siteService.getSiteID(startnode.getSiteId()));
			lspP.setSegmentId(obj.getId());
			
			if (obj.getASITEID() == startnode.getSiteId()) {
//				lspP.setAoppositeId(siteService.getSiteID(obj.getZSITEID()));
				lspP.setZPortId(obj.getZPORTID());
				lspP.setZSiteId(obj.getZSITEID());
				endnode.setPortId(obj.getZPORTID());
				endnode.setSiteId(obj.getZSITEID());
			} else {
//				lspP.setAoppositeId(siteService.getSiteID(obj.getASITEID()));
				lspP.setZPortId(obj.getAPORTID());
				lspP.setZSiteId(obj.getASITEID());
				endnode.setPortId(obj.getAPORTID());
				endnode.setSiteId(obj.getASITEID());
			}
		} catch (Exception e) {
			throw e;
		}finally{
			UiUtil.closeService(siteService);
		}
		return lspP;
	}

	public  List<Segment> getAllSegmentFromTopo() throws Exception {
		SegmentService service = null;
		List<Segment> segmentList = null;
		try {
			service = (SegmentService) ConstantUtil.serviceFactory.newService(Services.SEGMENT);
			segmentList = service.select();
		} catch (Exception e) {
			throw e;
		}finally{
			UiUtil.closeService(service);
		}
		return segmentList;
	}

	public List<Segment> checkAndGetPathWithSegment() throws Exception {
		return checkAndGetPathWithSegment(getAllSegmentFromTopo(), "between");
	}

	public boolean checkAnddrawTopo() throws Exception {
		List<Segment> segmentList = checkAndGetPathWithSegment(getAllSegmentFromTopo(), "between");
		if (segmentList != null) {
			drawTopoByPassLinks(segmentList);
			return true;
		} else {
			return false;
		}
	}

//	public static SegmentBasedQinqTopoPanel getSegmentTopo() {
//		return segmentTopo;
//	}

//	@SuppressWarnings("static-access")
//	public static void setSegmentTopo(SegmentBasedQinqTopoPanel segmentTopo) {
//		qinQTopoPanel.segmentTopo = segmentTopo;
//	}

	public List<Lsp> getLspP() {
		return lspP;
	}

	public void setLspP(List<Lsp> lspP) {
		this.lspP = lspP;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// End of variables declaration//GEN-END:variables
	public class PassNode {

		private Element element;
		private PortInst aPort;
		private PortInst zPort;

		public PassNode(Element element, PortInst aPort, PortInst zPort) {
			super();
			this.element = element;
			this.aPort = aPort;
			this.zPort = zPort;
		}

		public Element getElement() {
			return element;
		}

		public void setElement(Element element) {
			this.element = element;
		}

		public PortInst getaPort() {
			return aPort;
		}

		public void setaPort(PortInst aPort) {
			this.aPort = aPort;
		}

		public PortInst getzPort() {
			return zPort;
		}

		public void setzPort(PortInst zPort) {
			this.zPort = zPort;
		}

	}
	 public SiteInst getSiteA() {
		return siteA;
	}

	public void setSiteA(SiteInst siteA) {
		this.siteA = siteA;
	}

	public SiteInst getSiteZ() {
		return siteZ;
	}

	public void setSiteZ(SiteInst siteZ) {
		this.siteZ = siteZ;
	}

	public Element getElementA() {
		return ElementA;
	}

	public void setElementA(Element elementA) {
		ElementA = elementA;
	}

	public Element getElementZ() {
		return ElementZ;
	}

	public void setElementZ(Element elementZ) {
		ElementZ = elementZ;
	}

	public List<Element> getElementM() {
		return ElementM;
	}

	public void setElementM(List<Element> elementM) {
		ElementM = elementM;
	}

	public List<Segment> getSgMust() {
		return sgMust;
	}

	public void setSgMust(List<Segment> sgMust) {
		this.sgMust = sgMust;
	}

	public List<SiteInst> getSiteMust() {
		return SiteMust;
	}

	public void setSiteMust(List<SiteInst> siteMust) {
		SiteMust = siteMust;
	}

	public boolean isMust() {
		return isMust;
	}

	public void setMust(boolean isMust) {
		this.isMust = isMust;
	}

	public boolean isSgMust() {
		return isSgMust;
	}

	public void setSgMust(boolean isSgMust) {
		this.isSgMust = isSgMust;
	}
	public PassNode getPsNode() {
		return psNode;
	}

	public void setPsNode(PassNode psNode) {
		this.psNode = psNode;
	}

	public PassNode getNode_a() {
		return node_a;
	}

	public void setNode_a(PassNode node_a) {
		this.node_a = node_a;
	}

	public PassNode getNode_z() {
		return node_z;
	}

	public void setNode_z(PassNode node_z) {
		this.node_z = node_z;
	}

}
