package com.nms.model.ptn;

import java.sql.Connection;
import java.util.List;

import com.nms.db.bean.ptn.AllConfigInfo;
import com.nms.db.dao.ptn.AllConfigInfoDao;
import com.nms.model.util.ObjectService;
import com.nms.ui.manager.ExceptionManage;


public class AllConfigService extends ObjectService{

	public void setConnection(Connection connection) {
		super.connection = connection;
	}

	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}
	private AllConfigInfoDao wholeConfigInfoDao = new AllConfigInfoDao();
	
	/**
	 * 新增
	 * @param wholeConfigInfo
	 * @throws Exception
	 */
	public void save(AllConfigInfo wholeConfigInfo) throws Exception{
		
		if(wholeConfigInfo == null){
			throw new Exception("wholeConfigInfo is null");
		}
		try {
			connection.setAutoCommit(false);
			wholeConfigInfoDao.insert(wholeConfigInfo, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		}finally{
			connection.setAutoCommit(true);
		}
	}
	
	/**
	 * 查询该网元下所有信息
	 * @param siteId
	 * @return
	 * @throws Exception
	 */
	public List<AllConfigInfo> select(int siteId) throws Exception{
		List<AllConfigInfo> wholeConfigInfoList = null;
		if(siteId == 0){
			throw new Exception("siteId is null");
		}
		try {
			connection.setAutoCommit(false);
			wholeConfigInfoList = wholeConfigInfoDao.queryByCondition(siteId, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		}finally{
			connection.setAutoCommit(true);
		}
		return wholeConfigInfoList;
	}
	
	/**
	 * 更新
	 * @param wholeConfigInfo
	 * @throws Exception
	 */
	public void update(AllConfigInfo wholeConfigInfo) throws Exception{
		if(wholeConfigInfo == null){
			throw new Exception("wholeConfigInfo is null");
		}
		try {
			connection.setAutoCommit(false);
			wholeConfigInfoDao.update(wholeConfigInfo, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		}finally{
			connection.setAutoCommit(true);
		}
	}
	
	
	/*
	 * 根据网元ID删除数据
	 * 
	 */
	public void delete(int siteId)throws Exception{
		if(siteId == 0){
			throw new Exception("siteId is null");
		}
		try {
			connection.setAutoCommit(false);
			wholeConfigInfoDao.delete(siteId, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
		}finally{
			connection.setAutoCommit(true);
		}
	}
}

