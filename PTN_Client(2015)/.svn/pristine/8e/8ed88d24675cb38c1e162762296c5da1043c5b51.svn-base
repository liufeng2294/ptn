package com.nms.model.perform;

import java.sql.Connection;

import com.nms.db.bean.perform.PmValueLimiteInfo;
import com.nms.db.dao.perform.PMValueLimiteDao;
import com.nms.model.util.ObjectService;
import com.nms.ui.manager.ExceptionManage;

public class PmLimiteService extends ObjectService
{
	public void setConnection(Connection connection)
	{
		super.connection = connection;
	}
	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}
	private PMValueLimiteDao pmlimiteDao = new PMValueLimiteDao();

	/**
	 * 新建或修改
	 * @param pmllimite
	 * @return
	 * @throws Exception
	 */
	public int saveOrUpdate(PmValueLimiteInfo pmllimite) throws Exception
	{
		if (pmllimite == null)
		{
			throw new Exception("pmllimite is null");
		}

		int result = 0;
		try
		{	
			PmValueLimiteInfo pminfo = select(pmllimite);
			if(pminfo != null)
			{
				result = pmlimiteDao.update(pmllimite, connection);
			}else
			{
				result = pmlimiteDao.insert(pmllimite, connection);
			}
		}
		catch (Exception e)
		{
			ExceptionManage.dispose(e,this.getClass());
		}
		return result;
	}
	
	/**
	 * 新建
	 * @param pmllimite
	 * @return
	 * @throws Exception
	 */
	public int insert(PmValueLimiteInfo pmllimite) throws Exception
	{
		if (pmllimite == null)
		{
			throw new Exception("pmllimite is null");
		}

		int result = 0;

		try
		{	
			result = pmlimiteDao.insert(pmllimite, connection);
		}
		catch (Exception e)
		{
			ExceptionManage.dispose(e,this.getClass());
		}

		return result;
	}
	/**
	 * 新建
	 * @param update
	 * @return
	 * @throws Exception
	 */
	public int update(PmValueLimiteInfo pmllimite) throws Exception
	{
		if (pmllimite == null)
		{
			throw new Exception("pmllimite is null");
		}

		int result = 0;

		try
		{	
			result = pmlimiteDao.update(pmllimite, connection);
		}
		catch (Exception e)
		{
			ExceptionManage.dispose(e,this.getClass());
		}

		return result;
	}
	/**
	 * 按条件查询
	 * @param pmValueLimiteInfo
	 * @return
	 */
	public PmValueLimiteInfo select(PmValueLimiteInfo pmValueLimiteInfo)
	{
		PmValueLimiteInfo pmllimite = null;
		try
		{
			pmllimite = pmlimiteDao.queryByCondition(pmValueLimiteInfo,connection);
		}
		catch (Exception e)
		{
			ExceptionManage.dispose(e,this.getClass());
		}
		return pmllimite;
	}
}
