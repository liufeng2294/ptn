package com.nms.db.dao.ptn.path.pw;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.path.pw.PwNniInfo;
import com.nms.db.enums.EManufacturer;
import com.nms.model.equipment.shlef.SiteService;
import com.nms.model.util.Services;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.UiUtil;


public class PwNniDao {
	/**
	 * 插入Sql
	 */
	private final String INSERTSQL = "insert into pwNniBuffer(siteId,pwId,pwBusinessId,exitRule,svlan,tpid,vlanpri,horizontalDivision,macAddressLearn,tagAction,controlEnable,lanId) values(?,?,?,?,?,?,?,?,?,?,?,?)";
	/**
	 * 更新Sql
	 */
	private final String UPDATESQL = "update pwNniBuffer set siteId=?,pwId=?,pwBusinessId=?,exitRule=?,svlan=?,tpid=?,vlanpri=?,horizontalDivision=?,macAddressLearn=?,tagAction=?,controlEnable=? ,lanId=? where Id=? ";
	/**
	 * 删除Sql
	 */
	private final String DELETESQL = "delete from pwNniBuffer where Id=?";

	/**
	 * 查询Sql
	 */
	private final String SELECTSQL = "SELECT Id,siteId,pwId,pwBusinessId,exitRule,svlan,tpid,vlanpri,horizontalDivision,macAddressLearn,tagAction,controlEnable,lanId FROM pwNniBuffer WHERE 1=1";

	/**
	 * 
	 * @param pwNnipInfo
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int insert(PwNniInfo pwNnipInfo, Connection connection) throws Exception {
		if (null == pwNnipInfo) {
			throw new Exception("pwNnipInfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = INSERTSQL;
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, pwNnipInfo.getSiteId());
			preparedStatement.setInt(2, pwNnipInfo.getPwId());
			preparedStatement.setInt(3, pwNnipInfo.getPwBusinessId());
			preparedStatement.setInt(4, pwNnipInfo.getExitRule());
			preparedStatement.setString(5, pwNnipInfo.getSvlan());
			preparedStatement.setInt(6, pwNnipInfo.getTpid());
			preparedStatement.setString(7, pwNnipInfo.getVlanpri());
			preparedStatement.setInt(8, pwNnipInfo.getHorizontalDivision());
			preparedStatement.setInt(9, pwNnipInfo.getMacAddressLearn());
			preparedStatement.setInt(10, pwNnipInfo.getTagAction());
			preparedStatement.setInt(11, pwNnipInfo.getControlEnable());
			preparedStatement.setInt(12, pwNnipInfo.getLanId());
			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}

			sql = null;
		}

		return result;
	}

	/**
	 * 更新pwNnipInfo
	 * 
	 * @param pwNnipInfo
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int update(PwNniInfo pwNnipInfo, Connection connection) throws Exception {
		if (null == pwNnipInfo) {
			throw new Exception("pwNnipInfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = UPDATESQL;

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, pwNnipInfo.getSiteId());
			preparedStatement.setInt(2, pwNnipInfo.getPwId());
			preparedStatement.setInt(3, pwNnipInfo.getPwBusinessId());
			preparedStatement.setInt(4, pwNnipInfo.getExitRule());
			preparedStatement.setString(5, pwNnipInfo.getSvlan());
			preparedStatement.setInt(6, pwNnipInfo.getTpid());
			preparedStatement.setString(7, pwNnipInfo.getVlanpri());
			preparedStatement.setInt(8, pwNnipInfo.getHorizontalDivision());
			preparedStatement.setInt(9, pwNnipInfo.getMacAddressLearn());
			preparedStatement.setInt(10, pwNnipInfo.getTagAction());
			preparedStatement.setInt(11, pwNnipInfo.getControlEnable());
			preparedStatement.setInt(12, pwNnipInfo.getLanId());
			preparedStatement.setInt(13, pwNnipInfo.getId());
			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 通过主键删除pwNnipInfo
	 * 
	 * @param id
	 *            主键
	 * @param connection
	 *            数据库连接
	 * @return 删除的记录数
	 * @throws Exception
	 */
	public int delete(int id, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = DELETESQL;
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, id);

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	public int deleteBySiteId(int siteId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "delete from pwNniBuffer where siteId=?";
			;
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 通过条件查询
	 * 
	 * @param elaninfocondition
	 *            查询条件
	 * @param connection
	 *            数据库连接
	 * @return List<ElineInfo>集合
	 * @throws Exception
	 */
	public List<PwNniInfo> queryByCondition(PwNniInfo condition, Connection connection) throws Exception {
		if (null == condition) {
			throw new Exception("acPortInfocondition is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		List<PwNniInfo> list = null;
		try {

			sql = SELECTSQL;
			if (condition.getId() > 0) {
				sql += " and Id=" + condition.getId();
			}

			if (condition.getPwId() > 0) {
				sql += " and pwId=" + condition.getPwId();
			}

			if (condition.getSiteId() > 0) {
				sql += " and siteId=" + condition.getSiteId();
			}

			list = this.excuteQuery(connection, sql);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return list;
	}

	public List<PwNniInfo> queryAll(Connection connection) throws Exception {

		String sql = null;
		List<PwNniInfo> infoList = null;
		try {
			sql = SELECTSQL;
			infoList = this.excuteQuery(connection, sql);

		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return infoList;
	}

	/**
	 * 执行查询语句
	 * 
	 * @param connection
	 *            数据库连接
	 * @param sql
	 *            sql语句
	 * @return 查询集合
	 * @throws Exception
	 */
	private List<PwNniInfo> excuteQuery(Connection connection, String sql) throws Exception {
		List<PwNniInfo> infoList = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		PwNniInfo pwNnipInfo = null;
		try {
			infoList = new ArrayList<PwNniInfo>();
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				pwNnipInfo = new PwNniInfo();
				pwNnipInfo.setSiteId(resultSet.getInt("SiteId"));
				pwNnipInfo.setPwId(resultSet.getInt("PwId"));
				pwNnipInfo.setPwBusinessId(resultSet.getInt("PwBusinessId"));
				pwNnipInfo.setExitRule(resultSet.getInt("ExitRule"));
				pwNnipInfo.setSvlan(resultSet.getString("Svlan"));
				pwNnipInfo.setTpid(resultSet.getInt("Tpid"));
				pwNnipInfo.setVlanpri(resultSet.getString("Vlanpri"));
				pwNnipInfo.setHorizontalDivision(resultSet.getInt("HorizontalDivision"));
				pwNnipInfo.setMacAddressLearn(resultSet.getInt("MacAddressLearn"));
				pwNnipInfo.setTagAction(resultSet.getInt("TagAction"));
				pwNnipInfo.setControlEnable(resultSet.getInt("ControlEnable"));
				pwNnipInfo.setId(resultSet.getInt("Id"));
				pwNnipInfo.setLanId(resultSet.getInt("lanId"));
				infoList.add(pwNnipInfo);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			pwNnipInfo = null;
		}

		return infoList;
	}
	/**
	 * 修改  Vlan
	 * @param pwNnipInfo
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int updateVlan(PwNniInfo pwNnipInfo, Connection connection) throws Exception {
		if (null == pwNnipInfo) {
			throw new Exception("pwNnipInfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		SiteService siteService = null;
		try {
			siteService = (SiteService) ConstantUtil.serviceFactory.newService(Services.SITE);
			if(EManufacturer.CHENXIAO.getValue() == siteService.getManufacturer(pwNnipInfo.getSiteId())){
				sql="update pwNniBuffer set exitRule=?,svlan=?,tpid=?,vlanpri=? where siteId=? and pwId=? ";
				preparedStatement = connection.prepareStatement(sql);
				preparedStatement.setInt(5, pwNnipInfo.getSiteId());
				preparedStatement.setInt(6, pwNnipInfo.getPwId());
				//preparedStatement.setInt(3, pwNnipInfo.getPwBusinessId());
				
				preparedStatement.setInt(1, pwNnipInfo.getExitRule());
				preparedStatement.setString(2, pwNnipInfo.getSvlan());
				preparedStatement.setInt(3, pwNnipInfo.getTpid());
				preparedStatement.setString(4, pwNnipInfo.getVlanpri());
				
				result = preparedStatement.executeUpdate();
			}else{
				sql="update pwNniBuffer set exitRule=?,svlan=?,tpid=?,vlanpri=?,horizontalDivision=?,macAddressLearn=?,tagAction=?,controlEnable=? where siteId=? and pwId=? ";
				preparedStatement = connection.prepareStatement(sql);
				preparedStatement.setInt(9, pwNnipInfo.getSiteId());
				preparedStatement.setInt(10, pwNnipInfo.getPwId());
				//preparedStatement.setInt(3, pwNnipInfo.getPwBusinessId());
				
				preparedStatement.setInt(1, pwNnipInfo.getExitRule());
				preparedStatement.setString(2, pwNnipInfo.getSvlan());
				preparedStatement.setInt(3, pwNnipInfo.getTpid());
				preparedStatement.setString(4, pwNnipInfo.getVlanpri());
				preparedStatement.setInt(5, pwNnipInfo.getHorizontalDivision());
				preparedStatement.setInt(6, pwNnipInfo.getMacAddressLearn());
				preparedStatement.setInt(7, pwNnipInfo.getTagAction());
				preparedStatement.setInt(8, pwNnipInfo.getControlEnable());
				result = preparedStatement.executeUpdate();
			}
		} catch (Exception e) {
			throw e;
		} finally {
			UiUtil.closeService(siteService);
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}
	
	
	/**
	 * 修改  lanId
	 * @param pwNnipInfo
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int updateLanId(PwNniInfo pwNnipInfo, Connection connection) throws Exception {
		if (null == pwNnipInfo) {
			throw new Exception("pwNnipInfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;		
		try {
		        if(pwNnipInfo.getId()>0){
				sql="update pwNniBuffer set lanId=? where id=? and siteId=?";
				preparedStatement = connection.prepareStatement(sql);
				preparedStatement.setInt(1, pwNnipInfo.getLanId());
				preparedStatement.setInt(2, pwNnipInfo.getId());
				preparedStatement.setInt(3, pwNnipInfo.getSiteId());
				result = preparedStatement.executeUpdate();
		        }else{
		        	sql="update pwNniBuffer set lanId=? where pwId=? and siteId=?";
					preparedStatement = connection.prepareStatement(sql);
					preparedStatement.setInt(1, pwNnipInfo.getLanId());
					preparedStatement.setInt(2, pwNnipInfo.getPwId());
					preparedStatement.setInt(3, pwNnipInfo.getSiteId());
					result = preparedStatement.executeUpdate();
		        }
			
		} catch (Exception e) {
			throw e;
		} finally {			
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}
}
