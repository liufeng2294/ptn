package com.nms.db.dao.equipment.port;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.equipment.port.PortInst;
import com.nms.db.fac.f.DButil;
import com.nms.ui.manager.ExceptionManage;

public class PortInstDao {
	private final String SQL_UPDATE_SYNCHRO = "update port_inst set portType=?,jobStatus=?,isEnabled_code=?,macAddress=?,"
			+ "ExpMappingLLspInput=?,ExpMappingLLspOutput=?,ExpMappingELspInput=?,ExpMappingELspOutput=? ,MappingVlanpriToColor=? ,"
			+ "MappingPriorityToVlanpri = ?,qinqEnabled = ?,laserEnabled = ?,servicePort =? ,priority=? where portid=?";
	/**
	 * 新增portinst
	 * 
	 * @param portinst
	 *            实体
	 * @param connection
	 *            数据库连接
	 * @return 插入的记录数
	 * @throws Exceptiont
	 */
	public int insert(PortInst portinst, Connection connection) throws Exception {

		if (null == portinst) {
			throw new Exception("portinst is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		ResultSet resultSet = null;

		try {
			sql = "insert into port_inst(cardId,equipId,siteId,portName,portType,portStatus,bandwidth,manageStatus,jobStatus ,"
					+ "imagePath ,portx, porty,isOccupy,number,slotnumber,isEnabled_code,parentId , lagId , lagNumber,linecoding,"
					+ "impedance,macAddress,qinqEnabled,ExpMappingLLspInput,ExpMappingLLspOutput,ExpMappingELspInput,ExpMappingELspOutput,"
					+  "mappingVlanpriToColor,mappingPriorityToVlanpri,laserEnabled,moduleType,snmpName,alarmReversalEnabled,servicePort,priority)"
					+ " values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
			preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, portinst.getCardId());
			preparedStatement.setInt(2, portinst.getEquipId());
			preparedStatement.setInt(3, portinst.getSiteId());
			preparedStatement.setString(4, portinst.getPortName());
			preparedStatement.setString(5, portinst.getPortType());
			preparedStatement.setString(6, portinst.getPortStatus());
			preparedStatement.setString(7, portinst.getBandwidth());
			preparedStatement.setInt(8, portinst.getManageStatus());
			preparedStatement.setString(9, portinst.getJobStatus());
			preparedStatement.setString(10, portinst.getImagePath());
			preparedStatement.setInt(11, portinst.getPortx());
			preparedStatement.setInt(12, portinst.getPorty());
			preparedStatement.setInt(13, portinst.getIsOccupy());
			preparedStatement.setInt(14, portinst.getNumber());
			preparedStatement.setInt(15, portinst.getSlotNumber());
			preparedStatement.setInt(16, portinst.getIsEnabled_code());
			preparedStatement.setInt(17, portinst.getParentId());
			preparedStatement.setInt(18, portinst.getLagId());
			preparedStatement.setInt(19, portinst.getLagNumber());
			preparedStatement.setString(20, portinst.getLinecoding());
			preparedStatement.setInt(21, portinst.getImpedance());
			preparedStatement.setString(22, portinst.getMacAddress());
			preparedStatement.setInt(23, portinst.getIsEnabled_QinQ());
			preparedStatement.setInt(24, portinst.getExpMappingLLspInput());
			preparedStatement.setInt(25, portinst.getExpMappingLLspOutput());
			preparedStatement.setInt(26, portinst.getExpMappingELspInput());
			preparedStatement.setInt(27, portinst.getExpMappingELspOutput());
			preparedStatement.setInt(28, portinst.getMappingVlanpriToColor());
			preparedStatement.setInt(29, portinst.getMappingPriorityToVlanpri());
			preparedStatement.setInt(30, portinst.getIsEnabledLaser());
			preparedStatement.setString(31, portinst.getModuleType());
			preparedStatement.setString(32, portinst.getPortName());
			preparedStatement.setInt(33, portinst.getIsEnabledAlarmReversal());
			preparedStatement.setInt(34, portinst.getServicePort());
			preparedStatement.setString(35, portinst.getPriority());
			preparedStatement.executeUpdate();

			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				result = resultSet.getInt(1);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}

			sql = null;
		}

		return result;
	}

	/**
	 * 修改portInst
	 * 
	 * @param portInst
	 *            实体
	 * @param connection
	 *            数据库连接
	 * @return 修改的记录数
	 * @throws Exception
	 */
	public int update(PortInst portInst, Connection connection) throws Exception {
		if (null == portInst) {
			throw new Exception("portInst is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "update port_inst set cardId=?,equipId=?,siteId=?,portName=?,portType=?,portStatus=?,bandwidth=?,manageStatus=?,"
					+ "jobStatus=?,isOccupy=?,number=?,slotnumber=?,isEnabled_code=?, lagId=?, lagNumber=? ,linecoding=?,impedance=?,"
					+ "macAddress=?,qinqEnabled=? ,ExpMappingLLspInput=?,ExpMappingLLspOutput=?,ExpMappingELspInput=?,"
					+ "ExpMappingELspOutput=? ,mappingVlanpriToColor=?,mappingPriorityToVlanpri=?,laserEnabled=?,snmpName=?,alarmReversalEnabled=?,servicePort=? ,priority=? where portId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, portInst.getCardId());
			preparedStatement.setInt(2, portInst.getEquipId());
			preparedStatement.setInt(3, portInst.getSiteId());
			preparedStatement.setString(4, portInst.getPortName());
			preparedStatement.setString(5, portInst.getPortType());
			preparedStatement.setString(6, portInst.getPortStatus());
			preparedStatement.setString(7, portInst.getBandwidth());
			preparedStatement.setInt(8, portInst.getManageStatus());
			preparedStatement.setString(9, portInst.getJobStatus());
			preparedStatement.setInt(10, portInst.getIsOccupy());
			preparedStatement.setInt(11, portInst.getNumber());
			preparedStatement.setInt(12, portInst.getSlotNumber());
			preparedStatement.setInt(13, portInst.getIsEnabled_code());
			preparedStatement.setInt(14, portInst.getLagId());
			preparedStatement.setInt(15, portInst.getLagNumber());
			preparedStatement.setString(16, portInst.getLinecoding());
			preparedStatement.setInt(17, portInst.getImpedance());
			preparedStatement.setString(18, portInst.getMacAddress());
			preparedStatement.setInt(19, portInst.getIsEnabled_QinQ());
			preparedStatement.setInt(20, portInst.getExpMappingLLspInput());
			preparedStatement.setInt(21, portInst.getExpMappingLLspOutput());
			preparedStatement.setInt(22, portInst.getExpMappingELspInput());
			preparedStatement.setInt(23, portInst.getExpMappingELspOutput());
			preparedStatement.setInt(24, portInst.getMappingVlanpriToColor());
			preparedStatement.setInt(25, portInst.getMappingPriorityToVlanpri());
			preparedStatement.setInt(26, portInst.getIsEnabledLaser());
			if (portInst.getSnmpName() != null && !portInst.getSnmpName().equals("")) {
				preparedStatement.setString(27, portInst.getSnmpName());
			}else{
				preparedStatement.setString(27, portInst.getPortName());
			}
			preparedStatement.setInt(28, portInst.getIsEnabledAlarmReversal());
			preparedStatement.setInt(29, portInst.getServicePort());
			preparedStatement.setString(30, portInst.getPriority());
			preparedStatement.setInt(31, portInst.getPortId());
			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 修改portInst的状态
	 * 
	 * @param portInst
	 *            实体
	 * @param connection
	 *            数据库连接
	 * @return 修改的记录数
	 * @throws Exception
	 */
	public int updatestatus(PortInst portInst, Connection connection) throws Exception {
		if (null == portInst) {
			throw new Exception("portInst is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "update port_inst set isEnabled_code = ?,jobstatus=? where portId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, portInst.getIsEnabled_code());
			preparedStatement.setString(2, portInst.getJobStatus());
			preparedStatement.setInt(3, portInst.getPortId());
			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 通过主键删除port_inst
	 * 
	 * @param id
	 *            主键
	 * @param connection
	 *            数据库连接
	 * @return 删除的记录数
	 * @throws Exception
	 */
	public int delete(int portId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "delete from port_inst where portId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, portId);

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 删除通过网元ID
	 * @param siteId
	 * 			网元ID
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int deleteBySiteId(int siteId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "delete from port_inst where siteId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 通过对象删除（cardID）
	 * 
	 * @param portInst
	 *            对象
	 * @param connection
	 *            数据库连接
	 * @return 删除的记录数
	 * @throws Exception
	 */
	public int delete(PortInst portInst, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "delete from port_inst where cardId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, portInst.getCardId());

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 查询子端口
	 * @param parentPortId
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<PortInst> quertyChildPort(int parentPortId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		List<PortInst> portinstList = null;
		String sql = null;

		try {
			sql = "select *  from port_inst where parentId=" + parentPortId;
			portinstList = this.excuteQuery(sql, connection);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return portinstList;
	}

	/**
	 * 通过网元ID和端口名称查询
	 * @param siteId
	 * @param portName
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<PortInst> quertyPortbySiteandName(int siteId, String portName, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		List<PortInst> portinstList = null;
		String sql = null;
		try {
			sql = "select *  from port_inst where siteId=" + siteId + " and portName ='" + portName + "'";
			portinstList = this.excuteQuery(sql, connection);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return portinstList;
	}
	
	public List<PortInst> quertyNNIPortbySiteId(int siteId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		List<PortInst> portinstList = null;
		String sql = null;
		try {
			sql = "select *  from port_inst where siteId=" + siteId + " and portType ='NNI'";
			portinstList = this.excuteQuery(sql, connection);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return portinstList;
	}

	/**
	 * 根据条件查询port_inst
	 * 
	 * @param portinstCondition
	 *            查询条件
	 * @param connection
	 *            数据库连接
	 * @return List<PortInst> 集合
	 * @throws Exception
	 */
	public List<PortInst> queryByCondition(PortInst portinstCondition, Connection connection) throws Exception {

		if (null == portinstCondition) {
			throw new Exception("portinstCondition is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<PortInst> portinstList = null;
		String sql = null;

		try {
			sql = "select * from port_inst where parentId=0";

			if (portinstCondition.getPortId() > 0) {
				sql += " and portId=" + portinstCondition.getPortId();
			}

			if (portinstCondition.getCardId() > 0) {
				sql += " and cardId=" + portinstCondition.getCardId();
			}

			if (portinstCondition.getEquipId() > 0) {
				sql += " and equipId=" + portinstCondition.getEquipId();
			}

			if (portinstCondition.getSiteId() > 0) {
				sql += " and siteId=" + portinstCondition.getSiteId();
			}

			if (null != portinstCondition.getPortType() && !"".equals(portinstCondition.getPortType())) {
				sql += " and porttype = " + DButil.toSingleMark(portinstCondition.getPortType());
			}

			if (portinstCondition.getIsOccupy() > 0) {
				sql += " and isOccupy=" + portinstCondition.getIsOccupy();
			}
			if (portinstCondition.getPortName() != null && !portinstCondition.getPortName().equals("")) {
				sql += " and portName='" + portinstCondition.getPortName() + "'";
			}
			if (portinstCondition.getNumber() > 0) {
				sql += " and number='" + portinstCondition.getNumber() + "'";
			}
			if (portinstCondition.getLagId() > 0) {
				sql += " and lagId=" + portinstCondition.getLagId();
			}
			if (portinstCondition.getExpMappingLLspInput() > 0) {
				sql += " and expmappingllspinput=" + portinstCondition.getExpMappingLLspInput();
			}
			if (portinstCondition.getExpMappingLLspOutput() > 0) {
				sql += " and expmappingllspoutput=" + portinstCondition.getExpMappingLLspOutput();
			}
			if (portinstCondition.getExpMappingELspInput() > 0) {
				sql += " and expmappingelspinput=" + portinstCondition.getExpMappingELspInput();
			}
			if (portinstCondition.getExpMappingELspOutput() > 0) {
				sql += " and expmappingelspoutput=" + portinstCondition.getExpMappingELspOutput();
			}
			if (portinstCondition.getMappingVlanpriToColor() > 0) {
				sql += " and mappingVlanpriToColor=" + portinstCondition.getMappingVlanpriToColor();
			}
			if (portinstCondition.getMappingPriorityToVlanpri() > 0) {
				sql += " and mappingPriorityToVlanpri=" + portinstCondition.getMappingPriorityToVlanpri();
			}
			if (portinstCondition.getSnmpName() != null && !portinstCondition.getSnmpName().equals("")) {
				sql += " and snmpName='" + portinstCondition.getSnmpName() + "'";
			}
			sql += " order by slotnumber asc";
			portinstList = this.excuteQuery(sql, connection);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return portinstList;
	}

	private List<PortInst> excuteQuery(String sql, Connection connection) throws Exception {
		List<PortInst> portinstList = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		PortInst portinst = null;

		try {
			portinstList = new ArrayList<PortInst>();
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				portinst = new PortInst();
				portinst.setPortId(resultSet.getInt("portId"));
				portinst.setCardId(resultSet.getInt("cardId"));
				portinst.setEquipId(resultSet.getInt("equipId"));
				portinst.setSiteId(resultSet.getInt("siteId"));
				portinst.setPortName(resultSet.getString("portName"));
				portinst.setPortType(resultSet.getString("portType"));
				portinst.setPortStatus(resultSet.getString("portStatus"));
				portinst.setBandwidth(resultSet.getString("bandwidth"));
				portinst.setManageStatus(resultSet.getInt("manageStatus"));
				portinst.setJobStatus(resultSet.getString("jobStatus"));
				portinst.setImagePath(resultSet.getString("imagePath"));
				portinst.setPortx(resultSet.getInt("portx"));
				portinst.setPorty(resultSet.getInt("porty"));
				portinst.setIsOccupy(resultSet.getInt("isOccupy"));
				portinst.setNumber(resultSet.getInt("number"));
				portinst.setSlotNumber(resultSet.getInt("slotnumber"));
				portinst.setIsEnabled_code(resultSet.getInt("isEnabled_code"));
				portinst.setParentId(resultSet.getInt("parentId"));
				portinst.setLagId(resultSet.getInt("lagId"));
				portinst.setLagNumber(resultSet.getInt("lagNumber"));
				portinst.setLinecoding(resultSet.getString("linecoding"));
				portinst.setImpedance(resultSet.getInt("impedance"));
				portinst.setMacAddress(resultSet.getString("macAddress"));
				portinst.setIsEnabled_QinQ(resultSet.getInt("qinqEnabled"));
				portinst.setExpMappingLLspInput(resultSet.getInt("expMappingLLspInput"));
				portinst.setExpMappingLLspOutput(resultSet.getInt("expMappingLLspOutput"));
				portinst.setExpMappingELspInput(resultSet.getInt("expMappingELspInput"));
				portinst.setExpMappingELspOutput(resultSet.getInt("expMappingELspOutput"));
				portinst.setMappingVlanpriToColor(resultSet.getInt("MappingVlanpriToColor"));
				portinst.setMappingPriorityToVlanpri(resultSet.getInt("MappingPriorityToVlanpri"));
				portinst.setManageStatus(resultSet.getInt("ManageStatus"));
				portinst.setIsEnabledLaser(resultSet.getInt("laserEnabled"));
				portinst.setModuleType(resultSet.getString("moduleType"));
				portinst.setSnmpName(resultSet.getString("snmpName"));
				portinst.setIsEnabledAlarmReversal(resultSet.getInt("alarmReversalEnabled"));
				portinst.setServicePort(resultSet.getInt("servicePort"));
				portinst.setPriority(resultSet.getString("priority"));
				portinstList.add(portinst);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			portinst = null;
		}

		return portinstList;
	}

	/**
	 * 批量修改状态
	 */
	public void updateOccupyByIdList(List<Integer> idList, int isOccupy, Connection connection) throws Exception {
		if (null == idList) {
			throw new Exception("idList is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			sql = "update port_inst set isOccupy=? where portId in (" + idList.toString().substring(1, idList.toString().length() - 1) + ")";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, isOccupy);
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}

	}

	
	public List<PortInst> queryByIsOccupy(PortInst portinstCondition, Connection connection) throws Exception {
		if (null == portinstCondition) {
			throw new Exception("portinstCondition is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<PortInst> portinstList = null;
		String sql = null;

		try {
			sql = "select * from port_inst where parentId=0";

			if (null != portinstCondition.getPortType() && !"".equals(portinstCondition.getPortType())) {
				sql += " and porttype <> " + DButil.toSingleMark(portinstCondition.getPortType());
			}
			if (portinstCondition.getCardId() > 0) {
				sql += " and cardId=" + portinstCondition.getCardId();
			}
			sql += " order by portname";
			portinstList = this.excuteQuery(sql, connection);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return portinstList;
	}

	/**
	 * 通过端口ID查询
	 * @param portid
	 * 			端口ID
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public PortInst selectPortybyid(int portid, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		List<PortInst> portinstList = null;
		String sql = null;

		try {
			sql = "select * from port_inst where parentId=0";
			sql += " and portId=" + portid;
			portinstList = this.excuteQuery(sql, connection);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}

		if (portinstList != null && portinstList.size() > 0) {
			return portinstList.get(0);
		}

		return null;
	}

	/**
	 * 同步时 修改数据库。
	 * 
	 * @author kk
	 * 
	 * @param
	 * 
	 * @return
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	public void update_synchro(PortInst portInst, Connection connection) throws Exception {

		if (null == portInst) {
			throw new Exception("portInst is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		PreparedStatement preparedStatement = null;
		try {
			preparedStatement = connection.prepareStatement(this.SQL_UPDATE_SYNCHRO);
			preparedStatement.setString(1, portInst.getPortType());
			preparedStatement.setString(2, portInst.getJobStatus());
			preparedStatement.setInt(3, portInst.getIsEnabled_code());
			preparedStatement.setString(4, portInst.getMacAddress());
			preparedStatement.setInt(5, portInst.getExpMappingLLspInput());
			preparedStatement.setInt(6, portInst.getExpMappingLLspOutput());
			preparedStatement.setInt(7, portInst.getExpMappingELspInput());
			preparedStatement.setInt(8, portInst.getExpMappingELspOutput());
			preparedStatement.setInt(9, portInst.getMappingVlanpriToColor());
			preparedStatement.setInt(10, portInst.getMappingPriorityToVlanpri());
			preparedStatement.setInt(11, portInst.getIsEnabled_QinQ());
			preparedStatement.setInt(12, portInst.getIsEnabledLaser());
			preparedStatement.setInt(13, portInst.getServicePort());
			preparedStatement.setString(14, portInst.getPriority());
			preparedStatement.setInt(15, portInst.getPortId());
			
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
	}

	/**
	 * 修改状态
	 * @param siteId
	 * 			网元ID
	 * @param status
	 * 			状态
	 * @param portType
	 * 			端口类型
	 * @param connection
	 * @throws Exception
	 */
	public void updateStatus(int siteId, int status, String portType, Connection connection) throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			sql = "update port_inst set isEnabled_code=? where siteId = ? and portType=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, status);
			preparedStatement.setInt(2, siteId);
			preparedStatement.setString(3, portType);
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
	}
	
	/**
	 * 通过ID来查询所有的端口
	 * @param ids
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<PortInst> quertyAllPortByIds(List<Integer> ids, int siteId,Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		List<PortInst> portinstList = null;
		String sql = null;

		try {
			sql = "select *  from port_inst where  portId in (" + ids.toString().substring(1, ids.toString().length() - 1) + ") and siteId="+siteId;
			portinstList = this.excuteQuery(sql, connection);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return portinstList;
	}
	/**
	 * 通过ID来查询所有的端口
	 * @param ids
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<String> quertyAllPortNameByNumber(List<Integer> ids, int siteId,Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		List<String> portNames = null;
		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			sql = "select portName  from port_inst where  number in (" + ids.toString().substring(1, ids.toString().length() - 1) + ") and siteId="+siteId;
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			portNames = new ArrayList<String>();
			while(resultSet.next())
			{
				portNames.add(resultSet.getString("portName"));
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return portNames;
	}
	
	public List<PortInst> quertyUniOrE1PortbySiteId(int siteId,String type, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		List<PortInst> portinstList = null;
		String sql = null;
		try {
			if(type.equals("CES")){
			sql = "select *  from port_inst where siteId=" + siteId + " and portType ='e1'";
			}else{
			sql = "select *  from port_inst where siteId=" + siteId + " and portType ='UNI'";	
			}
			portinstList = this.excuteQuery(sql, connection);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return portinstList;
	}

}