package com.nms.db.dao.system;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.DbInfoTask;
import com.nms.db.bean.system.DataBaseInfo;
import com.nms.ui.manager.ExceptionManage;

public class DataBaseDao {

	/**
	 * 查询数据库信息 或 数据库表的信息
	 * @param tableName
	 * @param connection 
	 * @param label 1:查询数据库  2:查询数据库表
	 * @return
	 */
	public DataBaseInfo slectTableInfo(String tableName,Connection connection,int label){
		
		String sql = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		DataBaseInfo dataBaseInfo = new DataBaseInfo();
		DecimalFormat df = null;
		try {
			if(label == 1){
				//查询数据库信息
				sql = "SELECT CONCAT(TRUNCATE(SUM(data_length)/1024/1024,2)) AS dataSize," +
				"CONCAT(TRUNCATE(SUM(max_data_length)/1024/1024,2)) AS maxDataSize, " +
				"CONCAT(TRUNCATE(SUM(data_free)/1024/1024,2)) AS dataFree," +
				"CONCAT(TRUNCATE(SUM(index_length)/1024/1024,2)) AS indexSize " +
				"FROM information_schema.tables WHERE TABLE_SCHEMA ="+"'"+tableName+"'";
			}else if(label == 2){
				//数据库表的信息
				sql= "SELECT CONCAT(TRUNCATE(SUM(data_length)/1024,1)) AS dataSize," +
						"CONCAT(TRUNCATE(SUM(max_data_length)/1024,1)) AS maxDataSize," +
						"CONCAT(TRUNCATE(SUM(data_free)/1024,1)) AS dataFree," +
						"CONCAT(TRUNCATE(SUM(index_length)/1024,1)) AS indexSize " +
						"FROM information_schema.tables WHERE TABLE_NAME ="+"'"+tableName+"'";
			}
			
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			df = new DecimalFormat("######0.00"); 
			double countSize = 0.0;
			while(resultSet.next()){
				dataBaseInfo.setName(tableName);
				dataBaseInfo.setDataSize(resultSet.getDouble("dataSize"));
				dataBaseInfo.setFreeSize(resultSet.getDouble("dataFree"));
				dataBaseInfo.setIndexSize(resultSet.getDouble("indexSize"));
				if(resultSet.getDouble("maxDataSize") == 0)
				{
					countSize = resultSet.getDouble("dataSize")+resultSet.getDouble("dataFree")+resultSet.getDouble("indexSize");
					dataBaseInfo.setCountSize(Double.parseDouble(df.format(countSize)));
				}else{
					dataBaseInfo.setCountSize(resultSet.getDouble("maxDataSize"));
				}
				dataBaseInfo.setMointorLevel(1);
			}
			
		} catch (Exception e) {
			ExceptionManage.dispose(e, getClass());
		}finally{
			df = null;
			if(resultSet != null){
				try {
					resultSet.close();
				} catch (Exception e2) {
					ExceptionManage.dispose(e2, getClass());
				}finally{
					resultSet = null;
				}
			}
			if(preparedStatement != null){
				try {
					preparedStatement.close();
				} catch (Exception e2) {
					ExceptionManage.dispose(e2, getClass());
				}finally{
					preparedStatement = null;
				}
			}
			sql = null;
		}
		return dataBaseInfo;
	}
	
	/**
	 *  数据库表的信息的总记录数
	 * @param tableName
	 * @param connection 
	 * @param label 1:查询数据库  2:查询数据库表
	 * @return
	 */
	public int countTableInfo(String tableName,Connection connection){
		
		String sql = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		int resultCount = 0;
		try {
			//数据库表的信息   SELECT count(*) as count FROM warninglevel
			sql= "SELECT count(*) as count FROM "+tableName;
			
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			while(resultSet.next()){
				resultCount = resultSet.getInt("count");
			}
			
		} catch (Exception e) {
			ExceptionManage.dispose(e, getClass());
		}finally{
			if(resultSet != null){
				try {
					resultSet.close();
				} catch (Exception e2) {
					ExceptionManage.dispose(e2, getClass());
				}finally{
					resultSet = null;
				}
			}
			if(preparedStatement != null){
				try {
					preparedStatement.close();
				} catch (Exception e2) {
					ExceptionManage.dispose(e2, getClass());
				}finally{
					preparedStatement = null;
				}
			}
			sql = null;
		}
		return resultCount;
	}
	
	public void  getMointorDbAlarmLimit(DbInfoTask dbInfoTask,Connection connection,DataBaseInfo dataBaseInfo,String mointorType)
	{
		String sql = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		List<DataBaseInfo> dataBaseInfoList = null;
		try {
			dataBaseInfoList = new ArrayList<DataBaseInfo>();
			sql= "SELECT * FROM ptnDb_instPath where mointorType="+dbInfoTask.getMointorType();
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			while(resultSet.next())
			{
				dbInfoTask.setId(resultSet.getInt("ptnDb_instPath_id"));
				if("true".equalsIgnoreCase(resultSet.getString("mointorTypeDB"))){
					dbInfoTask.setMointorTypeDb(true);
				}else{
					dbInfoTask.setMointorTypeDb(false);
				}
				if("true".equalsIgnoreCase(resultSet.getString("mointorTotalDB"))){
					dbInfoTask.setMointorTotal(true);
				}else{
					dbInfoTask.setMointorTotal(false);
				}
				dbInfoTask.setMiintorCycle(resultSet.getInt("mointorCycle"));
				dbInfoTask.setTotalDbSpace(resultSet.getInt("totalSize"));
			}
			/***************数据库表的告警门限值**********************/
			sql = "SELECT * FROM ptnDb_inst where ptnDb_instPath_id="+dbInfoTask.getId();
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			while(resultSet.next())
			{
				if(!mointorType.equals("1")){
					dataBaseInfo = new DataBaseInfo();
				}
				dataBaseInfo.setId(resultSet.getInt("ptnDb_inst_id"));
				dataBaseInfo.setPathId(dbInfoTask.getId());
				dataBaseInfo.setMointorType(resultSet.getInt("mointorType"));
				dataBaseInfo.setName(resultSet.getString("tableName"));
				dataBaseInfo.setCriticalRate(resultSet.getString("criticalLimit"));
				dataBaseInfo.setMajorRate(resultSet.getString("majorLimit"));
				dataBaseInfo.setMinorRate(resultSet.getString("minorLimit"));
				dataBaseInfo.setWarningRate(resultSet.getString("warningLimit"));
				dataBaseInfo.setMointorLevel(resultSet.getInt("montorLevel"));
				dataBaseInfoList.add(dataBaseInfo);
			}
			if(dbInfoTask.getId() >0)
			{
				dbInfoTask.setDaTableList(dataBaseInfoList);
			}else if(dbInfoTask.getId() == 0 && mointorType.equals("1")){
				dataBaseInfoList.add(dataBaseInfo);
				dbInfoTask.setDaTableList(dataBaseInfoList);
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e, getClass());
		}finally{
			if(resultSet != null)
			{
				try 
				{
					resultSet.close();
				} catch (Exception e2) 
				{
					ExceptionManage.dispose(e2, getClass());
				}finally{
					resultSet = null;
				}
			}
			if(preparedStatement != null)
			{
				try 
				{
					preparedStatement.close();
				} catch (Exception e2) 
				{
					ExceptionManage.dispose(e2, getClass());
				}finally
				{
					preparedStatement = null;
				}
			}
			sql = null;
		}
	}
	
	public void update(DbInfoTask dbInfoTask,Connection connection)
	{
		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			sql= "update ptnDb_instPath set mointorTypeDB=?,mointorTotalDB=?,mointorCycle=?,totalSize=?,mointorType=?where ptnDb_instPath_id=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, dbInfoTask.isMointorTypeDb()?"true":"false");
			preparedStatement.setString(2, dbInfoTask.isMointorTotal()?"true":"false");
			preparedStatement.setString(3, dbInfoTask.getMiintorCycle()+"");
			preparedStatement.setString(4, dbInfoTask.getTotalDbSpace()+"");
			preparedStatement.setString(5, dbInfoTask.getMointorType());
			preparedStatement.setInt(6, dbInfoTask.getId());
			preparedStatement.executeUpdate();
			
			/***************数据库表的告警门限值**********************/
			if(dbInfoTask.getDaTableList() != null && dbInfoTask.getDaTableList().size()>0){
				sql= "update  ptnDb_inst set tableName=?,criticalLimit=?,majorLimit=?,minorLimit=?,warningLimit=?,mointorType=?,montorLevel=? where ptnDb_inst_id = ?";
				connection.setAutoCommit(false);
				for(DataBaseInfo dataBaseInfo : dbInfoTask.getDaTableList()){
					preparedStatement = connection.prepareStatement(sql);
					preparedStatement.setString(1, dataBaseInfo.getName());
					preparedStatement.setString(2, dataBaseInfo.getCriticalRate());
					preparedStatement.setString(3, dataBaseInfo.getMajorRate());
					preparedStatement.setString(4, dataBaseInfo.getMinorRate());
					preparedStatement.setString(5, dataBaseInfo.getWarningRate());
					preparedStatement.setInt(6, dataBaseInfo.getMointorType());
					preparedStatement.setInt(7, dataBaseInfo.getMointorLevel());
					preparedStatement.setInt(8, dataBaseInfo.getId());
					preparedStatement.executeUpdate();
				}
			}
			
		} catch (Exception e) {
			try {
				connection.rollback();
			} catch (SQLException e1) {
				ExceptionManage.dispose(e1, getClass());
			}
		}finally{
			try {
				if(!connection.getAutoCommit()){
					connection.setAutoCommit(true);
				}
			} catch (Exception e2) {
				ExceptionManage.dispose(e2, getClass());
			}
			if(preparedStatement != null)
			{
				try 
				{
					preparedStatement.close();
				} catch (Exception e2) 
				{
					ExceptionManage.dispose(e2, getClass());
				}finally
				{
					preparedStatement = null;
				}
			}
			sql = null;
		}
	}
	
	public void insert(DbInfoTask dbInfoTask,Connection connection)
	{
		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int id = 0;
		try {
			sql= "insert into ptnDb_instPath(mointorTypeDB,mointorTotalDB,mointorCycle,totalSize,mointorType) value(?,?,?,?,?)";
			preparedStatement = connection.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setString(1, dbInfoTask.isMointorTypeDb()?"true":"false");
			preparedStatement.setString(2, dbInfoTask.isMointorTotal()?"true":"false");
			preparedStatement.setString(3, dbInfoTask.getMiintorCycle()+"");
			preparedStatement.setString(4, dbInfoTask.getTotalDbSpace()+"");
			preparedStatement.setString(5, dbInfoTask.getMointorType());
			preparedStatement.executeUpdate();
			
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				id = resultSet.getInt(1);
			}
			/***************数据库表的告警门限值**********************/
			if(dbInfoTask.getDaTableList() != null && dbInfoTask.getDaTableList().size()>0){
				connection.setAutoCommit(false);
				sql= "insert into ptnDb_inst(ptnDb_instPath_id,tableName,criticalLimit,majorLimit,minorLimit,warningLimit,mointorType,montorLevel) value(?,?,?,?,?,?,?,?)";
				for(int i =0; i <dbInfoTask.getDaTableList().size(); i++){
					preparedStatement = connection.prepareStatement(sql);
					preparedStatement.setInt(1, id);
					preparedStatement.setString(2, dbInfoTask.getDaTableList().get(i).getName());
					preparedStatement.setString(3, dbInfoTask.getDaTableList().get(i).getCriticalRate());
					preparedStatement.setString(4, dbInfoTask.getDaTableList().get(i).getMajorRate());
					preparedStatement.setString(5, dbInfoTask.getDaTableList().get(i).getMinorRate());
					preparedStatement.setString(6, dbInfoTask.getDaTableList().get(i).getWarningRate());
					preparedStatement.setInt(7, dbInfoTask.getDaTableList().get(i).getMointorType());
					preparedStatement.setInt(8, dbInfoTask.getDaTableList().get(i).getMointorLevel());
					preparedStatement.executeUpdate();
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			try {
				connection.rollback();
			} catch (SQLException e1) {
				ExceptionManage.dispose(e1, getClass());
			}
		}finally{
			try {
				if(!connection.getAutoCommit()){
					connection.setAutoCommit(true);
				}
			} catch (SQLException e) {
				ExceptionManage.dispose(e, getClass());
			}
			if(resultSet != null)
			{
				try 
				{
					resultSet.close();
				} catch (Exception e2) 
				{
					ExceptionManage.dispose(e2, getClass());
				}finally
				{
					resultSet = null;
				}
			}
			if(preparedStatement != null)
			{
				try 
				{
					preparedStatement.close();
				} catch (Exception e2) 
				{
					ExceptionManage.dispose(e2, getClass());
				}finally
				{
					preparedStatement = null;
				}
			}
			sql = null;
		}
	}
}
