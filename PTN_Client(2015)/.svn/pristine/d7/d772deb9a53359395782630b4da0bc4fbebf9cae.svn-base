package com.nms.db.dao.ptn.qos;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.qos.QosTemplateInfo;
import com.nms.ui.manager.ExceptionManage;

public class QosTemplateDao {

	/**
	 * 新增qosTemplate
	 * 
	 * @param qosTemplate
	 *            插入实体对象
	 * @param connection
	 *            数据库链接
	 * @return 插入记录数
	 * @throws Exception
	 */
	public int insert(QosTemplateInfo qosTemplate, Connection conn)
			throws Exception {
		if (qosTemplate == null) {
			throw new Exception("code is null");
		}
		if (conn == null) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "insert into qosTemplateInfo(templateName,qosType,seq,cos,direction,"
					+ "cir,cbs,eir,ebs,pir,pbs,strategy,colorSense) values(?,?,?,?,?,?,?,?,?,?,?,?,?)";
			preparedStatement = conn.prepareStatement(sql);
			preparedStatement.setString(1, qosTemplate.getTemplateName());
			preparedStatement.setString(2, qosTemplate.getQosType());
			preparedStatement.setInt(3, qosTemplate.getSeq());
			preparedStatement.setInt(4, qosTemplate.getCos());
			preparedStatement.setString(5, qosTemplate.getDirection());
			preparedStatement.setInt(6, qosTemplate.getCir());
			preparedStatement.setInt(7, qosTemplate.getCbs());
			preparedStatement.setInt(8, qosTemplate.getEir());
			preparedStatement.setInt(9, qosTemplate.getEbs());
			preparedStatement.setInt(10, qosTemplate.getPir());
			preparedStatement.setInt(11, qosTemplate.getPbs());
			preparedStatement.setInt(12, qosTemplate.getStrategy());
			preparedStatement.setInt(13, qosTemplate.getColorSence());
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 删除qosTemplate
	 * 
	 * @param connection
	 *            数据库链接
	 * @return 删除记录数
	 * @throws Exception
	 * @throws Exception
	 */
	public int delete(String templateName , String qosType , Connection conn)
			throws Exception {

		if (null == conn) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = " delete from qosTemplateInfo where templateName = ? and qosType = ?";
			preparedStatement = conn.prepareStatement(sql);
			preparedStatement.setString(1, templateName);
			preparedStatement.setString(2, qosType);
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 修改qosTemplate
	 * 
	 * @param qosTemplate
	 *            
	 * @param connection
	 *            连接数据库
	 * @return 修改的条数
	 * @throws Exception
	 * @throws Exception
	 */
	public int update(QosTemplateInfo qosTemplate, Connection conn)
			throws Exception {
		if (null == conn) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = " update qosTemplateInfo set templateName=? , qosType = ? , seq = ?" +
					" , cos = ? , direction = ? , cir = ? , cbs = ? , eir = ? , ebs = ?" +
					" , pir = ? , pbs = ? , strategy = ? , colorSense = ?  where id = ?";
			preparedStatement = conn.prepareStatement(sql);
			preparedStatement.setString(1, qosTemplate.getTemplateName());
			preparedStatement.setString(2, qosTemplate.getQosType());
			preparedStatement.setInt(3, qosTemplate.getSeq());
			preparedStatement.setInt(4, qosTemplate.getCos());
			preparedStatement.setString(5, qosTemplate.getDirection());
			preparedStatement.setInt(6, qosTemplate.getCir());
			preparedStatement.setInt(7, qosTemplate.getCbs());
			preparedStatement.setInt(8, qosTemplate.getEir());
			preparedStatement.setInt(9, qosTemplate.getEbs());
			preparedStatement.setInt(10, qosTemplate.getPir());
			preparedStatement.setInt(11, qosTemplate.getPbs());
			preparedStatement.setInt(12, qosTemplate.getStrategy());
			preparedStatement.setInt(13, qosTemplate.getColorSence());
			preparedStatement.setInt(14, qosTemplate.getId());
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}
	
	/*
	 * 查询全部模板
	 * */
	public List<QosTemplateInfo> select(Connection conn) throws Exception{
		if (null == conn) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<QosTemplateInfo> templateList = null;
		QosTemplateInfo templateInfo = null;
		
		try {
			templateList = new ArrayList<QosTemplateInfo>();
			sql = " select * from qosTemplateInfo where 1 = 1";
			preparedStatement = conn.prepareStatement(sql);
		    resultSet = preparedStatement.executeQuery();
		    
		    while(resultSet.next()){
		    	templateInfo = new QosTemplateInfo();
		    	templateInfo.setId( resultSet.getInt("id"));
		    	templateInfo.setTemplateName(resultSet.getString("templateName"));
		    	templateInfo.setQosType(resultSet.getString("qosType"));
		    	templateInfo.setSeq(resultSet.getInt("seq"));
		    	templateInfo.setCos(resultSet.getInt("cos"));
		    	templateInfo.setDirection(resultSet.getString("direction"));
		    	templateInfo.setCir(resultSet.getInt("cir"));
		    	templateInfo.setCbs(resultSet.getInt("cbs"));
		    	templateInfo.setEir(resultSet.getInt("eir"));
		    	templateInfo.setEbs(resultSet.getInt("ebs"));
		    	templateInfo.setPir(resultSet.getInt("pir"));
		    	templateInfo.setPbs(resultSet.getInt("pbs"));
		    	templateInfo.setStrategy(resultSet.getInt("strategy"));
		    	templateInfo.setColorSence(resultSet.getInt("colorSense"));
		    	templateList.add(templateInfo);
		    }
		} catch (Exception e) {
			throw e;
		} finally {
			if(null != resultSet){
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return templateList;
	}
	
	/*
	 * 根据模板名称和类型查询
	 * */
	public List<QosTemplateInfo> queryByCondition(String templateName,
			Connection conn) throws Exception{
		if (null == conn) {
			throw new Exception("connection is null");
		}
		StringBuffer sql = new StringBuffer();
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<QosTemplateInfo> templateList = null;
		QosTemplateInfo templateInfo = null;
		
		try {
			templateList = new ArrayList<QosTemplateInfo>();
			sql.append(" select * from qosTemplateInfo where templateName = ?");
			
			preparedStatement = conn.prepareStatement(sql.toString());
			preparedStatement.setString(1, templateName);
		
			resultSet = preparedStatement.executeQuery();
		    
		    while(resultSet.next()){
		    	templateInfo = new QosTemplateInfo();
		    	templateInfo.setId( resultSet.getInt("id"));
		    	templateInfo.setTemplateName(resultSet.getString("templateName"));
		    	templateInfo.setQosType(resultSet.getString("qosType"));
		    	templateInfo.setSeq(resultSet.getInt("seq"));
		    	templateInfo.setCos(resultSet.getInt("cos"));
		    	templateInfo.setDirection(resultSet.getString("direction"));
		    	templateInfo.setCir(resultSet.getInt("cir"));
		    	templateInfo.setCbs(resultSet.getInt("cbs"));
		    	templateInfo.setEir(resultSet.getInt("eir"));
		    	templateInfo.setEbs(resultSet.getInt("ebs"));
		    	templateInfo.setPir(resultSet.getInt("pir"));
		    	templateInfo.setPbs(resultSet.getInt("pbs"));
		    	templateInfo.setStrategy(resultSet.getInt("strategy"));
		    	templateInfo.setColorSence(resultSet.getInt("colorSense"));
		    	templateList.add(templateInfo);
		    }
		} catch (Exception e) {
			throw e;
		} finally {
			if(null != resultSet){
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return templateList;
		
	}
	
	/*
	 * 根据Id查询
	 * */
	public List<QosTemplateInfo> queryByIdList(List<Integer> idList,
			Connection conn) throws Exception{
		if (null == conn) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		StringBuffer idString = null;
		List<QosTemplateInfo> templateList = null;
		QosTemplateInfo temp = null;
		try {
			idString=new StringBuffer();
			templateList = new ArrayList<QosTemplateInfo>();
			for(int id : idList){
				idString.append(id + ",");
			}
			sql = " select id from qosTemplateInfo where id in (" + 
				idString.substring(0, idString.lastIndexOf(","))+ ")";
			preparedStatement = conn.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
		    
			while(resultSet.next()){
				temp = new QosTemplateInfo();
				temp.setId(resultSet.getInt("id"));
				templateList.add(temp);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if(null != resultSet){
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return templateList;
		
	}
	
	/*@Test
	public void testT(){
		StringBuffer idString = new StringBuffer("1,2,3,43,3");
		String ids = idString.substring(0, idString.lastIndexOf(","));
		System.out.println(ids);
	}*/
}
