package com.nms.model.ptn.path.eth;

import java.util.List;

import org.apache.ibatis.session.SqlSession;

import com.nms.db.bean.ptn.path.eth.ElineInfo;
import com.nms.db.dao.ptn.path.eth.ElineInfoMapper;
import com.nms.model.util.ObjectService_Mybatis;
import com.nms.ui.manager.DateUtil;
import com.nms.ui.manager.ExceptionManage;

public class ElineInfoService_MB extends ObjectService_Mybatis {
	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}

	public void setSqlSession(SqlSession sqlSession) {
		super.sqlSession = sqlSession;
	}

	private ElineInfoMapper mapper;

	public ElineInfoMapper getElineInfoMapper() {
		return mapper;
	}

	public void setElineInfoMapper(ElineInfoMapper ElineInfoMapper) {
		this.mapper = ElineInfoMapper;
	}

	public List<ElineInfo> selectByCondition(ElineInfo eline) {
		List<ElineInfo> elineinfoList = null;
		try {
			elineinfoList = this.mapper.queryByCondition(eline);
			if (elineinfoList != null && !elineinfoList.isEmpty()) {
				for (ElineInfo elineInfo : elineinfoList) {
					elineInfo.setCreateTime(DateUtil.strDate(elineInfo.getCreateTime(), DateUtil.FULLTIME));
				}
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}
		return elineinfoList;
	}

	public List<ElineInfo> selectBySiteId(int siteId) {
		List<ElineInfo> elineinfoList = null;
		try {
			elineinfoList = this.mapper.selectBySiteId(siteId);
			if (elineinfoList != null && !elineinfoList.isEmpty()) {
				for (ElineInfo elineInfo : elineinfoList) {
					elineInfo.setCreateTime(DateUtil.strDate(elineInfo.getCreateTime(), DateUtil.FULLTIME));
				}
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}
		return elineinfoList;
	}

	public Object selectElineByCondition(ElineInfo elineInfo) {
		List<ElineInfo> elineinfoList = null;
		try {
			elineinfoList = mapper.querySingleByCondition(elineInfo);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
		}
		return elineinfoList;
	}

	/**
	 * 根据网元查询此网元下所有单网元eline业务
	 * @param siteId 网元主键
	 * @return 
	 * @throws Exception
	 */
	public List<ElineInfo> selectBySite_node(int siteId) throws Exception{
		return this.mapper.selectBySiteAndisSingle(siteId, 1);
	}
	
	/**
	 * 根据网元查询此网元下所有网络eline业务
	 * @param siteId 网元主键
	 * @return 
	 * @throws Exception
	 */
	public List<ElineInfo> selectBySite_network(int siteId) throws Exception{
		return this.mapper.selectBySiteAndisSingle(siteId, 0);
	}
	
}
