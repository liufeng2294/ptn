package com.nms.db.dao.ptn.path.eth;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.path.eth.DualInfo;
import com.nms.db.enums.EServiceType;
import com.nms.ui.manager.DateUtil;
import com.nms.ui.manager.ExceptionManage;

public class DualDao {
	
	/**
	 * 插入Sql
	 */
	private final String INSERTSQL = "insert into serviceinfo(serviceId,pwId,serviceType," + "name,aXcId,zXcId,activeStatus,rootSite,branchMainSite,branchProtectSite ,aAcId , zAcId , createUser , createTime,issingle,jobstatus,clientId,asiteid,zsiteid ) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

	/**
	 * 更新Sql
	 */
	private final String UPDATESQL = "update serviceinfo set serviceId=?," + "pwId=?,name=?,aXcId=?,zXcId=?,activeStatus=?,rootSite=?,branchMainSite=? ,branchProtectSite=?"+ ",createUser=? ,createTime=? , jobstatus=? ,isSingle=? where id=? and serviceType=?";
	/**
	 * 删除Sql
	 */
	private final String DELETESQL = "delete from serviceInfo where id=? and serviceType = ?";
	
	
	/**
	 * 新增
	 * @param connection
	 * @param dualInfo
	 * @return
	 * @throws Exception
	 */
	public int insert(Connection connection ,DualInfo dualInfo) throws Exception{
		if (null == dualInfo) {
			throw new Exception("dualInfo is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		int result = 0;
	
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		try {
			sql = INSERTSQL;
			preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, dualInfo.getServiceId());
			preparedStatement.setInt(2, dualInfo.getPwId());
			preparedStatement.setInt(3, dualInfo.getServiceType());
			preparedStatement.setString(4, dualInfo.getName());
			preparedStatement.setInt(5, dualInfo.getaXcId());
			preparedStatement.setInt(6, dualInfo.getzXcId());
			preparedStatement.setInt(7, dualInfo.getActiveStatus());
			preparedStatement.setInt(8, dualInfo.getRootSite());
			preparedStatement.setInt(9, dualInfo.getBranchMainSite());
			preparedStatement.setInt(10, dualInfo.getBranchProtectSite());
			preparedStatement.setInt(11, dualInfo.getaAcId());
			preparedStatement.setInt(12, dualInfo.getzAcId());
			preparedStatement.setString(13, dualInfo.getCreateUser());
			preparedStatement.setString(14, DateUtil.getDate(DateUtil.FULLTIME));
			preparedStatement.setInt(15, dualInfo.getIsSingle());
			preparedStatement.setString(16, dualInfo.getJobStatus());
			preparedStatement.setInt(17, dualInfo.getClientId());
			preparedStatement.setInt(18, dualInfo.getaSiteId());
			preparedStatement.setInt(19, dualInfo.getzSiteId());

			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				result = resultSet.getInt(1);
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}

			sql = null;
		}
		return result;
	}
	
	/**
	 * 更新
	 * @param connection
	 * @param dualInfo
	 * @return
	 * @throws Exception
	 */
	public int update(Connection connection,DualInfo dualInfo) throws Exception{
		if(connection == null){
			throw new Exception("connection is null");
		}
		if(dualInfo == null){
			throw new Exception("dualInfo is null");
		}
		PreparedStatement preparedStatement = null;
		int result = 0;
		String sql = null;
		try {
			sql = UPDATESQL;
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, dualInfo.getServiceId());
			preparedStatement.setInt(2, dualInfo.getPwId());
			preparedStatement.setString(3, dualInfo.getName());
			preparedStatement.setInt(4, dualInfo.getaXcId());
			preparedStatement.setInt(5, dualInfo.getzXcId());
			preparedStatement.setInt(6, dualInfo.getActiveStatus());
			preparedStatement.setInt(7, dualInfo.getRootSite());
			preparedStatement.setInt(8, dualInfo.getBranchMainSite());
			preparedStatement.setInt(9, dualInfo.getBranchProtectSite());
			preparedStatement.setString(10, dualInfo.getCreateUser());
			preparedStatement.setString(11, dualInfo.getCreateTime());
			preparedStatement.setString(12, dualInfo.getJobStatus());
			preparedStatement.setInt(13, dualInfo.getIsSingle());
			preparedStatement.setInt(14, dualInfo.getId());
			preparedStatement.setInt(15, EServiceType.DUAL.getValue());
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}finally{
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		
		return result;
	}
	
	/**
	 * 删除
	 * @param connection
	 * @param serviceId
	 * @return
	 * @throws Exception
	 */
	public int delete(Connection connection,int id) throws Exception{
		if(connection == null){
			throw new Exception("connection is null");
		}
		String sql = DELETESQL;
		PreparedStatement preparedStatement = null;
		int result = 0;
		try {
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, id);
			preparedStatement.setInt(2, EServiceType.DUAL.getValue());
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}finally{
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}
	
	/**
	 * 查询一个最大的serviceid
	 * 
	 * @return
	 * @throws Exception
	 */
	public int selectMaxServiceId(Connection connection) throws Exception {

		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		String sql = null;
		int serviceid = 0;
		try {
			sql = "select max(serviceid) as serviceid from serviceinfo where serviceType=40";

			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				serviceid = resultSet.getInt("serviceid");
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return serviceid;

	}
	
	/**
	 * 查询所有
	 * @param connection
	 * @return
	 * @throws SQLException
	 */
	public List<DualInfo> queryAll(Connection connection,int label,int siteId) throws Exception{
		List<DualInfo> dualInfos = new ArrayList<DualInfo>();
		String sql = "";
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			if(label == 0)
			{
			  sql = "select * from serviceInfo where serviceType = "+EServiceType.DUAL.getValue()+ " and issingle=0";
			}else
			{
			 sql = "select * from serviceInfo where serviceType = "+EServiceType.DUAL.getValue()+ " and (rootSite=? or branchMainSite=? or branchProtectSite=?)";
			}
			preparedStatement = connection.prepareStatement(sql);
			if(label != 0)
			{
				preparedStatement.setInt(1, siteId);
				preparedStatement.setInt(2, siteId);
				preparedStatement.setInt(3, siteId);
			}
			resultSet = preparedStatement.executeQuery();
			dualInfos = getDualInfosList(dualInfos, resultSet);

		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return dualInfos;
	}
	
	/**
	 * 查询所有
	 * @param connection
	 * @return
	 * @throws SQLException
	 */
	public List<DualInfo> queryByCondition(DualInfo dualInfo,Connection connection) throws Exception{
		List<DualInfo> dualInfos = new ArrayList<DualInfo>();
		String sql = "select * from serviceInfo, pwInfo WHERE serviceInfo.pwId = pwInfo.pwId and serviceType = "+EServiceType.DUAL.getValue()+ " and serviceId = " + dualInfo.getServiceId();
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			dualInfos = getDualInfosList(dualInfos, resultSet);

		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return dualInfos;
	}
	
	/**
	 * 根据网元id查询
	 * @param connection
	 * @return
	 * @throws SQLException
	 */
	public List<DualInfo> queryBySiteId(Connection connection,int siteId) throws Exception{
		List<DualInfo> dualInfos = new ArrayList<DualInfo>();
		String sql = "select * from serviceInfo where serviceType = "+EServiceType.DUAL.getValue()+ " and (rootSite=? or branchMainSite=? or branchProtectSite=?)";
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			preparedStatement.setInt(2, siteId);
			preparedStatement.setInt(3, siteId);
			resultSet = preparedStatement.executeQuery();
			dualInfos = getDualInfosList(dualInfos, resultSet);

		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return dualInfos;
	}
	
	/**
	 * 
	 * @param dualInfos
	 * @param resultSet
	 * @return
	 */
	public List<DualInfo> getDualInfosList(List<DualInfo> dualInfos,ResultSet resultSet){
		DualInfo dualInfo;
		try {
			while (resultSet.next()) {
				dualInfo = new DualInfo();
				dualInfo.setId(resultSet.getInt("id"));
				dualInfo.setServiceId(resultSet.getInt("serviceId"));
				dualInfo.setPwId(resultSet.getInt("pwId"));
				dualInfo.setServiceType(resultSet.getInt("serviceType"));
				dualInfo.setName(resultSet.getString("name"));
				dualInfo.setaXcId(resultSet.getInt("aXcId"));
				dualInfo.setzXcId(resultSet.getInt("zXcId"));
				dualInfo.setActiveStatus(resultSet.getInt("activeStatus"));
				dualInfo.setRootSite(resultSet.getInt("rootSite"));
				dualInfo.setBranchMainSite(resultSet.getInt("branchMainSite"));
				dualInfo.setBranchProtectSite(resultSet.getInt("branchProtectSite"));
				dualInfo.setaAcId(resultSet.getInt("aAcId"));
				dualInfo.setzAcId(resultSet.getInt("zAcId"));
				dualInfo.setCreateUser(resultSet.getString("createUser"));
				dualInfo.setCreateTime(resultSet.getString("createTime"));
				dualInfo.setIsSingle(resultSet.getInt("issingle"));
				dualInfo.setJobStatus(resultSet.getString("jobStatus"));
				dualInfo.setClientId(resultSet.getInt("clientId"));
				dualInfo.setaSiteId(resultSet.getInt("aSiteId"));
				dualInfo.setzSiteId(resultSet.getInt("zSiteId"));
				dualInfos.add(dualInfo);
			}
		} catch (SQLException e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return dualInfos;
	}
	/**
	 * 根据网元ID，设备名称，查询
	 * @param connection
	 * @param siteId
	 * @param businessId
	 * @return
	 * @throws SQLException
	 */
	public List<DualInfo> queryBySiteIdAndBusinessId(Connection connection,int siteId,int businessId) throws Exception{
		List<DualInfo> dualInfos = new ArrayList<DualInfo>();
		String sql = "select * from serviceInfo where serviceType = "+EServiceType.DUAL.getValue()+ " and (rootSite=? or branchMainSite=? or branchProtectSite=?) and (aXcId=? or zXcId=?)";
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			preparedStatement.setInt(2, siteId);
			preparedStatement.setInt(3, siteId);
			preparedStatement.setInt(4, businessId);
			preparedStatement.setInt(5, businessId);
			resultSet = preparedStatement.executeQuery();
			dualInfos = getDualInfosList(dualInfos, resultSet);

		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return dualInfos;
	}

	public int query_name(String afterName, String beforeName, Connection connection) throws Exception {
		if (null == afterName) {
			throw new Exception("afterName is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		List<Object> paramList = new ArrayList<Object>();
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		try {
			sql = "select count(*) as selectcount from serviceinfo where serviceType=40 and name=?";
			paramList.add(afterName);
			if (null != beforeName) {
				sql += " and name!=?";
				paramList.add(beforeName);
			}
			preparedStatement = connection.prepareStatement(sql);
			for (int i = 0; i < paramList.size(); i++) {
				preparedStatement.setObject(i + 1, paramList.get(i));
			}
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				result = resultSet.getInt("selectcount");
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			paramList = null;
			sql = null;
		}

		return result;
	}
	
	/**
	 * 修改状态
	 * 
	 * @param siteId
	 *            网元id
	 * @param status
	 *            修改激活状态
	 * @param connection
	 *            数据库连接
	 * @throws Exception
	 */
	public void updateStatus(int siteId, int status, Connection connection) throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		try {

			sql = "update serviceinfo set activeStatus=? where serviceType=40 and (rootSite=? or branchMainSite=? or branchProtectSite=?)";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, status);
			preparedStatement.setInt(2, siteId);
			preparedStatement.setInt(3, siteId);
			preparedStatement.setInt(4, siteId);

			preparedStatement.executeUpdate();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
	} 
	
	
	/**
	 * 根据网元ID，设备名称，查询
	 * @param connection
	 * @param siteId
	 * @param businessId
	 * @return
	 * @throws SQLException
	 */
	public List<DualInfo> queryBySiteIdAndPWId(int pwId,int siteId,Connection connection) throws Exception{
		List<DualInfo> dualInfos = new ArrayList<DualInfo>();
		String sql = "select * from serviceInfo where serviceType = "+EServiceType.DUAL.getValue()+ " and (rootSite=? or branchMainSite=? or branchProtectSite=?) and pwId=?";
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			preparedStatement.setInt(2, siteId);
			preparedStatement.setInt(3, siteId);
			preparedStatement.setInt(4, pwId);
			resultSet = preparedStatement.executeQuery();
			dualInfos = getDualInfosList(dualInfos, resultSet);

		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return dualInfos;
	}
	
	/**
	 * 根据网元ID，设备名称，查询
	 * @param connection
	 * @param siteId
	 * @param businessId
	 * @return
	 * @throws SQLException
	 */
	public List<DualInfo> queryBySiteIdAndPWId(int pwId,int standPwId,int siteId,Connection connection) throws Exception{
		List<DualInfo> dualInfos = new ArrayList<DualInfo>();
		String sql = "select * from serviceInfo where serviceType = "+EServiceType.DUAL.getValue()+ " and (rootSite=? or branchMainSite=? or branchProtectSite=?) and pwId in("+pwId+","+standPwId+")";
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			preparedStatement.setInt(2, siteId);
			preparedStatement.setInt(3, siteId);
			resultSet = preparedStatement.executeQuery();
			dualInfos = getDualInfosList(dualInfos, resultSet);

		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return dualInfos;
	}
	
	/**
	 * 通过acId,siteId查询
	 * 
	 * @param acId
	 * @param connection
	 * @return
	 * @throws SQLException
	 */
	public List<DualInfo> queryByAcIdAndSiteIdCondition(int acId, int siteId, Connection connection) throws SQLException {
		
		String sql = "select*from serviceinfo where serviceType=40 and ((aAcId= ? and rootSite = ? )or (zAcId = ? and (branchMainSite=? or branchProtectSite=?)))";
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<DualInfo> dualInfos = new ArrayList<DualInfo>();
		try {
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, acId);
			preparedStatement.setInt(2, siteId);
			preparedStatement.setInt(3, acId);
			preparedStatement.setInt(4, siteId);
			preparedStatement.setInt(5, siteId);
			resultSet = preparedStatement.executeQuery();
			dualInfos = getDualInfosList(dualInfos, resultSet);
			
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return dualInfos;
	}
	
	/**
	 * 查询根据pwid查询业务
	 * @param connection
	 * @return
	 * @throws SQLException
	 */
	public List<DualInfo> queryBypwIDs(List<Integer> pwids,Connection connection) throws Exception{
		List<DualInfo> dualInfos = new ArrayList<DualInfo>();
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		String pwId = "";
		String ids = "";
		try {
			pwId = pwids.toString();
			ids = pwId.substring(1, pwId.length() - 1);
			String sql = "select * from serviceInfo WHERE pwId in " + "(" + ids + ") and  serviceType = "+EServiceType.DUAL.getValue();
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			dualInfos = getDualInfosList(dualInfos, resultSet);

		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
		}
		return dualInfos;
	}
	
}

