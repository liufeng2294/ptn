package com.nms.model.system;

import java.sql.Connection;
import java.util.List;

import com.nms.db.bean.system.OperationLog;
import com.nms.db.dao.system.OperationLogDao;
import com.nms.model.util.ObjectService;
import com.nms.ui.manager.ExceptionManage;

/**
 * 操作日志
 * @author sy
 *
 */
public class OperationLogService extends ObjectService{
	private OperationLogDao operationDao=new OperationLogDao();
	public void setConnection(Connection connection)throws Exception {
		super.connection = connection;
	}
	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}
	/**
	 * 新增 operation_log(操作日志表)
	 * 
	 * @param operationLog
	 *            实体
	 * @throws Exception
	 */	
	public int insertOperationLog(OperationLog operationLog)throws Exception{
		if (operationLog == null) {
			throw new Exception("operationLog is null");
		}
		int result=0;
		try {
			result=operationDao.insert(operationLog, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return result;
	}
	/**
	 * 查询   操作日志
	 * 条件（operationLog）
	 * @return List<operationLog>集合
	 * @throws Exception
	 */
	public List<OperationLog> select(OperationLog operationLog) throws Exception {

		List<OperationLog> operationLogList = null;		
		try {			
			operationLogList = operationDao.select(operationLog,connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return operationLogList;
	}
	/**
	 * 修改   operation_log表（结束时间，操作结果）
	 * @param operationLog
	 * @return
	 * @throws Exception
	 */
	public int update(OperationLog operationLog) throws Exception{
		if (operationLog == null) {
			throw new Exception("operationLog is null");
		}
		int result=0;
		try {
			result=operationDao.updateOperationLog(operationLog, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return result;
	}
	/**
	 * 查看 操作日志表  多少条记录
	 * 返回   result 条
	 * @return
	 * @throws Exception
	 */
	public int selectCount()throws Exception{
		int result=0;
		result=operationDao.selectOperationLogCount(connection);
		return result;
	}
	/**
	 * 根据 -- 操作日志记录表--主键集合，批量删除
	 * 
	 * @param idList
	 * @return
	 * @throws Exception
	 */
	public int delete(List<Integer> idList) throws Exception {
		int result = 0;
		try {
			if (idList == null || idList.size() == 0) {
				return 0;
			}
			result = operationDao.delete(idList, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return result;
	}
	/**
	 * 移除  某一时间 以前的  操作日志 信息
	 * @param removeTime
	 * @return
	 * @throws Exception
	 */
	public int delete(String removeTime)throws Exception{
		int result=0;

		try {
			result = operationDao.delete(removeTime,connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return result;
	}
}
