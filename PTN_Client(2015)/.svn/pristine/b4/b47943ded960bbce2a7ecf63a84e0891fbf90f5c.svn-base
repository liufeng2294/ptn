package com.nms.db.dao.ptn.clock;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.clock.ClockSource_Corba;
import com.nms.ui.manager.ExceptionManage;

/**
 * corba保护组（1:1tunnel、msp、lsp）数据库持久层
 * @author dzy
 *
 */
public class ClockSourceDao_Corba {

	/**
	 * 条件查询 (查询frequencymanageclock（clockType=527：内时钟 clockType=528：外时钟）和timeClockInterfac（线路时钟） )
	 * 
	 * @param condition
	 *            查询条件
	 * @param connection
	 *            数据库连接
	 * @return List<ClockSource_Corba>
	 * @throws Exception
	 */
	public List<ClockSource_Corba> queryByCondition(ClockSource_Corba condition, Connection connection) throws Exception {

		if (connection == null) {
			throw new Exception("Connection is null");
		}
		List<ClockSource_Corba> clockSourceList_Corba = null;
		String sql = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		ClockSource_Corba info = null;
		List<Object> list = new ArrayList<Object>();
		try {
			clockSourceList_Corba = new ArrayList<ClockSource_Corba>();
			
			sql = "SELECT t.id, t.siteId, t.PriorLevel, t.jobStatus, t.ssmenable, t.type, s.CellId, p.portName, t.QualityLevel, t.model FROM "
					+ "( SELECT f.id AS 'id', f.siteId AS 'siteId', f.systemPriorLevel AS 'PriorLevel', f.jobState AS 'jobStatus', f.SSMSend AS 'ssmenable',"
					+ " CASE WHEN f.clockType = 527 THEN 2 ELSE 0 END AS 'type', f.`port` AS 'portid', - 1 AS 'QualityLevel', - 1 AS 'model' "
					+ "FROM `frequencymanageclock` f UNION ALL SELECT ti.id AS 'id', ti.siteId AS 'siteId', '' AS 'PriorLevelPriorLevelPriorLevel', "
					+ "'' AS 'jobStatus', ti.ssmSendingEnabled AS 'ssmenable', '1' AS 'type', ti.`port` AS 'portid', - 1 AS 'QualityLevel', - 1 AS 'model' "
					+ "FROM timeClockInterfac ti ) t, site_inst s, port_inst p WHERE t.siteId = s.site_inst_id AND p.portId = t.portid  ";
			preparedStatement =  connection.prepareStatement(sql);
			
			if(0!=condition.getSiteId()){
				sql += " AND t.siteid = ? ";
				list.add(condition.getSiteId());
			}
			preparedStatement =  connection.prepareStatement(sql);
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					preparedStatement.setObject(i+1, list.get(i));
				}
			}
			
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				info = new ClockSource_Corba();
				info.setId(resultSet.getInt("id"));
				info.setName(resultSet.getString("portName"));
				info.setSiteId(resultSet.getInt("siteId"));
				info.setType(resultSet.getInt("type"));
				info.setPriorityLevel(resultSet.getInt("PriorLevel"));
				info.setSsmEnable(resultSet.getInt("ssmEnable"));
				info.setJobStatus(resultSet.getInt("jobStatus"));
				info.setSiteName(resultSet.getString("CellId"));
				info.setQualityLevel(resultSet.getInt("QualityLevel"));
				info.setModel(resultSet.getInt("model"));
				clockSourceList_Corba.add(info);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
			info = null;
		}
		return clockSourceList_Corba;
	}
}
