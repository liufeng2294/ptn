package com.nms.model.system;

import java.sql.Connection;
import java.sql.DatabaseMetaData;

import com.nms.db.bean.ptn.DbInfoTask;
import com.nms.db.bean.system.DataBaseInfo;
import com.nms.db.dao.system.DataBaseDao;
import com.nms.model.util.ObjectService;
import com.nms.ui.manager.ExceptionManage;

public class DataBaseService extends ObjectService{
	
	public void setConnection(Connection connection){
		super.connection = connection;
	}
	
	public void setPtnuser(String ptnuser){
		super.ptnuser = ptnuser;
	}
	
	private DataBaseDao dataBaseDao = new DataBaseDao();
	
	/**
	 * 查询数据库的基本信息
	 * 
	 * @param tableName 数据库名称
	 * @param label 1:查询数据库  2:查询数据库表
	 * @return
	 * @throws Exception
	 */
	public DataBaseInfo selectTableInfo(String tableName,int label)throws Exception{
		
		DataBaseInfo dataBaseInfo = new DataBaseInfo();
		try {
			dataBaseInfo = dataBaseDao.slectTableInfo(tableName, connection,label);
			if(label == 2 ){
				dataBaseInfo.setCountSize(dataBaseDao.countTableInfo(tableName, connection));
			}
			
		} catch (Exception e) {
			ExceptionManage.dispose(e, getClass());
		}
		return dataBaseInfo;
	}
	
	
	public DataBaseInfo slectDataInfo() throws Exception{
		DataBaseInfo dataBaseInfo = new DataBaseInfo();
		try {
			DatabaseMetaData dbMetaData = connection.getMetaData();
			dataBaseInfo.setProductName(dbMetaData.getDatabaseProductName());
			dataBaseInfo.setProductVersion(dbMetaData.getDatabaseProductVersion());
		} catch (Exception e) {
			ExceptionManage.dispose(e, getClass());
		}
		return dataBaseInfo;
	}

	
	
	/**
	 * 查询数据库的监控的基本信息
	 * @param tableName 数据库名称
	 * @param mointorType 1:监控内存
	 * @return
	 * @throws Exception
	 */
	public DbInfoTask  selectMoinTableInfo(String tableName,String mointorType)throws Exception
	{
		DataBaseInfo dataBaseInfo = null;
		DbInfoTask dbInfoTask = null;
		try {
			if(mointorType.equals("1")){
				dataBaseInfo = dataBaseDao.slectTableInfo(tableName, connection,1);
			}else{
				dataBaseInfo = new DataBaseInfo();
			}
			dbInfoTask = new DbInfoTask();
			dbInfoTask.setMointorType(mointorType);
			dataBaseDao.getMointorDbAlarmLimit(dbInfoTask,connection,dataBaseInfo,mointorType);
		} catch (Exception e) {
			ExceptionManage.dispose(e, getClass());
		}
		return dbInfoTask;
	}
	
	
	/**
	 * 插入或更新数据库的监控的基本信息
	 * @param tableName 数据库名称
	 * @param label 1:查询数据库  2:查询数据库表
	 * @return
	 * @throws Exception
	 */
	public void saveOrUpdate(DbInfoTask dbInfoTask)throws Exception
	{
		try {
			if(dbInfoTask.getId() >0)
			{
				dataBaseDao.update(dbInfoTask, connection);
			}else
			{
				dataBaseDao.insert(dbInfoTask, connection);
			}
			
		} catch (Exception e) {
			ExceptionManage.dispose(e, getClass());
		}
	}
}
