package com.nms.model.ptn.qos;

import java.sql.Connection;
import java.util.List;

import com.nms.db.bean.ptn.qos.QosMappingAttr;
import com.nms.db.dao.ptn.qos.QosMappingAttrDao;
import com.nms.model.util.ObjectService;
import com.nms.ui.manager.ExceptionManage;

public class QosMappingModeAttrService extends ObjectService{
	
	public void setConnection(Connection connection) {
		super.connection = connection;
	}

	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}
	
	private QosMappingAttrDao qosMappingAttrDao = new QosMappingAttrDao();
	
	/**
	 * 更新或新增QosMappingMode
	 * @param qosMappingModeList
	 * @return
	 * @throws Exception
	 */
	public int saveOrUpdate(List<QosMappingAttr> qosMappingAttrList) throws Exception{
		int result = 0;
		try {
			for(QosMappingAttr qosMappingAttr : qosMappingAttrList){
				if(qosMappingAttr.getId()>0){
					qosMappingAttrDao.update(qosMappingAttr, connection);
				}else{
					result = qosMappingAttrDao.insert(qosMappingAttr, connection);
				}
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e, getClass());
		}
		return result;
	}
	
	/**
	 * 根据id批量删除
	 * @param idList
	 * @return
	 * @throws Exception
	 */
	public int delete(List<Integer> idList) throws Exception{
		
	try {
		connection.setAutoCommit(false);
		for(Integer id : idList){
			qosMappingAttrDao.delete(id, connection);
		}
		if(!connection.getAutoCommit()){
			connection.commit();
		}
	  } catch (Exception e) {
		  connection.rollback();
		  ExceptionManage.dispose(e, getClass());
	   }finally{
		   connection.setAutoCommit(true);
	   }
		return 0;
	}
	
	
	/**
	 * 条件查询qos模板
	 * @param qosMappingMode
	 * @return
	 * @throws Exception
	 */
	public List<QosMappingAttr> queryByCondition(QosMappingAttr qosMappingAttr) throws Exception{
		List<QosMappingAttr> qosMappingAttrList = null;
		qosMappingAttrList = qosMappingAttrDao.queryByCondition(qosMappingAttr, connection);
		return qosMappingAttrList;
	}
	
	/**
	 * 条件查询qos模板
	 * @param qosMappingMode
	 * @return
	 * @throws Exception
	 */
	public List<QosMappingAttr> isExit(QosMappingAttr qosMappingAttr) throws Exception{
		List<QosMappingAttr> qosMappingAttrList = null;
		qosMappingAttrList = qosMappingAttrDao.isExit(qosMappingAttr, connection);
		return qosMappingAttrList;
	}
	
	/**
	 * 根据网元删除
	 * @param idList
	 * @return
	 * @throws Exception
	 */
	public int deleteForSiteId(int siteId) throws Exception{
		return qosMappingAttrDao.deleteForSiteId(siteId, connection);
		
	}
	
	/**
	 * 更新或新增QosMappingMode
	 * @param qosMappingModeList
	 * @return
	 * @throws Exception
	 */
	public int save(QosMappingAttr qosMappingAttr) throws Exception{
		return qosMappingAttrDao.insert(qosMappingAttr, connection);
	}
}
