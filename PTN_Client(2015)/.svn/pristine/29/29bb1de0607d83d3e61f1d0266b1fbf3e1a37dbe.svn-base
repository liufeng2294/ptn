package com.nms.model.ptn;

import java.sql.Connection;
import java.util.List;

import com.nms.db.bean.ptn.SiteRoate;
import com.nms.db.dao.ptn.SiteRoateDao;
import com.nms.model.util.ObjectService;
import com.nms.ui.manager.ExceptionManage;

/**
 * 倒换命令
 * @author sy
 *
 */
public class SiteRoateService extends ObjectService{
	
	public void setConnection(Connection connection) {
		super.connection = connection;
	}

	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}
	private SiteRoateDao siteRoateDao=new SiteRoateDao();
	
	/**
	 * 新增
	 * @param siteRoate
	 * @return
	 * @throws Exception
	 */
	public int insert(SiteRoate siteRoate)throws Exception{
		int result = 0;

		try {
			result = siteRoateDao.insert(siteRoate, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return result;
	}
	/**
	 * 条件查询 : 只查询一个结果
	 * @param siteRoate
	 * @return
	 * @throws Exception
	 */
	public SiteRoate  select(SiteRoate siteRoate)throws Exception{
		List<SiteRoate> siteRoateList=null;
		try {
			siteRoateList = querBySiteRoate(siteRoate);
			if(siteRoateList!=null&&siteRoateList.size()==1){
				siteRoate=siteRoateList.get(0);
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return siteRoate;
	}
	/**
	 * 条件查询
	 * @param siteRoate
	 * @return
	 * @throws Exception
	 */
	public List<SiteRoate>  querBySiteRoate(SiteRoate siteRoate)throws Exception{
		List<SiteRoate> siteRoateList=null;
		try {
			siteRoateList = siteRoateDao.select(siteRoate, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return siteRoateList;
	}
	/**
	 * 更新
	 * @param siteRoate
	 * @return
	 * @throws Exception
	 */
	public int update(SiteRoate siteRoate)throws Exception{
		int result = 0;

		try {
			result = siteRoateDao.update(siteRoate, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return result;
	}
	/**
	 * 根据条件删除
	 * @param siteRoate
	 * @return
	 * @throws Exception
	 */
	public int delete(SiteRoate siteRoate)throws Exception{
		int result = 0;

		try {
			result = siteRoateDao.update(siteRoate, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return result;
	}
	/**
	 * 集合更新
	 * @param siteRoate
	 * @return
	 * @throws Exception
	 */
	public int update(List<SiteRoate> siteRoateList)throws Exception{
		
		int result = 0;
		int count=0;
		try {
			if(siteRoateList!=null&&siteRoateList.size()>0){
				for(SiteRoate siteRoate:siteRoateList){
					count = siteRoateDao.update(siteRoate, connection);
					if(count>0){
						result++;
					}
				}
			}
			
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return result;
	}
}
