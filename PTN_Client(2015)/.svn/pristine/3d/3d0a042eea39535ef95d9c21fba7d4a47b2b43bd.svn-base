package com.nms.model.perform;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.equipment.shelf.SiteInst;
import com.nms.db.bean.equipment.slot.SlotInst;
import com.nms.db.bean.perform.PerformanceTaskInfo;
import com.nms.db.dao.perform.PerformanceTaskDao;
import com.nms.db.enums.EObjectType;
import com.nms.model.equipment.shlef.SiteService;
import com.nms.model.equipment.slot.SlotService;
import com.nms.model.util.ObjectService;
import com.nms.model.util.Services;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.ExceptionManage;
import com.nms.ui.ptn.performance.model.PerformanceTaskFilter;

public class PerformanceTaskService extends ObjectService {
	public void setConnection(Connection connection) {
		super.connection = connection;
	}

	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}

	private PerformanceTaskDao taskDao = new PerformanceTaskDao();

	/**
	 * 插入或者修改性能任务
	 * 
	 * @param PerformanceTaskInfo
	 *            任务实体
	 * @return
	 * @throws Exception
	 */
	public int saveOrUpdate(PerformanceTaskInfo taskInfo) throws Exception {
		if (taskInfo == null) {
			throw new Exception("taskInfo is null");
		}
		int resultcesId = 0;
		try {
			
			if (taskInfo.getId() != 0) {
				resultcesId = this.taskDao.update(taskInfo, connection);
			} else {
				resultcesId = this.taskDao.insert(taskInfo, connection);
			}
			
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} 
		return resultcesId;
	}
	/**
	 * 根据长期性能任务主键id，删除长期性能任务
	 * 
	 * @param taskId
	 *            主键id
	 * @return
	 * @throws Exception
	 */
	public int delete(int taskId) throws Exception {
		if (taskId == 0) {
			throw new Exception("taskId is null");
		}
		int resultcesId = 0;
		try {
			resultcesId = this.taskDao.delete(taskId, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return resultcesId;
	}

	/**
	 * 获取所有长期性能任务
	 * 
	 * @return
	 * @throws Exception
	 */
	public List<PerformanceTaskInfo> select() throws Exception {
		List<PerformanceTaskInfo> taskInfoList = null;
		try {
			PerformanceTaskInfo condition = new PerformanceTaskInfo();
			taskInfoList = taskDao.queryByCondition(condition, connection);
			this.wrapPerformanceTask(taskInfoList);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return taskInfoList;
	}

	/**
	 * 根据查询条件，获取所有长期性能任务
	 * 
	 * @return
	 * @throws Exception
	 */
	public List<PerformanceTaskInfo> select(PerformanceTaskInfo condition) throws Exception {
		List<PerformanceTaskInfo> taskInfoList = null;
		try {
			taskInfoList = taskDao.queryByCondition(condition, connection);
			this.wrapPerformanceTask(taskInfoList);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return taskInfoList;
	}

	/**
	 * 根据长期性能任务主键集合，批量删除
	 * 
	 * @param idList
	 * @return
	 * @throws Exception
	 */
	public int delete(List<Integer> idList) throws Exception {
		int result = 0;
		try {
			if (idList == null || idList.size() == 0) {
				return 0;
			}
			result = taskDao.delete(idList, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return result;
	}

	/**
	 * 根据过滤条件查询
	 * 
	 * @param filter
	 * @return
	 * @throws Exception
	 */
	public List<PerformanceTaskInfo> queryByFilter(PerformanceTaskFilter filter) throws Exception {
		List<PerformanceTaskInfo> taskInfoList = null;
		try {
			taskInfoList = taskDao.queryByFilter(connection, filter);
			// 将网元和板卡信息封装到对象中
			this.wrapPerformanceTask(taskInfoList);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return taskInfoList;
	}

	/**
	 * 根据过滤条件查询
	 * 
	 * @param filter
	 * @return
	 * @throws Exception
	 */
	public PerformanceTaskInfo selectById(Integer taskId) throws Exception {
		List<PerformanceTaskInfo> taskInfoList = null;
		List<Integer> idList = null;
		try {
			if (taskId == null || taskId == 0) {
				return null;
			}
			idList = new ArrayList<Integer>();
			idList.add(taskId);
			taskInfoList = taskDao.queryByIdList(idList, connection);
			// 将网元和板卡信息封装到对象中
			this.wrapPerformanceTask(taskInfoList);
			if (taskInfoList != null && taskInfoList.size() > 0) {
				return taskInfoList.get(0);
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			taskInfoList = null;
			idList = null;
		}
		return null;
	}

	/**
	 * 封装性能任务对象
	 * 
	 * @throws Exception
	 */
	public void wrapPerformanceTask(List<PerformanceTaskInfo> taskInfoList) throws Exception {
		if (taskInfoList != null) {
			SiteService siteService = null;
			SlotService slotService = null;
			List<SiteInst> siteList = null;
			List<SlotInst> slotList = null;
			SlotInst slotInst = null;
			try {
				siteService = (SiteService) ConstantUtil.serviceFactory.newService(Services.SITE, this.connection);
				slotService = (SlotService) ConstantUtil.serviceFactory.newService(Services.SLOT, this.connection);
				for (PerformanceTaskInfo task : taskInfoList) {
					// 将网元和板卡信息封装到对象中
					SiteInst siteInst = task.getSiteInst();
					siteList = siteService.select(siteInst);
					if (siteList != null && siteList.size() > 0) {
						siteInst = siteList.get(0);
						task.setSiteInst(siteInst);
					}
					if (task.getObjectType() != null && task.getObjectType() == EObjectType.SITEINST) {
						task.setObjectName(EObjectType.SITEINST.toString() + "/" + task.getSiteInst().getCellId());
					} else if (task.getObjectType() != null && task.getObjectType() == EObjectType.SLOTINST) {
						slotInst = new SlotInst();
						slotInst.setId(task.getObjectId());
						slotList = slotService.select(slotInst);
						if (slotList != null && slotList.size() > 0) {
							slotInst = slotList.get(0);
							task.setObjectName(EObjectType.SLOTINST.toString() + "/" + slotInst.getId());
						}
					}
				}
			} catch (Exception e) {
				ExceptionManage.dispose(e,this.getClass());
			} finally {
			}
		}

	}
	/**
	 * 名字是否重复
	 * @param afterName
	 * @param beforeName
	 * @return
	 */
	public boolean nameRepetition(String afterName, String beforeName) {
		int result = 0;
		try {
			result = this.taskDao.query_name(afterName, beforeName, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		if(0== result){
			return false;
		}else{
			return true;
		}
	}
}
