package com.nms.db.dao.ptn.ecn;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;

import com.nms.db.bean.ptn.ecn.OSPFInfo;

public class OSPFInfoDao {
	// TXC

	/**
	 * 通过ID查询
	 * 
	 * @param NeID
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public OSPFInfo queryByNeID(String NeID, Connection connection) throws Exception {
		if (null == NeID) {
			throw new Exception("NeID is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		OSPFInfo oSPFInfo = null;
		try {
			sql = "select * from ospf_info where neId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, Integer.valueOf(NeID));//
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				oSPFInfo = new OSPFInfo();
				oSPFInfo.setId(resultSet.getString(1));
				oSPFInfo.setNeId(resultSet.getString(2));
				oSPFInfo.setEnabled(resultSet.getString(3));
				oSPFInfo.setDefmetric(resultSet.getString(4));
				oSPFInfo.setAbr(resultSet.getString(5));
				oSPFInfo.setRefbandwidth(resultSet.getString(6));
				oSPFInfo.setDistance(resultSet.getString(7));
				oSPFInfo.setSpf_holdtime(resultSet.getString(8));
				oSPFInfo.setSpf_maxholdtime(resultSet.getString(9));
				oSPFInfo.setSpf_delay(resultSet.getString(10));
				oSPFInfo.setRefresh_time(resultSet.getString(11));
				oSPFInfo.setVersion(resultSet.getString(12));
				oSPFInfo.setCompatiblerfc1583(resultSet.getString(13));
				oSPFInfo.setRt_id_area(resultSet.getString(14));
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if(null!=resultSet){
				try {
					resultSet.close();
				} catch (Exception e2) {
					throw e2;
				}
				resultSet=null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return oSPFInfo;
	}

	/**
	 * 创建
	 * 
	 * @param OSPFInfo
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int insert(OSPFInfo OSPFInfo, Connection connection) throws Exception {
		if (null == OSPFInfo) {
			throw new Exception("OSPFInfo is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		ResultSet resultSet = null;
		try {

			sql = "insert into ospf_info (neId,enabled,defmetric,abr,refbandwidth,distance,spf_holdtime,spf_maxholdtime," + "spf_delay,refresh_time,version,compatiblerfc1583,ospf_area_id) values(?,?,?,?,?,?,?,?,?,?,?,?,?)";
			preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setString(1, OSPFInfo.getNeId());//
			preparedStatement.setInt(2, Integer.valueOf(OSPFInfo.getEnabled()));
			preparedStatement.setInt(3, Integer.valueOf(OSPFInfo.getDefmetric()));
			preparedStatement.setString(4, OSPFInfo.getAbr());//
			preparedStatement.setInt(5, Integer.valueOf(OSPFInfo.getRefbandwidth()));
			preparedStatement.setInt(6, Integer.valueOf(OSPFInfo.getDistance()));
			preparedStatement.setInt(7, Integer.valueOf(OSPFInfo.getSpf_holdtime()));
			preparedStatement.setInt(8, Integer.valueOf(OSPFInfo.getSpf_maxholdtime()));
			preparedStatement.setInt(9, Integer.valueOf(OSPFInfo.getSpf_delay()));
			preparedStatement.setInt(10, Integer.valueOf(OSPFInfo.getRefresh_time()));
			preparedStatement.setString(11, OSPFInfo.getVersion());//
			preparedStatement.setString(12, OSPFInfo.getCompatiblerfc1583());//
			preparedStatement.setInt(13, Integer.valueOf(OSPFInfo.getRt_id_area()));

			preparedStatement.executeUpdate();

			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				result = resultSet.getInt(1);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if(null!=resultSet){
				try {
					resultSet.close();
				} catch (Exception e2) {
					throw e2;
				}
				resultSet=null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}

	/**
	 * 修改
	 * 
	 * @param OSPFInfo
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int update(OSPFInfo OSPFInfo, Connection connection) throws Exception {
		if (null == OSPFInfo) {
			throw new Exception("OSPFInfo is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		try {

			sql = "update ospf_info set neId=?,enabled=?,defmetric=?,abr=?,refbandwidth=?,distance=?,spf_holdtime=?,spf_maxholdtime=?,spf_delay=?,refresh_time=?,version=?,compatiblerfc1583=?,ospf_area_id=? where id=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, OSPFInfo.getNeId());//
			preparedStatement.setInt(2, Integer.valueOf(OSPFInfo.getEnabled()));
			preparedStatement.setInt(3, Integer.valueOf(OSPFInfo.getDefmetric()));
			preparedStatement.setString(4, OSPFInfo.getAbr());//
			preparedStatement.setInt(5, Integer.valueOf(OSPFInfo.getRefbandwidth()));
			preparedStatement.setInt(6, Integer.valueOf(OSPFInfo.getDistance()));
			preparedStatement.setInt(7, Integer.valueOf(OSPFInfo.getSpf_holdtime()));
			preparedStatement.setInt(8, Integer.valueOf(OSPFInfo.getSpf_maxholdtime()));
			preparedStatement.setInt(9, Integer.valueOf(OSPFInfo.getSpf_delay()));
			preparedStatement.setInt(10, Integer.valueOf(OSPFInfo.getRefresh_time()));
			preparedStatement.setString(11, OSPFInfo.getVersion());//
			preparedStatement.setString(12, OSPFInfo.getCompatiblerfc1583());//
			preparedStatement.setString(13, OSPFInfo.getRt_id_area());//
			preparedStatement.setInt(14, Integer.valueOf(OSPFInfo.getId()));//
			preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}

	/**
	 * 删除
	 * 
	 * @param id
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int deleteById(String id, Connection connection) throws Exception {
		if (null == id) {
			throw new Exception("id is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		try {

			sql = "delete from ospf_info where id=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, Integer.valueOf(id));
			preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}

}
