package com.nms.model.ptn.ecn;

import java.sql.Connection;
import java.util.List;

import com.nms.db.bean.ptn.ecn.OSPFInterface;
import com.nms.db.dao.ptn.ecn.OSPFInterfaceDao;
import com.nms.db.enums.EActionType;
import com.nms.db.enums.EServiceType;
import com.nms.model.util.ObjectService;
import com.nms.ui.manager.ExceptionManage;

public class OSPFInterfaceService extends ObjectService {
	public void setConnection(Connection connection) {
		super.connection = connection;
	}

	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}

	//OSPF DAO类
	private OSPFInterfaceDao interfaceDao = new OSPFInterfaceDao();

	/**
	 * 新建
	 * @param ospfInterface
	 * 				OSPF
	 * @return
	 * @throws Exception
	 */
	public int insert(OSPFInterface ospfInterface) throws Exception {
		if (ospfInterface == null) {
			throw new Exception("ospfInterface is null");
		}
		int result = 1;
		try {
			connection.setAutoCommit(false);
			result = this.interfaceDao.insert(ospfInterface, connection);
			//离线网元数据下载
			super.dateDownLoad(Integer.parseInt(ospfInterface.getNeId()), result, EServiceType.OSPF.getValue(), EActionType.INSERT.getValue(), ospfInterface.getInterfaceName(),"",0,0,"");
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
		return result;
	}

	/**
	 * 删除
	 * @param ospfInterface
	 * 					ospfInterface
	 * @return
	 * @throws Exception
	 */
	public int delete(OSPFInterface ospfInterface) throws Exception {
		if (ospfInterface == null) {
			throw new Exception("ospfInterface is null");
		}
		int result = 1;
		try {
			connection.setAutoCommit(false);
			result = this.interfaceDao.deleteById(ospfInterface.getId() + "", connection);
			//离线网元数据下载
			super.dateDownLoad(Integer.parseInt(ospfInterface.getNeId()), ospfInterface.getId(), EServiceType.OSPF.getValue(), EActionType.DELETE.getValue(), ospfInterface.getInterfaceName(),"",0,0,"");
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
		return result;
	}

	/**
	 * 修改
	 * @param ospfInterface
	 * @return
	 * @throws Exception
	 */
	public int update(OSPFInterface ospfInterface) throws Exception {
		if (ospfInterface == null) {
			throw new Exception("ospfInterface is null");
		}
		int id = 0;
		try {
			connection.setAutoCommit(false);
			id = this.interfaceDao.update(ospfInterface, connection);
			//离线网元数据下载
			super.dateDownLoad(Integer.parseInt(ospfInterface.getNeId()), ospfInterface.getId(), EServiceType.OSPF.getValue(), EActionType.UPDATE.getValue(), ospfInterface.getInterfaceName(),"",0,0,"");
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
		return id;
	}

	/**
	 * 查询通过网元ID
	 * @param NeID
	 * @return
	 * @throws Exception
	 */
	public List<OSPFInterface> queryByNeID(String NeID) throws Exception {
		if (NeID == null) {
			throw new Exception("NeID is null");
		}
		List<OSPFInterface> ospfInterfaceList = null;
		try {
			ospfInterfaceList = this.interfaceDao.queryByNeID(NeID, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return ospfInterfaceList;
	}

	/**
	 * 通过网元ID和名字查询
	 * @param NeID
	 * 			网元ID
	 * @param name
	 * 			名字
	 * @return
	 * @throws Exception
	 */
	public int queryByNeIDAndName(String NeID, String name) throws Exception {
		if (NeID == null) {
			throw new Exception("NeID is null");
		}
		if (name == null) {
			throw new Exception("name is null");
		}
		int i = 0;
		try {
			i = this.interfaceDao.queryByNeIDAndName(NeID, name, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return i;
	}
	
	/**
	 * 通过条件查询
	 * @param ospfInterface
	 * 				OSPF对象
	 * @return
	 * @throws Exception
	 */
	public List<OSPFInterface> queryByCondition(OSPFInterface ospfInterface) throws Exception {
		if (ospfInterface == null) {
			throw new Exception("ospfInterface is null");
		}
		List<OSPFInterface> ospfInterfaceList = null;
		try {
			ospfInterfaceList = this.interfaceDao.queryByCondition(ospfInterface, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return ospfInterfaceList;
	}

	public int updateActiveStatus(int siteId, int value) throws Exception {
		return this.interfaceDao.updateActiveStatus(siteId, value,this.connection);
	}

	/**
	 * 查询通过网元ID
	 * @param NeID
	 * @return
	 * @throws Exception
	 */
	public void updateStatus(OSPFInterface OSPFInterface) throws Exception {
		if (OSPFInterface == null) {
			throw new Exception("OSPFInterface is null");
		}
		try {
			 this.interfaceDao.updateStatus(OSPFInterface, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		
	}

}
