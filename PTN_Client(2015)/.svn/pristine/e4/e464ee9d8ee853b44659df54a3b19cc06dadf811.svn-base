package com.nms.db.dao.ptn.path.pw;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.nms.db.bean.ptn.path.pw.MsPwInfo;
import com.nms.db.bean.ptn.path.pw.PwInfo;
import com.nms.db.enums.EPwType;
import com.nms.ui.manager.DateUtil;
import com.nms.ui.manager.ExceptionManage;

public class PwInfoDao {

	/**
	 * 根据名称查询
	 */
	private final String SELECT_BY_NAME = "select count(*) as selectcount from pwinfo where (aSiteId = ? or zSiteId = ?) and pwName=?";

	/**
	 * 新增pwinfo
	 * 
	 * @param pwinfo
	 *            实体
	 * @param connection
	 *            数据库连接
	 * @return 插入的记录数
	 * @throws Exception
	 */
	public int insert(PwInfo pwinfo, Connection connection) throws Exception {

		if (null == pwinfo) {
			throw new Exception("pwinfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		pwinfo.setCreateTime(DateUtil.getDate(DateUtil.FULLTIME));
		try {
			sql = "insert into pwinfo(pwName,pwStatus,tunnelId,inlabelValue,outlabelValue,aSiteId,zSiteId,direction,createTime,createUser,apwServiceId,zpwServiceId,rserviceId,rserviceType,aPortConfigId,zPortConfigId,type,isSingle,aoppositeId,zoppositeId,jobstatus,expStrategy,expAssignment,phbToExpId,phbStrategy,phbAssignment,expTophbId,payLoad,aVlanEnable,aOutVlanValue,aSourceMac,atargetMac,zVlanEnable,zOutVlanValue,zSourceMac,ztargetMac,businessType,backInlabel,backOutlabel,atp_id,ztp_id,qosModel) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
			preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setString(1, pwinfo.getPwName());
			preparedStatement.setInt(2, pwinfo.getPwStatus());
			preparedStatement.setInt(3, pwinfo.getTunnelId());
			preparedStatement.setInt(4, pwinfo.getInlabelValue());
			preparedStatement.setInt(5, pwinfo.getOutlabelValue());
			preparedStatement.setInt(6, pwinfo.getASiteId());
			preparedStatement.setInt(7, pwinfo.getZSiteId());
			preparedStatement.setString(8, pwinfo.getDirection());
			preparedStatement.setString(9, pwinfo.getCreateTime());
			preparedStatement.setString(10, pwinfo.getCreateUser());
			preparedStatement.setInt(11, pwinfo.getApwServiceId());
			preparedStatement.setInt(12, pwinfo.getZpwServiceId());
			preparedStatement.setInt(13, pwinfo.getRelatedServiceId());
			preparedStatement.setInt(14, pwinfo.getRelatedServiceType());
			preparedStatement.setInt(15, pwinfo.getaPortConfigId());
			preparedStatement.setInt(16, pwinfo.getzPortConfigId());
			preparedStatement.setInt(17, pwinfo.getType().getValue());
			preparedStatement.setInt(18, pwinfo.getIsSingle());
			preparedStatement.setString(19, pwinfo.getAoppositeId());
			preparedStatement.setString(20, pwinfo.getZoppositeId());
			preparedStatement.setString(21, pwinfo.getJobStatus());
			preparedStatement.setInt(22, pwinfo.getExpStrategy());
			preparedStatement.setInt(23, pwinfo.getExpAssignment());
			preparedStatement.setInt(24, pwinfo.getPhbToExpId());
			preparedStatement.setInt(25, pwinfo.getPhbStrategy());
			preparedStatement.setInt(26, pwinfo.getPhbAssignment());
			preparedStatement.setInt(27, pwinfo.getExpTophbId());
			preparedStatement.setInt(28, pwinfo.getPayload());
			preparedStatement.setInt(29, pwinfo.getaVlanEnable());
			preparedStatement.setInt(30, pwinfo.getaOutVlanValue());
			preparedStatement.setString(31, pwinfo.getaSourceMac());
			preparedStatement.setString(32, pwinfo.getAtargetMac());
			preparedStatement.setInt(33, pwinfo.getzVlanEnable());
			preparedStatement.setInt(34, pwinfo.getzOutVlanValue());
			preparedStatement.setString(35, pwinfo.getzSourceMac());
			preparedStatement.setString(36, pwinfo.getZtargetMac());
			preparedStatement.setString(37, pwinfo.getBusinessType());
			preparedStatement.setInt(38, pwinfo.getBackInlabel());
			preparedStatement.setInt(39, pwinfo.getBackOutlabel());
			preparedStatement.setInt(40, pwinfo.getAtp_id());
			preparedStatement.setInt(41, pwinfo.getZtp_id());
			preparedStatement.setInt(42, pwinfo.getQosModel());
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				result = resultSet.getInt(1);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}

	/**
	 * 修改pwinfo
	 * 
	 * @param pwinfo
	 *            实体
	 * @param connection
	 *            数据库连接
	 * @return 修改的记录数
	 * @throws Exception
	 */
	public int update(PwInfo pwinfo, Connection connection) throws Exception {
		if (null == pwinfo) {
			throw new Exception("pwinfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;

		try {
			sql = "update pwInfo set pwName=?,pwStatus=?,tunnelId=?,inlabelValue=?,outlabelValue=?,direction=?,createTime=?,createUser=?,apwServiceId=?,zpwServiceId=? ,rserviceId=?,rserviceType=?,aPortConfigId=?,zPortConfigId=?,type=?,aoppositeId=?,zoppositeId=?,jobStatus=?,expStrategy=?,expAssignment=?,phbToExpId=?,phbStrategy=?,phbAssignment=?,expTophbId=? ,isSingle=? ,payLoad = ? ,aVlanEnable= ?,aOutVlanValue= ?" + ",aSourceMac= ?,atargetMac= ?,zVlanEnable= ?,zOutVlanValue= ?,zSourceMac= ?,ztargetMac= ?,businessType=?,backInlabel=?,backOutlabel=? ,atp_id=?,ztp_id=? ,qosModel =? where pwId=?";

			preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setString(1, pwinfo.getPwName());
			preparedStatement.setInt(2, pwinfo.getPwStatus());
			preparedStatement.setInt(3, pwinfo.getTunnelId());
			preparedStatement.setInt(4, pwinfo.getInlabelValue());
			preparedStatement.setInt(5, pwinfo.getOutlabelValue());
			preparedStatement.setString(6, pwinfo.getDirection());
			preparedStatement.setString(7, pwinfo.getCreateTime());
			preparedStatement.setString(8, pwinfo.getCreateUser());
			preparedStatement.setInt(9, pwinfo.getApwServiceId());
			preparedStatement.setInt(10, pwinfo.getZpwServiceId());
			preparedStatement.setInt(11, pwinfo.getRelatedServiceId());
			preparedStatement.setInt(12, pwinfo.getRelatedServiceType());
			preparedStatement.setInt(13, pwinfo.getaPortConfigId());
			preparedStatement.setInt(14, pwinfo.getzPortConfigId());
			preparedStatement.setInt(15, pwinfo.getType().getValue());
			preparedStatement.setString(16, pwinfo.getAoppositeId());
			preparedStatement.setString(17, pwinfo.getZoppositeId());
			preparedStatement.setString(18, pwinfo.getJobStatus());
			preparedStatement.setInt(19, pwinfo.getExpStrategy());
			preparedStatement.setInt(20, pwinfo.getExpAssignment());
			preparedStatement.setInt(21, pwinfo.getPhbToExpId());
			preparedStatement.setInt(22, pwinfo.getPhbStrategy());
			preparedStatement.setInt(23, pwinfo.getPhbAssignment());
			preparedStatement.setInt(24, pwinfo.getExpTophbId());
			preparedStatement.setInt(25, pwinfo.getIsSingle());
			preparedStatement.setInt(26, pwinfo.getPayload());
			preparedStatement.setInt(27, pwinfo.getaVlanEnable());
			preparedStatement.setInt(28, pwinfo.getaOutVlanValue());
			preparedStatement.setString(29, pwinfo.getaSourceMac());
			preparedStatement.setString(30, pwinfo.getAtargetMac());
			preparedStatement.setInt(31, pwinfo.getzVlanEnable());
			preparedStatement.setInt(32, pwinfo.getzOutVlanValue());
			preparedStatement.setString(33, pwinfo.getzSourceMac());
			preparedStatement.setString(34, pwinfo.getZtargetMac());
			preparedStatement.setString(35, pwinfo.getBusinessType());
			preparedStatement.setInt(36, pwinfo.getBackInlabel());
			preparedStatement.setInt(37, pwinfo.getBackOutlabel());
			preparedStatement.setInt(38, pwinfo.getAtp_id());
			preparedStatement.setInt(39, pwinfo.getZtp_id());
			preparedStatement.setInt(40, pwinfo.getQosModel());
			preparedStatement.setInt(41, pwinfo.getPwId());
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				result = resultSet.getInt(1);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}

	/**
	 * 通过主键删除pwinfo
	 * 
	 * @param pwId
	 *            主键
	 * @param connection
	 *            数据库连接
	 * @return 删除的记录数
	 * @throws Exception
	 */
	public int delete(int pwId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "delete from pwInfo where pwId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, pwId);

			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}
	
	public List<PwInfo> queryByType(PwInfo pwinfoCondition, Connection connection) throws Exception {

		if (null == pwinfoCondition) {
			throw new Exception("pwinfoCondition is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		List<PwInfo> list = null;
		PreparedStatement preparedStatement = null;
		List<Object> pwConditions = new ArrayList<Object>();// 查询的过滤条件
		try {
			sql="SELECT * FROM pwinfo WHERE 1=1";
			// 类型条件
			if (pwinfoCondition.getType() != null && pwinfoCondition.getType().getValue() != 0) {
				sql += " AND type=?";
				pwConditions.add(pwinfoCondition.getType().getValue());
			}
			if (pwinfoCondition.getASiteId() > 0) {
				sql += " AND (asiteid=? or zsiteid=?)";
				pwConditions.add(pwinfoCondition.getASiteId());
				pwConditions.add(pwinfoCondition.getASiteId());
			}
			
			sql += " AND isSingle=?";
			pwConditions.add(pwinfoCondition.getIsSingle());
			
			preparedStatement = connection.prepareStatement(sql);

			if (pwConditions.size() > 0) {
				for (int i = 0; i < pwConditions.size() + 0; i++) {
					preparedStatement.setObject(i + 1, pwConditions.get(i));
				}
			}
			list = this.excuteQuery(preparedStatement);
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		
		return list;
	}
	/**
	 * 通过条件查询
	 * 
	 * @param pwinfoCondition
	 *            查询条件
	 * @param connection
	 *            数据库连接
	 * @return List<PwInfo>集合
	 * @throws Exception
	 */
	public List<PwInfo> queryByCondition(PwInfo pwinfoCondition, Connection connection) throws Exception {

		if (null == pwinfoCondition) {
			throw new Exception("pwinfoCondition is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		List<PwInfo> list = null;
		PreparedStatement preparedStatement = null;
		List<Object> pwConditions = new ArrayList<Object>();// 查询的过滤条件
		try {
			// sql = "SELECT p.businessType,p.backInlabel,p.backOutlabel,p.ztargetMac,p.zSourceMac,p.zOutVlanValue,p.zVlanEnable,p.atargetMac,p.aSourceMac,p.aOutVlanValue,p.aVlanEnable,p.expStrategy,p.expAssignment,p.phbToExpId,p.phbStrategy,p.phbAssignment,p.expTophbId," +
			// "p.jobstatus,p.aoppositeId,p.zoppositeId,p.isSingle , p.pwId, p.pwName, p.pwStatus, p.tunnelId," +
			// "p.aSiteId,p.zSiteId, p.type, p.inlabelValue, p.outlabelValue,p.apwServiceId,p.zpwServiceId," +
			// "sa.CellId AS showaSiteName, sz.CellId AS showzSiteName,  p.direction, p.createTime, p.createUser, " +
			// "t.tunnelName,p.rserviceId,p.rserviceType,p.aPortConfigId,p.zPortConfigId,p.payload FROM pwinfo p, " +
			// "site_inst sa, site_inst sz, tunnel t WHERE p.tunnelId = t.tunnelId AND p.aSiteId = sa.site_inst_id AND p.zSiteId = sz.site_inst_id and p.issingle=0 ";
			//
			sql = "SELECT p.qosModel,p.atp_id,p.ztp_id,p.businessType,p.backInlabel,p.backOutlabel,p.ztargetMac,p.zSourceMac,p.zOutVlanValue,p.zVlanEnable,p.atargetMac,p.aSourceMac," + "p.aOutVlanValue,p.aVlanEnable,p.expStrategy,p.expAssignment,p.phbToExpId,p.phbStrategy,p.phbAssignment,p.expTophbId,p.jobstatus," + "p.aoppositeId,p.zoppositeId,p.isSingle , p.pwId, p.pwName, p.pwStatus, p.tunnelId,p.aSiteId,p.zSiteId, p.type, p.inlabelValue, " + "p.outlabelValue,p.apwServiceId,p.zpwServiceId,sa.CellId AS showaSiteName, sz.CellId AS showzSiteName,  p.direction, p.createTime," + " p.createUser,p.rserviceId,p.rserviceType,p.aPortConfigId,p.zPortConfigId,p.payload FROM pwinfo p, site_inst sa, " + "site_inst sz WHERE p.aSiteId = sa.site_inst_id AND p.zSiteId = sz.site_inst_id and p.issingle=0";
			if (pwinfoCondition.getPwId() > 0) {
				sql += " and pwId=?";
				pwConditions.add(pwinfoCondition.getPwId());
			}
			// 类型条件
			if (pwinfoCondition.getType() != null && pwinfoCondition.getType().getValue() != 0) {
				sql += " AND  p.type=?";
				pwConditions.add(pwinfoCondition.getType().getValue());
			}
			// A端或Z端网元
			if (pwinfoCondition.getASiteId() > 0) {
//				sql += " AND (p.aSiteId=? OR p.zSiteId=?)";
				sql += " AND p.aSiteId=?";
				pwConditions.add(pwinfoCondition.getASiteId());
//				pwConditions.add(pwinfoCondition.getASiteId());
			}
			if(pwinfoCondition.getZSiteId() > 0)
			{
				sql += " AND p.zSiteId=?";
				pwConditions.add(pwinfoCondition.getZSiteId());
			}
			// 承载tunnel
			if (pwinfoCondition.getTunnelId() > 0) {
				sql += " AND  p.tunnelId=?";
				pwConditions.add(pwinfoCondition.getTunnelId());
			}
			// pw状态查询
			if (pwinfoCondition.getPwStatus() != 0) {
				sql += " AND  p.pwStatus=?";
				pwConditions.add(pwinfoCondition.getPwStatus());
			}
			// 创建人
			if (null != pwinfoCondition.getCreateUser() && !"".equals(pwinfoCondition.getCreateUser())) {
				sql += " AND  p.createUser=?";
				pwConditions.add(pwinfoCondition.getCreateUser());
			}
			// pw名称模糊查询
			if (null != pwinfoCondition.getPwName() && !"".equals(pwinfoCondition.getPwName())) {
				sql += " AND  p.pwName like ?";
				pwConditions.add("%" + pwinfoCondition.getPwName() + "%");
			}
			// 标签范围
			if (pwinfoCondition.getInLblMinValue() != 0) {
				sql += " AND p.inlabelValue >=?";
				pwConditions.add(pwinfoCondition.getInLblMinValue());
			}
			if (pwinfoCondition.getInLblMaxValue() != 0) {
				sql += " AND p.inlabelValue <=?";
				pwConditions.add(pwinfoCondition.getInLblMaxValue());
			}
			if (pwinfoCondition.getOutLblMinValue() != 0) {
				sql += " AND p.outlabelValue >=?";
				pwConditions.add(pwinfoCondition.getOutLblMinValue());
			}
			if (pwinfoCondition.getOutLblMaxValue() != 0) {
				sql += " AND p.outlabelValue <=?";
				pwConditions.add(pwinfoCondition.getOutLblMaxValue());
			}
			if (pwinfoCondition.getBusinessType() != null && !pwinfoCondition.getBusinessType().equals("")){
				sql += " AND p.businessType = '"+pwinfoCondition.getBusinessType()+"'";
			}
			preparedStatement = connection.prepareStatement(sql);

			if (pwConditions.size() > 0) {
				for (int i = 0; i < pwConditions.size() + 0; i++) {
					preparedStatement.setObject(i + 1, pwConditions.get(i));
				}
			}
			list = this.excuteQuery_join(preparedStatement);
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return list;
	}

	/**
	 * 通过条件查询
	 * 
	 * @param pwinfoCondition
	 *            查询条件
	 * @param connection
	 *            数据库连接
	 * @return List<PwInfo>集合
	 * @throws Exception
	 */
	public PwInfo queryByPwidCondition(PwInfo pwinfoCondition, Connection connection) throws Exception {

		if (null == pwinfoCondition) {
			throw new Exception("pwinfoCondition is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PwInfo pwInfo = null;
		PreparedStatement preparedStatement = null;
		try {
			sql = "SELECT p.qosModel,p.atp_id,p.ztp_id,p.expStrategy,p.expAssignment,p.phbToExpId,p.phbStrategy,p.phbAssignment,p.expTophbId,p.jobstatus,p.aoppositeId,p.zoppositeId,p.isSingle , p.pwId, p.pwName, p.pwStatus, p.tunnelId,p.aSiteId,p.zSiteId, p.type, p.inlabelValue, p.outlabelValue,p.apwServiceId,p.zpwServiceId,sa.CellId AS showaSiteName, sz.CellId AS showzSiteName,  p.direction, p.createTime, p.createUser, t.tunnelName,p.rserviceId,p.rserviceType,p.aPortConfigId,p.zPortConfigId,p.payload FROM pwinfo p, site_inst sa, site_inst sz, tunnel t WHERE p.tunnelId = t.tunnelId AND p.aSiteId = sa.site_inst_id AND p.zSiteId = sz.site_inst_id";
			if (pwinfoCondition.getPwId() > 0) {
				sql += " and pwId=?";
			}
			preparedStatement = connection.prepareStatement(sql);
			if (pwinfoCondition.getPwId() > 0) {
				preparedStatement.setInt(1, pwinfoCondition.getPwId());
			}
			pwInfo = this.excuteQuery_join(preparedStatement).get(0);
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return pwInfo;
	}

	/**
	 * 通过条件查询 不关联其他表
	 * 
	 * @param pwinfoCondition
	 *            查询条件
	 * @param connection
	 *            数据库连接
	 * @return List<PwInfo>集合
	 * @throws Exception
	 */
	public PwInfo queryByPwidCondition_notjoin(PwInfo pwinfoCondition, Connection connection) throws Exception {

		PwInfo pwInfo = new PwInfo();
		if (null == pwinfoCondition) {
			throw new Exception("pwinfoCondition is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		List<PwInfo> pwInfoList = null;
		try {
			sql = "SELECT * from pwinfo where 1=1";

			if (pwinfoCondition.getPwId() > 0) {
				sql += " and pwId=" + pwinfoCondition.getPwId();
			}
			if (null != pwinfoCondition.getPwName() && !"".equals(pwinfoCondition.getPwName())) {
				sql += " and pwName = '" + pwinfoCondition.getPwName() + "'";
			}
			if (pwinfoCondition.getInlabelValue() >0)
			{
				sql += " and inlabelValue = " + pwinfoCondition.getInlabelValue();
			}
			if (pwinfoCondition.getOutlabelValue() >0)
			{
				sql += " and inlabelValue = " + pwinfoCondition.getOutlabelValue();
			}
			if (pwinfoCondition.getBackInlabel() >0)
			{
				sql += " and inlabelValue = " + pwinfoCondition.getBackInlabel();
			}
			if (pwinfoCondition.getBackOutlabel() >0)
			{
				sql += " and inlabelValue = " + pwinfoCondition.getBackOutlabel();
			}
			preparedStatement = connection.prepareStatement(sql);
			pwInfoList = this.excuteQuery(preparedStatement);
			if (pwInfoList.size() > 0) {
				return pwInfoList.get(0);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return pwInfo;
	}

	/**
	 * 通过pw.gettunnelId查询
	 */
	public List<PwInfo> queryByPwTunnelIdCondition(List<Integer> idList, Connection connection) throws Exception {

		if (null == idList) {
			throw new Exception("PWCondition is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<PwInfo> pwinfoList = null;
		PreparedStatement preparedStatement = null;
		String sql = null;
		String tunnelId = null;
		String ids = null;
		try {
			tunnelId = idList.toString();
			ids = tunnelId.substring(1, tunnelId.length() - 1);
			pwinfoList = new ArrayList<PwInfo>();
			sql = "SELECT * FROM pwinfo WHERE tunnelId in " + "(" + ids + ")";

			preparedStatement = connection.prepareStatement(sql);
			pwinfoList = this.excuteQuery(preparedStatement);
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
			tunnelId = null;
			ids = null;
		}
		return pwinfoList;
	}

	public void setUser(int pwId, int ServeceId, int ServiceType, Connection connection) throws Exception {
		if (0 == pwId) {
			throw new Exception("pwinfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		// int result = 0;

		try {
			sql = "update pwinfo set rserviceId=?,rserviceType=? where pwId=?";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, ServeceId);
			preparedStatement.setInt(2, ServiceType);
			preparedStatement.setInt(3, pwId);

			preparedStatement.executeUpdate();
			// resultSet = preparedStatement.getGeneratedKeys();
			// if(resultSet.next()){
			// result = resultSet.getInt(1);
			// }
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		// return result;
	}

	/**
	 * 根据site查询
	 * 
	 * @param siteId
	 *            网元ID
	 * @param connection
	 *            数据库连接
	 * @return
	 * @throws Exception
	 */
	public List<PwInfo> queryBySiteId(int siteId, Connection connection) throws Exception {

		if (siteId == 0) {
			throw new Exception("siteid is 0");
		}
		if (connection == null) {
			throw new Exception("connection is null");
		}

		List<PwInfo> pwList = null;
		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			pwList = new ArrayList<PwInfo>();
			sql = "select * from pwinfo p where p.issingle=0 and (aSiteId=" + siteId + " or zSiteId=" + siteId + ")";

			preparedStatement = connection.prepareStatement(sql);
			pwList = this.excuteQuery(preparedStatement);

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return pwList;
	}

	/**
	 * 批量修改状态
	 * 
	 * @param idList
	 *            id集合
	 * @param status
	 *            修改激活状态
	 * @param connection
	 *            数据库连接
	 * @throws Exception
	 */
	public void updateStatus(List<Integer> idList, int status, Connection connection) throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		String ids = null;
		PreparedStatement preparedStatement = null;
		try {

			if (null == idList) {
				sql = "update pwinfo set pwStatus=?";
			} else {
				ids = idList.toString();
				sql = "update pwinfo set pwStatus=? where pwId in (" + ids.subSequence(1, ids.length() - 1) + ")";
			}

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, status);

			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
			ids = null;
		}

	}

	/**
	 * 修改状态
	 * 
	 * @param siteId
	 *            网元id
	 * @param status
	 *            修改激活状态
	 * @param connection
	 *            数据库连接
	 * @throws Exception
	 */
	public void updateStatus(int siteId, int status, Connection connection) throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		try {

			sql = "update pwinfo set pwStatus=? where aSiteId = ? or zSiteId = ?";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, status);
			preparedStatement.setInt(2, siteId);
			preparedStatement.setInt(3, siteId);

			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

	}

	/**
	 * 根据网元ID和业务ID查询pw对象
	 * 
	 * @param siteId
	 *            网元id
	 * @param serviceId
	 *            业务id
	 * @return
	 * @throws Exception
	 */
	public PwInfo queryBySiteIdAndServiceId(int siteId, int serviceId, Connection connection) throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		PwInfo pwinfo = null;
		try {

			sql = "SELECT * from pwinfo where (aSiteId=? AND aPwServiceId=?) or (zSiteId=? AND zPwServiceId=?)";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			preparedStatement.setInt(2, serviceId);
			preparedStatement.setInt(3, siteId);
			preparedStatement.setInt(4, serviceId);
			if (this.excuteQuery(preparedStatement) != null && this.excuteQuery(preparedStatement).size() > 0) {
				pwinfo = this.excuteQuery(preparedStatement).get(0);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return pwinfo;
	}

	/**
	 * 查询某网元下的pw信息
	 * 
	 * @param siteId
	 * @param pwInfoCondition
	 *            存储单网元的pw过滤信息进行条件查询
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<PwInfo> queryNode(PwInfo pwInfoCondition, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		List<PwInfo> pwInfoList = null;
		List<Object> pwConditions = new ArrayList<Object>();
		try {

			sql = "select * from pwinfo p where (asiteId=? or zsiteid=?) ";
			// pw名称查询
			if (null != pwInfoCondition.getPwName() && !"".equals(pwInfoCondition.getPwName())) {
				sql += " AND  p.pwName like ?";
				pwConditions.add("%" + pwInfoCondition.getPwName() + "%");
			}
			// 类型
			if (pwInfoCondition.getType() != null && pwInfoCondition.getType().getValue() != 0) {
				sql += " AND  p.type=?";
				pwConditions.add(pwInfoCondition.getType().getValue());
			}
			// 承载tunnel
			if (pwInfoCondition.getTunnelId() > 0) {
				sql += " AND  p.tunnelId=?";
				pwConditions.add(pwInfoCondition.getTunnelId());
			}
			// 激活状态
			if (pwInfoCondition.getPwStatus() != 0) {
				sql += " AND  p.pwStatus=?";
				pwConditions.add(pwInfoCondition.getPwStatus());
			}
			// 标签范围
			if (pwInfoCondition.getInLblMinValue() != 0) {
				sql += " AND p.inlabelValue >=?";
				pwConditions.add(pwInfoCondition.getInLblMinValue());
			}
			if (pwInfoCondition.getInLblMaxValue() != 0) {
				sql += " AND p.inlabelValue <=?";
				pwConditions.add(pwInfoCondition.getInLblMaxValue());
			}
			if (pwInfoCondition.getOutLblMinValue() != 0) {
				sql += " AND p.outlabelValue >=?";
				pwConditions.add(pwInfoCondition.getOutLblMinValue());
			}
			if (pwInfoCondition.getOutLblMaxValue() != 0) {
				sql += " AND p.outlabelValue <=?";
				pwConditions.add(pwInfoCondition.getOutLblMaxValue());
			}
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, pwInfoCondition.getASiteId());
			preparedStatement.setInt(2, pwInfoCondition.getZSiteId());
			if (pwConditions.size() > 0) {
				for (int i = 3; i < pwConditions.size() + 3; i++) {
					preparedStatement.setObject(i, pwConditions.get(i - 3));
				}
			}
			pwInfoList = this.excuteQuery(preparedStatement);
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
			pwConditions = null;
		}
		return pwInfoList;

	}

	/**
	 * 执行查询语句
	 * 
	 * @param connection
	 *            数据库连接
	 * @param sql
	 *            sql语句
	 * @return 查询集合
	 * @throws Exception
	 */
	private List<PwInfo> excuteQuery_join(PreparedStatement preparedStatement) throws Exception {
		List<PwInfo> pwinfoList = null;
		ResultSet resultSet = null;
		PwInfo pwinfo = null;
		try {
			pwinfoList = new ArrayList<PwInfo>();
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				pwinfo = new PwInfo();
				pwinfo.setPwId(resultSet.getInt("pwId"));
				pwinfo.setPwName(resultSet.getString("pwName"));
				pwinfo.setType(EPwType.forms(resultSet.getInt("type")));
				pwinfo.setPwStatus(resultSet.getInt("pwStatus"));
				pwinfo.setTunnelId(resultSet.getInt("tunnelId"));
				pwinfo.setASiteId(resultSet.getInt("aSiteId"));
				pwinfo.setZSiteId(resultSet.getInt("zSiteId"));
				pwinfo.setInlabelValue(resultSet.getInt("inlabelValue"));
				pwinfo.setOutlabelValue(resultSet.getInt("outlabelValue"));
				pwinfo.setShowaSiteName(resultSet.getString("showaSiteName"));
				pwinfo.setShowzSiteName(resultSet.getString("showzSiteName"));
				pwinfo.setDirection(resultSet.getString("direction"));
				pwinfo.setCreateTime(DateUtil.strDate(resultSet.getString("createTime"), DateUtil.FULLTIME));
				pwinfo.setCreateUser(resultSet.getString("createUser"));
				pwinfo.setApwServiceId(resultSet.getInt("apwServiceId"));
				pwinfo.setZpwServiceId(resultSet.getInt("zpwServiceId"));
				pwinfo.setRelatedServiceId(resultSet.getInt("rserviceId"));
				pwinfo.setRelatedServiceType(resultSet.getInt("rserviceType"));
				pwinfo.setaPortConfigId(resultSet.getInt("aPortConfigId"));
				pwinfo.setzPortConfigId(resultSet.getInt("zPortConfigId"));
				pwinfo.setIsSingle(resultSet.getInt("isSingle"));
				pwinfo.setAoppositeId(resultSet.getString("aoppositeid"));
				pwinfo.setZoppositeId(resultSet.getString("zoppositeid"));
				pwinfo.setJobStatus(resultSet.getString("jobstatus"));
				pwinfo.setExpStrategy(resultSet.getInt("expStrategy"));
				pwinfo.setExpAssignment(resultSet.getInt("expAssignment"));
				pwinfo.setPhbToExpId(resultSet.getInt("phbToExpId"));
				pwinfo.setPhbStrategy(resultSet.getInt("phbStrategy"));
				pwinfo.setPhbAssignment(resultSet.getInt("phbAssignment"));
				pwinfo.setExpTophbId(resultSet.getInt("expTophbId"));
				pwinfo.setPayload(resultSet.getInt("payload"));
				pwinfo.setaVlanEnable(resultSet.getInt("aVlanEnable"));
				pwinfo.setaOutVlanValue(resultSet.getInt("aOutVlanValue"));
				pwinfo.setaSourceMac(resultSet.getString("aSourceMac"));
				pwinfo.setAtargetMac(resultSet.getString("atargetMac"));
				pwinfo.setzVlanEnable(resultSet.getInt("zVlanEnable"));
				pwinfo.setzOutVlanValue(resultSet.getInt("zOutVlanValue"));
				pwinfo.setzSourceMac(resultSet.getString("zSourceMac"));
				pwinfo.setZtargetMac(resultSet.getString("ztargetMac"));
				pwinfo.setBusinessType(resultSet.getString("businessType"));
				pwinfo.setBackInlabel(resultSet.getInt("backInlabel"));
				pwinfo.setBackOutlabel(resultSet.getInt("backOutlabel"));
				pwinfo.setAtp_id(resultSet.getInt("atp_id"));
				pwinfo.setZtp_id(resultSet.getInt("ztp_id"));
				pwinfo.setQosModel(resultSet.getInt("qosModel"));
				pwinfoList.add(pwinfo);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			pwinfo = null;
		}
		return pwinfoList;
	}

	/**
	 * 执行查询语句
	 * 
	 * @param connection
	 *            数据库连接
	 * @param sql
	 *            sql语句
	 * @return 查询集合
	 * @throws Exception
	 */
	private List<PwInfo> excuteQuery(PreparedStatement preparedStatement) throws Exception {
		List<PwInfo> pwinfoList = null;
		ResultSet resultSet = null;
		PwInfo pwinfo = null;
		try {
			pwinfoList = new ArrayList<PwInfo>();
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				pwinfo = new PwInfo();
				pwinfo.setPwId(resultSet.getInt("pwId"));
				pwinfo.setPwName(resultSet.getString("pwName"));
				pwinfo.setType(EPwType.forms(resultSet.getInt("type")));
				pwinfo.setPwStatus(resultSet.getInt("pwStatus"));
				pwinfo.setTunnelId(resultSet.getInt("tunnelId"));
				pwinfo.setASiteId(resultSet.getInt("aSiteId"));
				pwinfo.setZSiteId(resultSet.getInt("zSiteId"));
				pwinfo.setInlabelValue(resultSet.getInt("inlabelValue"));
				pwinfo.setOutlabelValue(resultSet.getInt("outlabelValue"));
				pwinfo.setDirection(resultSet.getString("direction"));
				pwinfo.setCreateTime(resultSet.getString("createTime"));
				pwinfo.setCreateUser(resultSet.getString("createUser"));
				pwinfo.setApwServiceId(resultSet.getInt("apwServiceId"));
				pwinfo.setZpwServiceId(resultSet.getInt("zpwServiceId"));
				pwinfo.setRelatedServiceId(resultSet.getInt("rserviceId"));
				pwinfo.setRelatedServiceType(resultSet.getInt("rserviceType"));
				pwinfo.setaPortConfigId(resultSet.getInt("aPortConfigId"));
				pwinfo.setzPortConfigId(resultSet.getInt("zPortConfigId"));
				pwinfo.setIsSingle(resultSet.getInt("isSingle"));
				pwinfo.setAoppositeId(resultSet.getString("aoppositeid"));
				pwinfo.setZoppositeId(resultSet.getString("zoppositeid"));
				pwinfo.setJobStatus(resultSet.getString("jobstatus"));
				pwinfo.setExpStrategy(resultSet.getInt("expStrategy"));
				pwinfo.setExpAssignment(resultSet.getInt("expAssignment"));
				pwinfo.setPhbToExpId(resultSet.getInt("phbToExpId"));
				pwinfo.setPhbStrategy(resultSet.getInt("phbStrategy"));
				pwinfo.setPhbAssignment(resultSet.getInt("phbAssignment"));
				pwinfo.setExpTophbId(resultSet.getInt("expTophbId"));
				pwinfo.setPayload(resultSet.getInt("payload"));
				pwinfo.setaVlanEnable(resultSet.getInt("aVlanEnable"));
				pwinfo.setaOutVlanValue(resultSet.getInt("aOutVlanValue"));
				pwinfo.setaSourceMac(resultSet.getString("aSourceMac"));
				pwinfo.setAtargetMac(resultSet.getString("atargetMac"));
				pwinfo.setzVlanEnable(resultSet.getInt("zVlanEnable"));
				pwinfo.setzOutVlanValue(resultSet.getInt("zOutVlanValue"));
				pwinfo.setzSourceMac(resultSet.getString("zSourceMac"));
				pwinfo.setZtargetMac(resultSet.getString("ztargetMac"));
				pwinfo.setBusinessType(resultSet.getString("businessType"));
				pwinfo.setBackInlabel(resultSet.getInt("backInlabel"));
				pwinfo.setBackOutlabel(resultSet.getInt("backOutlabel"));
				pwinfo.setAtp_id(resultSet.getInt("atp_id"));
				pwinfo.setZtp_id(resultSet.getInt("ztp_id"));
				pwinfo.setQosModel(resultSet.getInt("qosModel"));
				pwinfoList.add(pwinfo);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			pwinfo = null;
		}
		return pwinfoList;
	}

	/**
	 * 同步时查询pw
	 * 
	 * @author kk
	 * 
	 * @param siteId
	 *            网元主键
	 * @param pwServiceId
	 *            pw设备名称
	 * 
	 * @param connection
	 *            数据库连接
	 * 
	 * @return
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	public List<PwInfo> query_synchro(int siteId, int pwServiceId, int pwtype, Connection connection) throws Exception {

		if (0 == siteId) {
			throw new Exception("siteId is 0");
		}
		if (0 == pwServiceId) {
			throw new Exception("pwServiceId is 0");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		List<PwInfo> pwinfoList = null;
		try {
			sql = "select * from pwinfo where ((asiteid=? and apwServiceId=?) or (zsiteid=? and zpwServiceId=?)) and type=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			preparedStatement.setInt(2, pwServiceId);
			preparedStatement.setInt(3, siteId);
			preparedStatement.setInt(4, pwServiceId);
			preparedStatement.setInt(5, pwtype);

			pwinfoList = this.excuteQuery(preparedStatement);

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return pwinfoList;
	}

	/**
	 * 查询名称是否重复
	 * 
	 * @author kk
	 * 
	 * @param
	 * 
	 * @return
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	public int query_name(String afterName, String beforeName, Connection connection, int siteId) throws Exception {
		if (null == afterName) {
			throw new Exception("afterName is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		List<Object> paramList = new ArrayList<Object>();
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		try {
			sql = this.SELECT_BY_NAME;
			paramList.add(siteId);
			paramList.add(siteId);
			paramList.add(afterName);
			if (null != beforeName) {
				sql += " and pwName!=?";
				paramList.add(beforeName);
			}
			preparedStatement = connection.prepareStatement(sql);
			for (int i = 0; i < paramList.size(); i++) {
				preparedStatement.setObject(i + 1, paramList.get(i));
			}
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				result = resultSet.getInt("selectcount");
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			paramList = null;
			sql = null;
		}

		return result;
	}

	public int query_name(String afterName, String beforeName, Connection connection) throws Exception {
		if (null == afterName) {
			throw new Exception("afterName is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		List<Object> paramList = new ArrayList<Object>();
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		try {
			sql = "select count(*) as selectcount from pwinfo where pwName=?";
			paramList.add(afterName);
			if (null != beforeName) {
				sql += " and pwName!=?";
				paramList.add(beforeName);
			}
			preparedStatement = connection.prepareStatement(sql);
			for (int i = 0; i < paramList.size(); i++) {
				preparedStatement.setObject(i + 1, paramList.get(i));
			}
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				result = resultSet.getInt("selectcount");
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			paramList = null;
			sql = null;
		}

		return result;
	}

	/**
	 * 单网元名称验证
	 * 
	 * @param afterName
	 * @param beforeName
	 * @param connection
	 * @param siteId
	 * @return
	 * @throws Exception
	 */
	public int query_nameBySingle(String afterName, String beforeName, Connection connection, int siteId) throws Exception {
		if (null == afterName) {
			throw new Exception("afterName is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		List<Object> paramList = new ArrayList<Object>();
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		try {
			sql = this.SELECT_BY_NAME;
			paramList.add(siteId);
			paramList.add(siteId);
			paramList.add(afterName);
			if (null != beforeName) {
				sql += " and pwName!=?";
				paramList.add(beforeName);
			}
			preparedStatement = connection.prepareStatement(sql);
			for (int i = 0; i < paramList.size(); i++) {
				preparedStatement.setObject(i + 1, paramList.get(i));
			}
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				result = resultSet.getInt("selectcount");
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}finally{
					resultSet = null;
				}
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}finally{
					preparedStatement = null;
				}
			}
			paramList = null;
			sql = null;
		}

		return result;
	}

	/**
	 * 执行pw搜索合并数据，把单边的能匹配的合并成1条双边数据。
	 * 
	 * @author StonesLi --insert insert into pwinfo(pwName,pwStatus,tunnelId,inlabelValue,outlabelValue,aSiteId,zSiteId,direction,createTime,createUser,apwServiceId,zpwServiceId,rserviceId,rserviceType,aPortConfigId,zPortConfigId,type,isSingle) select concat('pw_',unix_timestamp()*1000) pwName,a.pwStatus,a.tunnelId,b.inlabelValue,b.outlabelValue,a.aSiteId,a.zSiteId , a.direction,now() createTime,a.createUser ,a.apwServiceId ,a.zpwServiceId ,a.rserviceId ,a.rserviceType ,a.aPortConfigId ,a.zPortConfigId ,b.type,0 isSingle from (select p.* from pwinfo p LEFT JOIN tunnel t on p.tunnelId=t.tunnelId where p.isSingle=1 and p.aSiteId=t.aSiteId and p.zSiteId=t.zSiteId order by p.tunnelId) a LEFT JOIN pwinfo b on a.tunnelId=b.tunnelId where a.isSingle=1 and b.isSingle=1 and a.aSiteId = b.zSiteId and a.zSiteId = b.aSiteId order by a.pwName -- delete p1 from pwinfo p1,( select a.pwId pwId1,b.pwId pwId2 from (select p.* from pwinfo p LEFT JOIN tunnel t on p.tunnelId=t.tunnelId where p.isSingle=1 and p.aSiteId=t.aSiteId and p.zSiteId=t.zSiteId order by p.tunnelId) a LEFT JOIN pwinfo b on a.tunnelId=b.tunnelId where a.isSingle=1 and b.isSingle=1 and a.aSiteId = b.zSiteId and a.zSiteId = b.aSiteId order by a.pwName ) p2 where p1.pwId=p2.pwId1 or p1.pwId=p2.pwId2 --
	 * **/
	public boolean exeSearchPW(Connection conn, String siteIdin) throws Exception {
		if (null == conn) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement ps = null;
		try {
			// 插入双边数据
			// sql = new StringBuffer().append(" insert into pwinfo(pwName,pwStatus,tunnelId,inlabelValue,outlabelValue,aSiteId,zSiteId,direction,createTime,createUser,apwServiceId,zpwServiceId,rserviceId,rserviceType,aPortConfigId,zPortConfigId,type,isSingle  ,aoppositeId ,zoppositeId,jobstatus,expStrategy,expAssignment,phbToExpId,phbStrategy,phbAssignment,expTophbId,payload ) ").append(" select concat('pw_',unix_timestamp()*1000) pwName,a.pwStatus,a.tunnelId,b.inlabelValue,b.outlabelValue,a.aSiteId,a.zSiteId , ").append(" a.direction,now() createTime,a.createUser ,a.apwServiceId ,b.zpwServiceId ,a.rserviceId ,a.rserviceType ,a.aPortConfigId ,b.zPortConfigId ,b.type,0 isSingle ,a.aoppositeId ,b.zoppositeId,a.jobstatus,a.expStrategy,a.expAssignment,a.phbToExpId,a.phbStrategy,a.phbAssignment,a.expTophbId,a.payload ").append(" from (select p.* from pwinfo p  LEFT JOIN tunnel t on p.tunnelId=t.tunnelId where p.isSingle=1 and p.aSiteId=t.aSiteId and p.zSiteId=t.zSiteId  ").append(" order by p.tunnelId) a LEFT JOIN pwinfo b on a.tunnelId=b.tunnelId  ").append(" where a.isSingle=1 and b.isSingle=1  ").append(" and a.aSiteId = b.zSiteId and a.zSiteId = b.aSiteId and a.inlabelValue=b.outlabelValue and a.outlabelValue=b.inlabelValue and (a.aSiteId in ").append(siteIdin).append(") and (a.zSiteId in ").append(siteIdin).append(" )  ").append(" order by a.pwName ;").toString();
			sql = new StringBuffer().append(" insert into pwinfo(pwName,pwStatus,tunnelId,inlabelValue,outlabelValue,aSiteId,zSiteId,direction,createTime,createUser,apwServiceId,zpwServiceId,rserviceId,rserviceType,aPortConfigId,zPortConfigId,type,isSingle  ,aoppositeId ,zoppositeId,jobstatus,expStrategy,expAssignment,phbToExpId,phbStrategy,phbAssignment,expTophbId,payload ,qosModel) ").append(" select concat('pw_',unix_timestamp()*1000) pwName,a.pwStatus,a.tunnelId,b.inlabelValue,b.outlabelValue,a.aSiteId,b.zSiteId , ").append(" a.direction,now() createTime,a.createUser ,a.apwServiceId ,b.zpwServiceId ,a.rserviceId ,a.rserviceType ,a.aPortConfigId ,b.zPortConfigId , ").append(" case when a.type=1 and b.type=1 then 1 when a.type=2 and b.type=2 then 2 when a.type=3 and b.type=3 then 3 when a.type=2 and b.type=3 then 4  when a.type=3 and b.type=2 then 5 else 0 end ").append(" type ,0 isSingle ,a.aoppositeId ,b.zoppositeId,a.jobstatus,a.expStrategy,a.expAssignment,a.phbToExpId,a.phbStrategy,a.phbAssignment,a.expTophbId,a.payload,a.qosModel ").append(" from  ( select p.* from pwinfo p LEFT JOIN tunnel t on p.tunnelId=t.tunnelId where p.isSingle=1 and p.zSiteId=0 and (p.aSiteId=t.aSiteId or p.zSiteId=t.zSiteId )  order by p.tunnelId) a  LEFT JOIN pwinfo b on a.tunnelId=b.tunnelId where a.isSingle=1 and b.isSingle=1 and a.pwid != b.pwId and a.inlabelValue=b.inlabelValue  and a.outlabelValue=b.outlabelValue and (a.aSiteId in  ").append(siteIdin).append(") and (a.zSiteId in ").append(siteIdin).append(" )  ").append(" order by a.pwName ;").toString();

			// System.out.println("pw.line1102 sql : "+sql);
			ps = conn.prepareStatement(sql);
			ps.executeUpdate();
			// update 业务表数据。把老的pwid变更成新的pwid。
			// .append(" update serviceinfo s, ").append(" (select p1.pwId,p2.pwid1,p2.pwid2 from pwinfo p1,( ").append(" select a.pwId pwid1,b.pwId pwid2,a.tunnelId,b.inlabelValue,b.outlabelValue,a.aSiteId,a.zSiteId ").append(" from  ( select p.* from pwinfo p LEFT JOIN tunnel t on p.tunnelId=t.tunnelId where p.isSingle=1 and p.zSiteId=0 and (p.aSiteId=t.aSiteId or p.zSiteId=t.zSiteId )  order by p.tunnelId) a  LEFT JOIN pwinfo b on a.tunnelId=b.tunnelId where a.isSingle=1 and b.isSingle=1 and a.pwid != b.pwId and a.inlabelValue=b.inlabelValue  and a.outlabelValue=b.outlabelValue and (a.aSiteId in  ").append(siteIdin).append(") and (a.zSiteId in ").append(siteIdin).append(" )  ").append(" order by a.pwName ;").toString();
			// .append(" from (select p.* from pwinfo p  LEFT JOIN tunnel t on p.tunnelId=t.tunnelId where p.isSingle=1 and p.aSiteId=t.aSiteId and p.zSiteId=t.zSiteId  ").append(" order by p.tunnelId) a LEFT JOIN pwinfo b on a.tunnelId=b.tunnelId  ").append(" where a.isSingle=1 and b.isSingle=1  ").append(" and a.aSiteId = b.zSiteId and a.zSiteId = b.aSiteId and a.inlabelValue=b.outlabelValue and a.outlabelValue=b.inlabelValue ").append(" ) p2 where p1.isSingle=0 and p1.tunnelId=p2.tunnelId and p1.inlabelValue=p2.inlabelValue and p1.aSiteId=p2.aSiteId and p1.zSiteId=p2.zSiteId and (p1.aSiteId in ").append(siteIdin).append(") and (p1.zSiteId in ").append(siteIdin).append(" )  ").append(" ) pw set s.pwId=pw.pwId where s.pwId=pw.pwid1 or s.pwId=pw.pwid2 ").toString();

			sql = new StringBuffer().append(" update serviceinfo s,  (select p1.pwId,p2.pwid1,p2.pwid2 from pwinfo p1,( ").append(" select  a.pwId pwid1,b.pwId pwid2,a.tunnelId,b.inlabelValue,b.outlabelValue,a.aSiteId,a.zSiteId ").append(" from ( select p.* from pwinfo p  ").append(" LEFT JOIN tunnel t on p.tunnelId=t.tunnelId where p.isSingle=1 and p.zSiteId=0 and (p.aSiteId=t.aSiteId or p.zSiteId=t.zSiteId )  order by p.tunnelId) a ").append(" LEFT JOIN pwinfo b on a.tunnelId=b.tunnelId	where a.isSingle=1 and b.isSingle=1 and a.pwid != b.pwId and a.inlabelValue=b.inlabelValue  and a.outlabelValue=b.outlabelValue ").append(" and (a.aSiteId in  ").append(siteIdin).append(") and (a.zSiteId in  ").append(siteIdin).append("  ) ) p2 where p1.isSingle=0 and p1.tunnelId=p2.tunnelId and p1.inlabelValue=p2.inlabelValue  ").append(" and p1.aSiteId=p2.aSiteId  ").append(" and (p1.aSiteId in  ").append(siteIdin).append(") and (p1.zSiteId in  ").append(siteIdin).append(")   ) pw ").append(" set s.pwId=pw.pwId  ").append(" where s.pwId=pw.pwid1 or s.pwId=pw.pwid2   ").toString();
			// System.out.println("2 sql : "+sql);
			ps = conn.prepareStatement(sql);
			ps.executeUpdate();

			// 更新qos关联表
			sql = new StringBuffer().append("update qosrelevance s, (select p1.pwId,p2.pwid1,p2.pwid2 from pwinfo p1,( ").append(" select  a.pwId pwid1,b.pwId pwid2,a.tunnelId,b.inlabelValue,b.outlabelValue,a.aSiteId,a.zSiteId ").append(" from ( select p.* from pwinfo p  ").append(" LEFT JOIN tunnel t on p.tunnelId=t.tunnelId where p.isSingle=1 and p.zSiteId=0 and (p.aSiteId=t.aSiteId or p.zSiteId=t.zSiteId )  order by p.tunnelId) a ").append(" LEFT JOIN pwinfo b on a.tunnelId=b.tunnelId	where a.isSingle=1 and b.isSingle=1 and a.pwid != b.pwId and a.inlabelValue=b.inlabelValue  and a.outlabelValue=b.outlabelValue ").append(" and (a.aSiteId in  ").append(siteIdin).append(") and (a.zSiteId in  ").append(siteIdin).append("  ) ) p2 where p1.isSingle=0 and p1.tunnelId=p2.tunnelId and p1.inlabelValue=p2.inlabelValue  ").append(" and p1.aSiteId=p2.aSiteId  ").append(" and (p1.aSiteId in  ").append(siteIdin).append(") and (p1.zSiteId in  ").append(siteIdin).append(")   ) pw ").append(" set s.objId=pw.pwId  ").append(" where objType='PW' and s.objId=pw.pwid1 or s.objId=pw.pwid2   ").toString();

			// System.out.println("PwInfoDao.java 1149更新qos sql : "+sql);
			ps = conn.prepareStatement(sql);
			ps.executeUpdate();

			// 删除刚才建立双边数据所用的单边数据
			sql = new StringBuffer().append(" delete p1 from pwinfo p1, (   ").append(" select p1.pwId,p2.pwid1,p2.pwid2 from pwinfo p1,(  select  a.pwId pwid1,b.pwId pwid2,a.tunnelId,b.inlabelValue,b.outlabelValue,a.aSiteId,a.zSiteId ").append(" from ( select p.* from pwinfo p  ").append(" LEFT JOIN tunnel t on p.tunnelId=t.tunnelId where p.isSingle=1 and p.zSiteId=0 and (p.aSiteId=t.aSiteId or p.zSiteId=t.zSiteId )  order by p.tunnelId) a ").append(" LEFT JOIN pwinfo b on a.tunnelId=b.tunnelId	where a.isSingle=1 and b.isSingle=1  ").append(" and a.pwid != b.pwId and a.inlabelValue=b.inlabelValue  and a.outlabelValue=b.outlabelValue  and (a.aSiteId in ").append(siteIdin).append(" )  ").append(" and (a.zSiteId in ").append(siteIdin).append("  ) ) p2 where p1.isSingle=0 and p1.tunnelId=p2.tunnelId and p1.inlabelValue=p2.inlabelValue   ").append(" and p1.aSiteId=p2.aSiteId  ").append(" and (p1.aSiteId in  ").append(siteIdin).append(" ) and (p1.zSiteId in ").append(siteIdin).append(" ) ) p2  ").append(" where p1.pwId=p2.pwId1 or p1.pwId=p2.pwId2  ").toString();

			// System.out.println("3 sql : "+sql);
			ps = conn.prepareStatement(sql);
			ps.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {
			if (ps != null) {
				try {
					ps.close();
				} catch (Exception e) {
					throw e;
				}
				ps = null;
			}
			sql = null;
		}
		return true;
	}

	/**
	 * 初始化pwinfo
	 * 
	 * @param pwId
	 *            主键
	 * @param connection
	 *            数据库连接
	 * @return 删除的记录数
	 * @throws Exception
	 */
	public int deleteBySiteId(int siteId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "delete from pwInfo where siteId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);

			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}

	public List<PwInfo> queryBySiteAndServiceId(int siteId, int serviceId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			sql = "select * from pwInfo where  (asiteid=? and apwServiceId=?) or (zsiteid=? and zpwServiceId=?)";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			preparedStatement.setInt(2, serviceId);
			preparedStatement.setInt(3, siteId);
			preparedStatement.setInt(4, serviceId);
			return this.excuteQuery(preparedStatement);
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
	}

	/**
	 * 根据tunnelId查询
	 * 
	 * @param tunnelId
	 *            tunnelID
	 * @param connection
	 *            数据库连接
	 * @return
	 * @throws Exception
	 */
	public List<PwInfo> queryPWByTunnelId(int tunnelId, Connection connection) throws Exception {

		if (tunnelId == 0) {
			throw new Exception("tunnelId is 0");
		}
		if (connection == null) {
			throw new Exception("connection is null");
		}

		List<PwInfo> pwInfoList = null;
		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			pwInfoList = new ArrayList<PwInfo>();
			sql = "select * from pwinfo p where p.tunnelId = ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, tunnelId);
			pwInfoList = this.excuteQuery(preparedStatement);

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return pwInfoList;
	}

	/**
	 * 根据tunnelId查询
	 * 
	 * @param tunnelId
	 *            tunnelID
	 * @param connection
	 *            数据库连接
	 * @return
	 * @throws Exception
	 */
	public List<PwInfo> queryByTunnelId(int tunnelId, Connection connection) throws Exception {

		if (tunnelId == 0) {
			throw new Exception("tunnelId is 0");
		}
		if (connection == null) {
			throw new Exception("connection is null");
		}

		List<PwInfo> pwInfoList = null;
		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			pwInfoList = new ArrayList<PwInfo>();
			sql = "select * from pwinfo p where p.isSingle=0 and p.tunnelId = ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, tunnelId);
			pwInfoList = this.excuteQuery(preparedStatement);

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return pwInfoList;
	}

	/**
	 * 根据site和是否为单网元查询查询
	 * 
	 * @param siteId
	 *            网元ID
	 * @param isSingle
	 *            是否为单网元，1=单网元 0=网络
	 * @param connection
	 *            数据库连接
	 * @return
	 * @throws Exception
	 */
	public List<PwInfo> queryPwBySiteIdAndIsSingle(int siteId, int isSingle, Connection connection) throws Exception {

		if (siteId == 0) {
			throw new Exception("siteid is 0");
		}
		if (connection == null) {
			throw new Exception("connection is null");
		}

		List<PwInfo> pwList = null;
		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			pwList = new ArrayList<PwInfo>();
			sql = "select * from pwinfo where isSingle=? and (aSiteId=? or zSiteId=?)";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, isSingle);
			preparedStatement.setInt(2, siteId);
			preparedStatement.setInt(3, siteId);

			pwList = this.excuteQuery(preparedStatement);

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return pwList;
	}

	/**
	 * 验证同一端口下标签是否被用过
	 * 
	 * @param aSiteId
	 * @param zSiteId
	 * @param label
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public boolean queryOutLabelUsable(int aSiteId, int zSiteId, int label, Connection connection) throws Exception {
		String sql = "";
		if (aSiteId > 0) {
			sql = "select inLabelValue from pwinfo where aSiteId = ?";
		}
		if (zSiteId > 0) {
			sql = "select outLabelValue from pwinfo where zSiteId = ?";
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int outLabel = 0;
		try {
			preparedStatement = connection.prepareStatement(sql);
			if (aSiteId > 0) {
				preparedStatement.setInt(1, aSiteId);
			}
			if (zSiteId > 0) {
				preparedStatement.setInt(1, zSiteId);
			}
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				outLabel = resultSet.getInt("frontLabelValue");
				if (outLabel == label) {
					return false;
				}
			}

			return true;
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}finally{
					resultSet = null;
				}
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}finally{
					preparedStatement = null;
				}
			}
		}
	}

	public List<PwInfo> selectSamePortByTunnelId(int tunnelId, int siteId, Connection connection) throws Exception {
		if (tunnelId == 0) {
			throw new Exception("tunnelId is 0");
		}
		if (siteId == 0) {
			throw new Exception("siteId is 0");
		}
		if (connection == null) {
			throw new Exception("connection is null");
		}

		List<PwInfo> pwInfoList = null;
		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			pwInfoList = new ArrayList<PwInfo>();
			sql = "select * from pwinfo p where p.tunnelId = ? and p.aSiteId = ? or p.zSiteId = ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, tunnelId);
			preparedStatement.setInt(2, siteId);
			preparedStatement.setInt(3, siteId);
			pwInfoList = this.excuteQuery(preparedStatement);
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return pwInfoList;
	}

	public List<PwInfo> selectServiceIdsByPwIds(String pwIds, Connection connection) throws Exception {
		if (pwIds == null) {
			throw new Exception("etreeList is null");
		}
		if (connection == null) {
			throw new Exception("connection is null");
		}

		List<PwInfo> pwInfoList = null;
		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			pwInfoList = new ArrayList<PwInfo>();
			sql = "select * from pwinfo p where p.pwid in (" + pwIds + ")";
			preparedStatement = connection.prepareStatement(sql);
			pwInfoList = this.excuteQuery(preparedStatement);
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return pwInfoList;
	}

	/**
	 * 根据网元名称和pwname查询
	 * 
	 * @param siteId
	 * @param name
	 * @return
	 */
	public List<PwInfo> selectBySiteIdAndName(int siteId, String name, Connection connection) {
		List<PwInfo> infos = null;
		String sql = "select*from pwinfo where pwname=?,asiteId=? or zsiteId=? ";
		PreparedStatement preparedStatement = null;
		try {
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, name);
			preparedStatement.setInt(1, siteId);
			preparedStatement.setInt(1, siteId);
			infos = this.excuteQuery(preparedStatement);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}finally{
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}finally{
					preparedStatement = null;
				}
			}
		}
		return infos;
	}

	public List<PwInfo> selectPwBySiteId(int siteId, Connection connection) throws Exception {
		if (siteId == 0) {
			throw new Exception("siteid is 0");
		}
		if (connection == null) {
			throw new Exception("connection is null");
		}

		List<PwInfo> pwList = null;
		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			pwList = new ArrayList<PwInfo>();
			sql = "select * from pwinfo p where aSiteId=" + siteId + " or zSiteId=" + siteId;

			preparedStatement = connection.prepareStatement(sql);
			pwList = this.excuteQuery(preparedStatement);

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return pwList;
	}

	public List<PwInfo> queryAll(Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		List<PwInfo> list = null;
		try {
			String sql = "SELECT p.atp_id,p.ztp_id,p.businessType,p.backInlabel,p.backOutlabel," + "p.ztargetMac,p.zSourceMac,p.zOutVlanValue,p.zVlanEnable,p.atargetMac,p.aSourceMac," + "" + "p.aOutVlanValue,p.aVlanEnable,p.expStrategy,p.expAssignment,p.phbToExpId," + "p.phbStrategy,p.phbAssignment,p.expTophbId,p.jobstatus,p.aoppositeId," + "p.zoppositeId,p.isSingle,p.pwId,p.pwName,p.pwStatus,p.tunnelId," + "p.aSiteId,p.zSiteId, p.type,p.inlabelValue,p.outlabelValue," + "p.apwServiceId,p.zpwServiceId,p.aSiteId AS showaSiteName, " + "p.zSiteId AS showzSiteName,p.direction, p.createTime," + "p.createUser,p.rserviceId,p.rserviceType,p.aPortConfigId," + "p.zPortConfigId,p.payload FROM pwinfo p";
			preparedStatement = connection.prepareStatement(sql);
			list = this.excuteQuery_join(preparedStatement);
		} catch (Exception e) {
			throw e;
		}finally{
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}finally{
					preparedStatement = null;
				}
			}
		}
		return list;
	}

	/**
	 * 查询不是eth类型的pw
	 * 
	 * @param siteId
	 *            为0说明是查询网络侧的。 不为0说明是查询单网元的
	 * @param connection
	 *            数据库连接
	 * @return
	 * @throws Exception
	 */
	public List<PwInfo> queryNotEth(PwInfo pwCondition, Connection connection) throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<PwInfo> pwInfoList = new ArrayList<PwInfo>();
		StringBuffer stringBuffer = new StringBuffer();
		List<Object> parameterList = new ArrayList<Object>();
		PreparedStatement preparedStatement = null;
		try {
			stringBuffer.append("SELECT * from pwinfo WHERE type!=?");
			parameterList.add(EPwType.ETH.getValue());

			if (pwCondition.getASiteId() > 0) {
				stringBuffer.append(" and (asiteid=? or zsiteid=?)");
				parameterList.add(pwCondition.getASiteId());
				parameterList.add(pwCondition.getASiteId());
			}
			
			stringBuffer.append(" and issingle=?");
			parameterList.add(pwCondition.getIsSingle());

			preparedStatement = connection.prepareStatement(stringBuffer.toString());
			for (int i = 0; i < parameterList.size(); i++) {
				preparedStatement.setObject(i + 1, parameterList.get(i));
			}

			pwInfoList = this.excuteQuery(preparedStatement);
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}finally{
					preparedStatement = null;
				}
			}
			stringBuffer = null;
			parameterList = null;
		}
		return pwInfoList;
	}
	
	/**
	 * mspw搜索
	 * @param list
	 * @param mapMspwInfo
	 * @throws Exception 
	 */
	public void doSearch(List<PwInfo> list,Map<Integer,List<MsPwInfo>> mapMspwInfo,Connection connection) throws Exception{
		String sql = "";
		PreparedStatement ps = null;
		int newPwId = 0;
		String newPwName = "pw_" + System.currentTimeMillis();
		String Tid = new String("(");
		for (PwInfo pwInfo : list) {
			Tid = Tid + pwInfo.getPwId() + ",";
		}
		Tid = Tid.substring(0, Tid.length() - 1) + ")";
		try {
			
			//普通或MSPW暂时都是普通
			sql = "INSERT INTO pwinfo ( pwName, pwStatus, tunnelId, inlabelValue, outlabelValue, aSiteId, zSiteId, direction, createTime, createUser, apwServiceId, zpwServiceId, rserviceId, rserviceType, aPortConfigId, zPortConfigId, type, isSingle, aoppositeId, zoppositeId, jobstatus, expStrategy, expAssignment, phbToExpId, phbStrategy, phbAssignment, expTophbId, payload,qosModel,businessType,snmpPwName ) " +
			"SELECT '"+newPwName+"', a.pwStatus, a.tunnelId, b.inlabelValue, b.outlabelValue, a.aSiteId, b.zSiteId, a.direction, now() createTime, a.createUser, a.apwServiceId, b.zpwServiceId, a.rserviceId, a.rserviceType, a.aPortConfigId, b.zPortConfigId, a.type, 0, a.aoppositeId, b.zoppositeId, a.jobstatus, a.expStrategy," +
			" a.expAssignment, a.phbToExpId, a.phbStrategy, a.phbAssignment, a.expTophbId, a.payload,a.qosModel ,0 ,a.snmpPwName FROM pwinfo a, pwinfo b WHERE a.pwId = "+list.get(0).getPwId()+" AND b.pwId = "+list.get(list.size()-1).getPwId();

			ps = connection.prepareStatement(sql);
			ps.executeUpdate();
			
			//
			sql = "select pwID from pwinfo where pwName='"+newPwName+"'";
			PreparedStatement preparedS = null;
			ResultSet rs = null;
			try {
				preparedS = connection.prepareStatement(sql);
				rs = preparedS.executeQuery();
				if (rs.next()) {
					newPwId = rs.getInt("pwId");
				}
			} catch (Exception e) {
				throw e;
			} finally {
				if (rs != null) {
					try {
						rs.close();
					} catch (Exception e) {
						throw e;
					}
					rs = null;
				}
				if (preparedS != null) {
					try {
						preparedS.close();
					} catch (Exception e) {
						throw e;
					}
					preparedS = null;
				}
			}
			//更新业务
			sql = "UPDATE serviceinfo set pwId = "+newPwId+" where pwId IN "+Tid;
			// System.out.println("2 sql : "+sql);
			ps = connection.prepareStatement(sql);
			ps.executeUpdate();

			// 更新pwnnibuffer关联表
			sql = "UPDATE pwnnibuffer set pwId = "+newPwId+" where pwId IN "+Tid;

			// System.out.println("PwInfoDao.java 1149更新qos sql : "+sql);
			ps = connection.prepareStatement(sql);
			ps.executeUpdate();
			
			// 更新qos关联表
			sql = "UPDATE qosrelevance set objId = "+newPwId+" where objType='PW' and  objId IN "+Tid;

			// System.out.println("PwInfoDao.java 1149更新qos sql : "+sql);
			ps = connection.prepareStatement(sql);
			ps.executeUpdate();

			// 更新oam表1
			sql = new StringBuffer().append("update oammepinfo set serviceId= ").append(newPwId).append(" where objType='PW' and serviceId in ").append(Tid).toString();
			// System.out.println("1461更新oammepinfo sql : "+sql);
			ps = connection.prepareStatement(sql);
			ps.executeUpdate();
			//更新告警
			sql = new StringBuffer().append("update current_alarm set objectid= ").append(newPwId).append(" where objecttype=4 and objectid in ").append(Tid).toString();
			ps = connection.prepareStatement(sql);
			ps.executeUpdate();
			sql = new StringBuffer().append("update history_alarm set objectid= ").append(newPwId).append(" where objecttype=4 and objectid in ").append(Tid).toString();
			ps = connection.prepareStatement(sql);
			ps.executeUpdate();
			//更新性能
			sql = new StringBuffer().append("update history_performance set objectid= ").append(newPwId).append(" where objecttype=4 and objectid in ").append(Tid).toString();
			ps = connection.prepareStatement(sql);
			ps.executeUpdate();
			
			ps = connection.prepareStatement(sql);
			// 删除刚才建立双边数据所用的单边数据
			sql = "delete from pwinfo where pwid in "+Tid;
			// System.out.println("3 sql : "+sql);
			ps = connection.prepareStatement(sql);
			ps.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally{
			if (ps != null) {
				try {
					ps.close();
				} catch (Exception e) {
					throw e;
				}
				ps = null;
			}
		
		}
	}

	public PwInfo queryByLabel(int aSiteId, int aInLabel, int zSiteId, int zInLabel, 
								int pwType, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		try {
			String sql = "SELECT * FROM pwinfo p WHERE p.issingle = 0 and ((aSiteId = "+aSiteId+" and " +
					"inlabelValue = "+aInLabel+" and zSiteId = "+zSiteId+" and outlabelValue = "+zInLabel+")" +
					" or (aSiteId = "+zSiteId+" and inlabelValue = "+zInLabel+" and zSiteId = "+aSiteId+" and " +
							"outlabelValue = "+aInLabel+"))" +
					" and type = "+pwType;
			preparedStatement = connection.prepareStatement(sql);
			List<PwInfo> list = this.excuteQuery(preparedStatement);
			if(list.size() > 0){
				return list.get(0);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
		}
		return null;
	}
	
	/**
	 * 通过pw.gettunnelId查询
	 */
	public List<PwInfo> selectByCondition(List<Integer> idList, Connection connection) throws Exception {

		if (null == idList) {
			throw new Exception("PWCondition is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<PwInfo> pwinfoList = null;
		PreparedStatement preparedStatement = null;
		String sql = null;
		String tunnelId = null;
		String ids = null;
		try {
			tunnelId = idList.toString();
			ids = tunnelId.substring(1, tunnelId.length() - 1);
			pwinfoList = new ArrayList<PwInfo>();
			sql = "SELECT * FROM pwinfo WHERE isSingle = 0 and tunnelId in " + "(" + ids + ")";

			preparedStatement = connection.prepareStatement(sql);
			pwinfoList = this.excuteQuery(preparedStatement);
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
			tunnelId = null;
			ids = null;
		}
		return pwinfoList;
	}
	
	/**
	 * 通过pwID查询
	 */
	public List<PwInfo> selectByPWId(PwInfo pwinfo, Connection connection,int lable) throws Exception {

		if (null == pwinfo) {
			throw new Exception("pwinfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<PwInfo> pwinfoList = null;
		PreparedStatement preparedStatement = null;
		String sql = null;
		try {
//			if(lable == 0)
//			{
				sql = "SELECT * FROM pwinfo WHERE pwId="+pwinfo.getPwId();
//			}else
//			{
//				sql = "SELECT * FROM pwinfo WHERE isSingle = 1 and pwId="+pwinfo.getPwId();
//			}
			preparedStatement = connection.prepareStatement(sql);
			pwinfoList = this.excuteQuery(preparedStatement);
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return pwinfoList;
	}
	
	public List<PwInfo> findPwByIds(List<Integer> pwIds,Connection connection) throws Exception
	{
		if (pwIds == null) {
			throw new Exception("etreeList is null");
		}
		if (connection == null) {
			throw new Exception("connection is null");
		}

		List<PwInfo> pwInfoList = null;
		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			pwInfoList = new ArrayList<PwInfo>();
			sql = "select * from pwinfo p where p.pwid in (" + pwIds.toString().subSequence(1, pwIds.toString().length()-1) + ")";
			preparedStatement = connection.prepareStatement(sql);
			pwInfoList = this.excuteQuery(preparedStatement);
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return pwInfoList;
	}
	
	/**
	 * 条件过滤，查询普通pw
	 * @param filterPwInfo
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<PwInfo> queryFilte(PwInfo filterPwInfo,Connection connection) throws Exception{
		if (filterPwInfo == null) {
			throw new Exception("filterPwInfo is null");
		}
		if (connection == null) {
			throw new Exception("connection is null");
		}

		List<PwInfo> pwInfoList = null;
		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			pwInfoList = new ArrayList<PwInfo>();
			sql = "SELECT p.qosModel,p.atp_id,p.ztp_id,p.businessType,p.backInlabel,p.backOutlabel,p.ztargetMac,p.zSourceMac,p.zOutVlanValue,p.zVlanEnable,p.atargetMac,p.aSourceMac," + "p.aOutVlanValue,p.aVlanEnable,p.expStrategy,p.expAssignment,p.phbToExpId,p.phbStrategy,p.phbAssignment,p.expTophbId,p.jobstatus," + "p.aoppositeId,p.zoppositeId,p.isSingle , p.pwId, p.pwName, p.pwStatus, p.tunnelId,p.aSiteId,p.zSiteId, p.type, p.inlabelValue, " + "p.outlabelValue,p.apwServiceId,p.zpwServiceId,sa.CellId AS showaSiteName, sz.CellId AS showzSiteName,  p.direction, p.createTime," + " p.createUser,p.rserviceId,p.rserviceType,p.aPortConfigId,p.zPortConfigId,p.payload FROM pwinfo p, site_inst sa, " + "site_inst sz " +
					"where 1=1 and p.aSiteId = sa.site_inst_id AND p.zSiteId = sz.site_inst_id and p.tunnelId > 0 and p.isSingle="+filterPwInfo.getIsSingle()+"";
			if(filterPwInfo.getASiteId() >0){
				sql += " and (p.aSiteId ="+filterPwInfo.getASiteId()+" or p.zSiteId="+filterPwInfo.getASiteId()+")";
			}
			if(filterPwInfo.getPwStatus()>0){
				sql += " and p.pwStatus="+filterPwInfo.getPwStatus()+"";
			}
			if(filterPwInfo.getType() != null && filterPwInfo.getType().getValue() >0){
				sql += " and p.type="+filterPwInfo.getType().getValue()+"";
			}
			if(!filterPwInfo.getPwName().equals("")){
				sql += " AND  p.pwName like '%"+filterPwInfo.getPwName()+"%'";
			}
			preparedStatement = connection.prepareStatement(sql);
			pwInfoList = this.excuteQuery_join(preparedStatement);
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return pwInfoList;
	}
}
