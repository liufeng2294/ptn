package com.nms.db.dao.ptn.qos;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.qos.MappingRelation;

public class MappingRelationDao {
	
	/**
	 * 新增qosMappingMode
	 * 
	 * @param qosMappingMode
	 *            插入实体对象
	 * @param connection
	 *            数据库链接
	 * @return 插入记录数
	 * @throws Exception
	 */
	public int insert(MappingRelation mappingRelation, Connection conn) throws Exception {
		if (mappingRelation == null) {
			throw new Exception("mappingRelation is null");
		}
		if (conn == null) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "insert into mappingrelation(tableId,siteId,portId) values(?,?,?)";
			preparedStatement = conn.prepareStatement(sql);
			preparedStatement.setInt(1, mappingRelation.getTableId());
			preparedStatement.setInt(2, mappingRelation.getSiteId());
			preparedStatement.setInt(3, mappingRelation.getPortId());
		
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 删除qosMappingMode
	 * 
	 * @param connection
	 *            数据库链接
	 * @return 删除记录数
	 * @throws Exception
	 * @throws Exception
	 */
	public int delete(int id, Connection conn) throws Exception {

		if (null == conn) {
			throw new Exception("connection is null");
		}

		StringBuffer sql = new StringBuffer();
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql.append(" delete from mappingrelation where id = ?");
			
			preparedStatement = conn.prepareStatement(sql.toString());
			preparedStatement.setInt(1, id);
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 修改qosMappingMode
	 * 
	 * @param qosMappingMode
	 * 
	 * @param connection
	 *            连接数据库
	 * @return 修改的条数
	 * @throws Exception
	 * @throws Exception
	 */
	public int update(MappingRelation mappingRelation, Connection conn) throws Exception {
		if (null == conn) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			
			sql = "update mappingrelation set tableid=?,siteid=?,portid=? where id = ?";
		
			preparedStatement = conn.prepareStatement(sql);
			preparedStatement.setInt(1, mappingRelation.getTableId());
			preparedStatement.setInt(2, mappingRelation.getSiteId());
			preparedStatement.setInt(3, mappingRelation.getPortId());
			preparedStatement.setInt(4, mappingRelation.getId());
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}
	
	
	/**
	 * 通过条件查询
	 * 
	 * @param qosMappingMode
	 *            查询条件
	 * @param connection
	 *            数据库连接
	 * @return List<ElineInfo>集合
	 * @throws Exception
	 */
	public List<MappingRelation> queryByCondition(MappingRelation mappingRelation, Connection connection) throws Exception {
		
		List<MappingRelation> mappingRelationList = null;
		if (null == mappingRelation) {
			throw new Exception("mappingRelation is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		try {

			sql = "select*from mappingrelation where 1=1 ";
			
			if (mappingRelation.getId() > 0) {
				sql += " and Id=" + mappingRelation.getId();
			}
			if (mappingRelation.getSiteId() > 0) {
				sql += " and siteId=" + mappingRelation.getSiteId();
			}
			if (mappingRelation.getTableId() > 0) {
				sql += " and tableid=" + mappingRelation.getTableId();
			}
			if (mappingRelation.getPortId() > 0) {
				sql += " and portid=" + mappingRelation.getPortId();
			}
			
			mappingRelationList = this.excuteQuery(connection, sql);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return mappingRelationList;
	}
	
	/**
	 * 执行查询语句
	 * 
	 * @param connection
	 *            数据库连接
	 * @param sql
	 *            sql语句
	 * @return 查询集合
	 * @throws Exception
	 */
	private List<MappingRelation> excuteQuery(Connection connection, String sql) throws Exception {
		List<MappingRelation>  mappingRelationList= null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		MappingRelation mappingRelation = null;
		try {
			mappingRelationList = new ArrayList<MappingRelation>();
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				mappingRelation = new MappingRelation();
				mappingRelation.setId(resultSet.getInt("Id"));
				mappingRelation.setTableId(resultSet.getInt("tableId"));
				mappingRelation.setPortId(resultSet.getInt("portId"));
				mappingRelation.setSiteId(resultSet.getInt("SiteId"));
				mappingRelationList.add(mappingRelation);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			mappingRelation = null;
		}

		return mappingRelationList;
	}
	/**
	 * 删除qosMappingMode
	 * 
	 * @param connection
	 *            数据库链接
	 * @return 删除记录数
	 * @throws Exception
	 * @throws Exception
	 */
	public int deleteBySiteId(int siteId, Connection conn) throws Exception {

		if (null == conn) {
			throw new Exception("connection is null");
		}

		StringBuffer sql = new StringBuffer();
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql.append(" delete from mappingrelation where siteId = ?");
			
			preparedStatement = conn.prepareStatement(sql.toString());
			preparedStatement.setInt(1, siteId);
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}
	
}
