package com.nms.model.ptn.ecn;

import java.sql.Connection;
import java.util.List;

import com.nms.db.bean.ptn.ecn.CCN;
import com.nms.db.dao.ptn.ecn.CCNDao;
import com.nms.model.util.ObjectService;
import com.nms.ui.manager.ExceptionManage;

public class CCNService extends ObjectService {
	public void setConnection(Connection connection) {
		super.connection = connection;
	}

	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}

	private CCNDao ccnDao = new CCNDao();

	public int insert(CCN ccn) throws Exception {
		if (ccn == null) {
			throw new Exception("ccn is null");
		}
		int ccnId = 1;
		try {
			connection.setAutoCommit(false);
			ccnId = this.ccnDao.insert(ccn, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
		return ccnId;
	}

	public int delete(CCN ccn) throws Exception {
		if (ccn == null) {
			throw new Exception("ccn is null");
		}
		int ccnId = 1;
		try {
			connection.setAutoCommit(false);
			ccnId = this.ccnDao.deleteById(ccn, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
		return ccnId;
	}

	public int update(CCN ccn) throws Exception {
		if (ccn == null) {
			throw new Exception("ccn is null");
		}
		int id = 0;
		try {
			connection.setAutoCommit(false);
			id = this.ccnDao.update(ccn, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
		return id;
	}

	public List<CCN> queryByNeID(String NeID) throws Exception {
		if (NeID == null) {
			throw new Exception("NeID is null");
		}
		List<CCN> ccnList = null;
		try {
			ccnList = this.ccnDao.queryByNeID(NeID, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return ccnList;
	}

	public List<CCN> queryByNeInAndName(String name, int neId) throws Exception {
		if (name == null) {
			throw new Exception("name is null");
		}
		try {
			return this.ccnDao.selectByNeIdAndName(name, neId, connection);
		} catch (Exception e) {
			throw e;
		}
	}
	/**
	 * 更改激活状态
	 * @param ccn
	 * @return
	 * @throws Exception
	 */
	public int updateStatus(CCN ccn) throws Exception {
		if (ccn == null) {
			throw new Exception("ccn is null");
		}
		int id = 0;
		try {
			connection.setAutoCommit(false);
			id = this.ccnDao.updateStatus(ccn, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
		return id;
	}
}
