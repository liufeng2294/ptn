package com.nms.model.ptn.path.pw;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.nms.db.bean.equipment.shelf.SiteInst;
import com.nms.db.bean.ptn.Businessid;
import com.nms.db.bean.ptn.oam.OamInfo;
import com.nms.db.bean.ptn.oam.OamMepInfo;
import com.nms.db.bean.ptn.oam.OamMipInfo;
import com.nms.db.bean.ptn.path.ServiceInfo;
import com.nms.db.bean.ptn.path.pw.MsPwInfo;
import com.nms.db.bean.ptn.path.pw.PwInfo;
import com.nms.db.bean.ptn.path.pw.PwNniInfo;
import com.nms.db.bean.ptn.path.tunnel.Tunnel;
import com.nms.db.bean.ptn.port.AcPortInfo;
import com.nms.db.bean.ptn.qos.QosInfo;
import com.nms.db.bean.ptn.qos.QosRelevance;
import com.nms.db.dao.ptn.BusinessidDao;
import com.nms.db.dao.ptn.LabelInfoDao;
import com.nms.db.dao.ptn.path.ServiceInfoDao;
import com.nms.db.dao.ptn.path.pw.MsPwInfoDao;
import com.nms.db.dao.ptn.path.pw.PwInfoDao;
import com.nms.db.dao.ptn.path.pw.PwNniDao;
import com.nms.db.dao.ptn.path.tunnel.TunnelDao;
import com.nms.db.dao.ptn.qos.QosInfoDao;
import com.nms.db.dao.ptn.qos.QosRelevanceDao;
import com.nms.db.enums.EActionType;
import com.nms.db.enums.EManufacturer;
import com.nms.db.enums.EPwType;
import com.nms.db.enums.EServiceType;
import com.nms.db.enums.OamTypeEnum;
import com.nms.model.equipment.shlef.SiteService;
import com.nms.model.ptn.LabelInfoService;
import com.nms.model.ptn.oam.OamInfoService;
import com.nms.model.ptn.path.tunnel.TunnelService;
import com.nms.model.ptn.port.AcInfoService;
import com.nms.model.ptn.qos.QosInfoService;
import com.nms.model.ptn.qos.QosRelevanceService;
import com.nms.model.util.LabelManage;
import com.nms.model.util.ObjectService;
import com.nms.model.util.Services;
import com.nms.ui.manager.BusinessIdException;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.ExceptionManage;
import com.nms.ui.manager.ResourceUtil;
import com.nms.ui.manager.UiUtil;
import com.nms.ui.manager.keys.StringKeysTip;

public class PwInfoService extends ObjectService {

	public void setConnection(Connection connection) {
		super.connection = connection;
	}

	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}

	private PwInfoDao pwInfoDao = new PwInfoDao();
	
	private TunnelDao tunnelDao = new TunnelDao();

	public int save(PwInfo pwinfo) throws Exception, BusinessIdException {

		if (pwinfo == null) {
			throw new Exception("pwinfo is null");
		}

		int pwId = 0;
		Businessid aServiceId = null;
		Businessid zServiceId = null;
//		QosInfoService qosInfoService = null;
		OamInfoService oamInfoService = null;
		// TunnelService tunnelService = null;
		// Tunnel tunnel = null;
		BusinessidDao businessidDao = null;
		PwNniDao pwNniDao = null;
		PwNniInfo aPwnniInfo = null;
		PwNniInfo zPwNniInfo = null;
		QosRelevanceService qosRelevanceService = null;
		List<QosRelevance> qosRelevanceList = null;
		MsPwInfoDao msPwInfoDao = null;
		SiteService siteService = null;
		try {
			connection.setAutoCommit(false);
			siteService=(SiteService) ConstantUtil.serviceFactory.newService(Services.SITE, this.connection);
			businessidDao = new BusinessidDao();
//			qosInfoService = (QosInfoService) ConstantUtil.serviceFactory.newService(Services.QosInfo, this.connection);
			oamInfoService = (OamInfoService) ConstantUtil.serviceFactory.newService(Services.OamInfo, this.connection);
			pwNniDao = new PwNniDao();
			msPwInfoDao = new MsPwInfoDao();
			// 给A和Z端从ID管理表分配设备ID
			if (pwinfo.getIsSingle() == 0) {
					if (pwinfo.getApwServiceId() == 0 ) {
						aServiceId = businessidDao.query(pwinfo.getASiteId(), this.getPwType(pwinfo, "a", pwinfo.getASiteId()), connection);
					} else {
						aServiceId = businessidDao.query(pwinfo.getApwServiceId(), pwinfo.getASiteId(), this.getPwType(pwinfo, "a", pwinfo.getASiteId()), connection);
					}
					if (aServiceId == null) {
						throw new BusinessIdException(siteService.getSiteName(pwinfo.getASiteId())+ResourceUtil.srcStr(StringKeysTip.TIP_PWID));
					}
					pwinfo.setApwServiceId(aServiceId.getIdValue());
					businessidDao.update(aServiceId.getId(), 1, connection);
				
					if (pwinfo.getZpwServiceId() == 0 ) {
						zServiceId = businessidDao.query(pwinfo.getZSiteId(), this.getPwType(pwinfo, "z", pwinfo.getZSiteId()), connection);
					} else {
						zServiceId = businessidDao.query(pwinfo.getZpwServiceId(), pwinfo.getZSiteId(), this.getPwType(pwinfo, "z", pwinfo.getZSiteId()), connection);
					}
					if (zServiceId == null) {
						throw new BusinessIdException(siteService.getSiteName(pwinfo.getZSiteId())+ResourceUtil.srcStr(StringKeysTip.TIP_PWID));
					}
					pwinfo.setZpwServiceId(zServiceId.getIdValue());
					businessidDao.update(zServiceId.getId(), 1, connection);
				
			} else {
				if (pwinfo.getASiteId() > 0) {
					if (pwinfo.getApwServiceId() == 0) {
						aServiceId = businessidDao.query(pwinfo.getASiteId(), this.getPwType(pwinfo, "a", pwinfo.getASiteId()), connection);
					} else {
						aServiceId = businessidDao.query(pwinfo.getApwServiceId(), pwinfo.getASiteId(), this.getPwType(pwinfo, "a", pwinfo.getASiteId()), connection);
					}
					if (aServiceId == null) {
						throw new BusinessIdException(siteService.getSiteName(pwinfo.getASiteId())+ResourceUtil.srcStr(StringKeysTip.TIP_PWID));
					}
					pwinfo.setApwServiceId(aServiceId.getIdValue());
					businessidDao.update(aServiceId.getId(), 1, connection);
				} else if(pwinfo.getZSiteId() > 0) {
					if (pwinfo.getZpwServiceId() == 0) {
						zServiceId = businessidDao.query(pwinfo.getZSiteId(), this.getPwType(pwinfo, "z", pwinfo.getZSiteId()), connection);
					} else {
						zServiceId = businessidDao.query(pwinfo.getZpwServiceId(), pwinfo.getZSiteId(), this.getPwType(pwinfo, "z", pwinfo.getZSiteId()), connection);
					}
					if (zServiceId == null) {
						throw new BusinessIdException(siteService.getSiteName(pwinfo.getZSiteId())+ResourceUtil.srcStr(StringKeysTip.TIP_PWID));
					}
					pwinfo.setZpwServiceId(zServiceId.getIdValue());
					businessidDao.update(zServiceId.getId(), 1, connection);
				}
			}
			// 获取标签
			this.getLabel(pwinfo);

			pwId = this.pwInfoDao.insert(pwinfo, connection);
			pwinfo.setPwId(pwId);

			if (pwinfo.getApwServiceId() > 0) {
				aPwnniInfo = this.getPwNniInfo(pwId, pwinfo.getASiteId(), pwinfo.getApwServiceId());
				pwNniDao.insert(aPwnniInfo, connection);
			}
			if (pwinfo.getZpwServiceId() > 0) {
				zPwNniInfo = this.getPwNniInfo(pwId, pwinfo.getZSiteId(), pwinfo.getZpwServiceId());
				pwNniDao.insert(zPwNniInfo, connection);
			}

			List<OamInfo> oamList = pwinfo.getOamList();
			if (oamList != null && oamList.size() > 0) {
				for (OamInfo oamInfo : oamList) {
					if (oamInfo.getOamType() == OamTypeEnum.AMEP) {
						oamInfo.getOamMep().setServiceId(pwId);
						oamInfo.getOamMep().setObjId(aServiceId.getIdValue());
						oamInfo.setOamType(OamTypeEnum.AMEP);
					} else if (oamInfo.getOamType() == OamTypeEnum.ZMEP) {
						oamInfo.getOamMep().setServiceId(pwId);
						oamInfo.getOamMep().setObjId(zServiceId.getIdValue());
						oamInfo.setOamType(OamTypeEnum.ZMEP);
					} else if (oamInfo.getOamType() == OamTypeEnum.MEP) {
						oamInfo.getOamMep().setServiceId(pwId);
						oamInfo.getOamMep().setObjId(ConstantUtil.siteId);
						oamInfo.setOamType(OamTypeEnum.MEP);
					} else if (oamInfo.getOamType() == OamTypeEnum.MIP) {

					}
					oamInfoService.saveOrUpdate(oamInfo);
				}
			}
			if(pwinfo.getMsPwInfos() != null){
				for(MsPwInfo msPwInfo: pwinfo.getMsPwInfos()){
					msPwInfo.setPwId(pwId);
					msPwInfoDao.insert(msPwInfo, connection);
				}
			}
			
			// List<QosInfo> qosList = pwinfo.getQosList();
			// if (qosList != null && qosList.size() > 0) {
			// for (int i = 0; i < qosList.size(); i++) {
			// qosList.get(i).setObjId(pwId);
			// if (null == qosList.get(i).getQosname() || "".equals(qosList.get(i).getQosname())) {
			// qosList.get(i).setQosname(qosList.get(i).getQosType().toLowerCase() + "pw" + pwId);
			// }
			// }
			// qosInfoService.saveOrUpdate(qosList);
			// }

			qosRelevanceService = (QosRelevanceService) ConstantUtil.serviceFactory.newService(Services.QOSRELEVANCE, this.connection);
			qosRelevanceList = qosRelevanceService.getList(pwinfo);
			if(qosRelevanceList != null && qosRelevanceList.size() >0)
			{
				qosRelevanceService.save(qosRelevanceList);
			}

			//离线网元数据下载
			if(0!=pwinfo.getASiteId()){
				super.dateDownLoad(pwinfo.getASiteId(),pwinfo.getPwId(), EServiceType.PW.getValue(), EActionType.INSERT.getValue());
			}
			if(0!=pwinfo.getZSiteId()){
				super.dateDownLoad(pwinfo.getZSiteId(),pwinfo.getPwId(), EServiceType.PW.getValue(), EActionType.INSERT.getValue());
			}
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (BusinessIdException e) {
			connection.rollback();
			throw e;
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
		return pwId;
	}

	/**
	 * 新增时，插入默认的pwnni数据
	 * 
	 * @author kk
	 * 
	 * @param
	 * 
	 * @return
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	private PwNniInfo getPwNniInfo(int pwId, int siteId, int pwBusinessId) throws Exception {
		PwNniInfo pwNniInfo = new PwNniInfo();
		pwNniInfo.setPwId(pwId);
		pwNniInfo.setSiteId(siteId);
		pwNniInfo.setPwBusinessId(pwBusinessId);
		SiteService siteService=(SiteService) ConstantUtil.serviceFactory.newService(Services.SITE, this.connection);
		/**
		 * 添加陈晓默认 vlan
		 */
		if (siteService.getManufacturer(siteId) == EManufacturer.CHENXIAO.getValue()) {
			pwNniInfo.setExitRule(UiUtil.getCodeByValue("exitRule", "0").getId());
			pwNniInfo.setSvlan("1");
		}
		// 武汉
		else {
		pwNniInfo.setExitRule(UiUtil.getCodeByValue("PORTTAGBEHAVIOR", "0").getId());
		pwNniInfo.setSvlan("2");
		}
//		UiUtil.closeService(siteService);

		pwNniInfo.setVlanpri("0");
		pwNniInfo.setTpid(UiUtil.getCodeByValue("LAGVLANTPID", "1").getId());
		pwNniInfo.setHorizontalDivision(UiUtil.getCodeByValue("VCTRAFFICPOLICING", "1").getId());
		pwNniInfo.setMacAddressLearn(UiUtil.getCodeByValue("MACLEARN", "1").getId());
		pwNniInfo.setTagAction(UiUtil.getCodeByValue("TAGRECOGNITION", "0").getId());
		pwNniInfo.setControlEnable(UiUtil.getCodeByValue("ENABLEDSTATUE", "1").getId());
		return pwNniInfo;
	}

	/**
	 * 获取label
	 * @param lsp lsp对象
	 * @throws Exception
	 */
	private void getLabel(PwInfo pwInfo) throws Exception {
		if (null == pwInfo) {
			throw new Exception("pwInfo is null");
		}
		LabelInfoService labelInfoService = null;
		SiteService siteService = null;
		try {
			int manufacturerA = 0;
			int manufacturerZ = 0;
			int manufacturer = 0;
			int aLabel = 0;
			int zLabel = 0;
			LabelInfoDao labelInfoDao = new LabelInfoDao();
		    labelInfoService = (LabelInfoService) ConstantUtil.serviceFactory.newService(Services.LABELINFO, this.connection);
			siteService = (SiteService) ConstantUtil.serviceFactory.newService(Services.SITE, this.connection);
			// 等于1是晨晓设备,入标签网元唯一
			manufacturerA = siteService.getManufacturer(pwInfo.getASiteId());
			manufacturerZ = siteService.getManufacturer(pwInfo.getZSiteId());
			//判断isSingle，为0，则代表网络侧，为1，则代表单网元
			if(pwInfo.getIsSingle() == 0){
				if (pwInfo.getInlabelValue() == 0) {
					//普通类型的PW
					if("0".equals(pwInfo.getBusinessType())){
						// 没有填写标签值说明是eline快速配置或者是批量创建普通PW，自动分配标签
						aLabel = this.matchLabel(pwInfo, labelInfoDao, manufacturerA, manufacturerZ);
						this.updateLabelStatus(labelInfoDao, aLabel, pwInfo.getASiteId(), manufacturerA);
						pwInfo.setInlabelValue(aLabel);
						zLabel = this.matchLabel(pwInfo, labelInfoDao, manufacturerA, manufacturerZ);
						this.updateLabelStatus(labelInfoDao, zLabel, pwInfo.getZSiteId(), manufacturerZ);
						pwInfo.setOutlabelValue(zLabel);
					}else{
						//批量创建多段pw时分配标签
						List<MsPwInfo> msPwList = pwInfo.getMsPwInfos();
						for (int i = 0; i < msPwList.size()+1; i++) {
							PwInfo pwTmp = new PwInfo();
							int aSiteId = 0;
							int zSiteId = 0;
							if(i == 0){
								aSiteId = pwInfo.getASiteId();
								zSiteId = msPwList.get(i).getSiteId();
							}else if(i == msPwList.size()){
								aSiteId = msPwList.get(i-1).getSiteId();
								zSiteId = pwInfo.getZSiteId();
							}else{
								aSiteId = msPwList.get(i-1).getSiteId();
								zSiteId = msPwList.get(i).getSiteId();
							}
							manufacturerA = siteService.getManufacturer(aSiteId);
							manufacturerZ = siteService.getManufacturer(zSiteId);
							pwTmp.setASiteId(aSiteId);
							pwTmp.setZSiteId(zSiteId);
							//a端标签
							aLabel = this.matchLabel(pwTmp, labelInfoDao, manufacturerA, manufacturerZ);
							if(i == 0){
								this.updateLabelStatus(labelInfoDao, aLabel, zSiteId, manufacturerZ);
								pwInfo.setInlabelValue(aLabel);
								msPwList.get(i).setFrontInlabel(aLabel);
							}else if(i == msPwList.size()){
								this.updateLabelStatus(labelInfoDao, aLabel, aSiteId, manufacturerA);
								msPwList.get(i-1).setBackInlabel(aLabel);
								pwInfo.setBackInlabel(aLabel);
							}else{
								this.updateLabelStatus(labelInfoDao, aLabel, aSiteId, manufacturerA);
								msPwList.get(i-1).setBackInlabel(aLabel);
								msPwList.get(i).setFrontInlabel(aLabel);
							}
							//z端标签
							zLabel = this.matchLabel(pwTmp, labelInfoDao, manufacturerA, manufacturerZ);
							if(i == 0){
								this.updateLabelStatus(labelInfoDao, zLabel, aSiteId, manufacturerA);
								pwInfo.setOutlabelValue(zLabel);
								msPwList.get(i).setBackOutlabel(zLabel);
							}else if(i == msPwList.size()){
								this.updateLabelStatus(labelInfoDao, aLabel, zSiteId, manufacturerZ);
								msPwList.get(i-1).setFrontOutlabel(zLabel);
								pwInfo.setBackOutlabel(zLabel);
							}else{
								this.updateLabelStatus(labelInfoDao, aLabel, zSiteId, manufacturerZ);
								msPwList.get(i-1).setFrontOutlabel(zLabel);
								msPwList.get(i).setBackOutlabel(zLabel);
							}
						}
					}
				} else {
					if("1".equals(pwInfo.getBusinessType())){
						labelInfoDao.insertNewLabel(pwInfo.getOutlabelValue(), pwInfo.getASiteId(),manufacturerA == 1 ? "CX" : "PW", connection);
						labelInfoDao.updateStatusBatch(pwInfo.getOutlabelValue(), pwInfo.getASiteId(), 0, manufacturerA == 1 ? "CX" : "PW", connection);
						for(MsPwInfo msPwInfo : pwInfo.getMsPwInfos()){
							manufacturer = siteService.getManufacturer(msPwInfo.getSiteId());
							labelInfoDao.insertNewLabel(msPwInfo.getFrontInlabel(), msPwInfo.getSiteId(),manufacturer == 1 ? "CX" : "PW", connection);
							labelInfoDao.updateStatusBatch(msPwInfo.getFrontInlabel(), msPwInfo.getSiteId(), 0,manufacturer == 1 ? "CX" : "PW", connection);
							labelInfoDao.insertNewLabel(msPwInfo.getBackInlabel(), msPwInfo.getSiteId(), manufacturer == 1 ? "CX" : "PW", connection);
							labelInfoDao.updateStatusBatch(msPwInfo.getBackInlabel(), msPwInfo.getSiteId(), 0, manufacturer == 1 ? "CX" : "PW", connection);
						}
						labelInfoDao.insertNewLabel(pwInfo.getBackInlabel(), pwInfo.getZSiteId(), manufacturerZ == 1 ? "CX" : "PW", connection);
						labelInfoDao.updateStatusBatch(pwInfo.getBackInlabel(), pwInfo.getZSiteId(), 0, manufacturerZ == 1 ? "CX" : "PW", connection);
					}else{
						labelInfoDao.insertNewLabel(pwInfo.getInlabelValue(), pwInfo.getASiteId(),manufacturerA == 1 ? "CX" : "PW", connection);
						labelInfoDao.insertNewLabel(pwInfo.getOutlabelValue(), pwInfo.getZSiteId(),manufacturerZ == 1 ? "CX" : "PW", connection);
						labelInfoDao.updateStatusBatch(pwInfo.getInlabelValue(), pwInfo.getASiteId(), 0,manufacturerA == 1 ? "CX" : "PW", connection);
						labelInfoDao.updateStatusBatch(pwInfo.getOutlabelValue(), pwInfo.getZSiteId(), 0,manufacturerZ == 1 ? "CX" : "PW", connection);
					}
				}
			}else{
				// 填写了标签，说明是单网元配置，直接修改标签状态
//				labelInfoService.saveOrUpdate(pwInfo.getInlabelValue(), ConstantUtil.siteId, 0, connection);
				if(pwInfo.getZSiteId() > 0){
					labelInfoService.saveOrUpdate(pwInfo.getOutlabelValue(), pwInfo.getZSiteId(), 0, manufacturerZ == 1 ? "CX" : "PW", connection);
				}else if(pwInfo.getASiteId() > 0){
					labelInfoService.saveOrUpdate(pwInfo.getInlabelValue(), pwInfo.getASiteId(), 0,manufacturerA == 1 ? "CX" : "PW", connection);
				}
				if(pwInfo.getMsPwInfos() != null && pwInfo.getMsPwInfos().size() >0){
					
					for(MsPwInfo msPwInfo : pwInfo.getMsPwInfos()){
						manufacturer = siteService.getManufacturer(msPwInfo.getSiteId());
						labelInfoDao.insertNewLabel(msPwInfo.getFrontInlabel(), msPwInfo.getSiteId(),manufacturer == 1 ? "CX" : "PW", connection);
						labelInfoDao.updateStatusBatch(msPwInfo.getFrontInlabel(), msPwInfo.getSiteId(), 0,manufacturer == 1 ? "CX" : "PW", connection);
						labelInfoDao.insertNewLabel(msPwInfo.getBackInlabel(), msPwInfo.getSiteId(), manufacturer == 1 ? "CX" : "PW", connection);
						labelInfoDao.updateStatusBatch(msPwInfo.getBackInlabel(), msPwInfo.getSiteId(), 0, manufacturer == 1 ? "CX" : "PW", connection);
					}
				}
				
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
//			UiUtil.closeService(labelInfoService);
//			UiUtil.closeService(siteService);
		}
	}

	private int matchLabel(PwInfo pwInfo, LabelInfoDao labelInfoDao, int manufacturerA,
			int manufacturerZ) throws Exception {
		int label = 0;
		List<Integer> labelList = labelInfoDao.quertyLabelListBySite(pwInfo.getASiteId(), pwInfo.getZSiteId(),
				new ArrayList<Integer>(), "PW", connection, manufacturerA, manufacturerZ);
		if (labelList.size() == 0) {
			label = this.initLabel(pwInfo.getASiteId(), pwInfo.getZSiteId(), labelInfoDao, connection,
									manufacturerA, manufacturerZ);
		}else{
			label = labelList.get(0);
		}
		return label;
	}
	
	private void updateLabelStatus(LabelInfoDao labelInfoDao, 
			int label, int siteId, int manufacturer) throws Exception{
		labelInfoDao.updateStatusBatch(label, siteId, 0, manufacturer == 1 ? "CX" : "PW", connection);
	}

	/**
	 * 初始化标签
	 */
	private int initLabel(int asiteId, int zsiteId, LabelInfoDao labelInfoDao, Connection connection,
							int manufacturerA, int manufacturerZ) throws Exception {
		try {
			while (true) {
				LabelManage labelManage = new LabelManage();
				labelManage.addLabel(asiteId, zsiteId, "PW", connection);
				List<Integer> labelList = labelInfoDao.quertyLabelListBySite(asiteId, zsiteId,
						new ArrayList<Integer>(), "PW", connection, manufacturerA, manufacturerZ);
				for (Integer label : labelList) {
					if(label > 0){
						return label;
					}
				}
			}
		} catch (Exception e) {
			throw e;
		}
	}

	/**
	 * 获取pw的类型，取业务id时用
	 * 
	 * @return
	 * @throws Exception
	 */
	private String getPwType(PwInfo pwinfo, String type, int siteId) throws Exception {
		SiteService siteService=(SiteService) ConstantUtil.serviceFactory.newService(Services.SITE, this.connection);
		try {
			if (siteService.getManufacturer(siteId) == EManufacturer.valueOf("WUHAN").getValue()) {
				return "ethpw";
			}
		} catch (Exception e) {
			throw e;
		} finally {
//			UiUtil.closeService(siteService);
		}
		if (pwinfo.getType() == EPwType.PDH_SDH) {
			if ("a".equals(type)) {
				return "pdhpw";
			} else {
				return "sdhpw";
			}
		} else if (pwinfo.getType() == EPwType.SDH_PDH) {
			if ("a".equals(type)) {
				return "sdhpw";
			} else {
				return "pdhpw";
			}
		} else {
			return pwinfo.getType().toString().toLowerCase() + "pw";
		}

	}

	public int update(PwInfo pwinfo) throws Exception {

		if (pwinfo == null) {
			throw new Exception("pwinfo is null");
		}

		int result = 0;
		PwInfo oldPwInfo = null;
		OamInfoService oamInfoService = null;
		QosRelevanceService qosRelevanceService = null;
		LabelInfoService labelService = null;
		MsPwInfoDao msPwInfoDao = null;
		try {
			connection.setAutoCommit(false);

			oamInfoService = (OamInfoService) ConstantUtil.serviceFactory.newService(Services.OamInfo, this.connection);
		    labelService = (LabelInfoService) ConstantUtil.serviceFactory.newService(Services.LABELINFO, this.connection);
		    msPwInfoDao = new MsPwInfoDao();
			//先释放之前的标签，在更新pw，更新标签
			//释放标签
		    oldPwInfo = new PwInfo();
		    oldPwInfo.setPwId(pwinfo.getPwId());
			oldPwInfo = selectBypwid_notjoin(oldPwInfo);
			if(oldPwInfo.getIsSingle() == 0){
				//修改标签状态，如果是网络侧，修改a，z两端，否则只修改一端
				if("1".equals(oldPwInfo.getBusinessType())){
					labelService.updateBatch(oldPwInfo.getOutlabelValue(), oldPwInfo.getASiteId(), 1, "PW");
					for(MsPwInfo msPwInfo: oldPwInfo.getMsPwInfos()){
						labelService.updateBatch(msPwInfo.getFrontInlabel(), msPwInfo.getSiteId(), 1, "PW");
						labelService.updateBatch(msPwInfo.getBackInlabel(), msPwInfo.getSiteId(), 1, "PW");
					}
					labelService.updateBatch(oldPwInfo.getBackInlabel(), oldPwInfo.getZSiteId(), 1, "PW");
				}else{
					labelService.updateBatch(oldPwInfo.getInlabelValue(), oldPwInfo.getASiteId(), 1, "PW");
					labelService.updateBatch(oldPwInfo.getOutlabelValue(), oldPwInfo.getZSiteId(), 1,"PW");
				}
				
			}else{
				if(oldPwInfo.getASiteId()>0){
					labelService.updateBatch(oldPwInfo.getInlabelValue(), oldPwInfo.getASiteId(), 1, "PW");
				}else if(oldPwInfo.getZSiteId()>0){
					labelService.updateBatch(oldPwInfo.getOutlabelValue(), oldPwInfo.getZSiteId(), 1, "PW");
				}else
				{
					if(oldPwInfo.getMsPwInfos() != null && oldPwInfo.getMsPwInfos().size()> 0)
					{
						for(MsPwInfo msPwInfo: oldPwInfo.getMsPwInfos()){
							labelService.updateBatch(msPwInfo.getFrontInlabel(), msPwInfo.getSiteId(), 1, "PW");
							labelService.updateBatch(msPwInfo.getBackInlabel(), msPwInfo.getSiteId(), 1, "PW");
						}	
					}
				}
			}
			//更新标签
			//将labelInfo中没有的数据插入labelInfo中
			if(pwinfo.getIsSingle() == 0){
				if("1".equals(pwinfo.getBusinessType())){
					labelService.insertNewLabel(pwinfo.getOutlabelValue(), pwinfo.getASiteId(), "PW");
					labelService.updateBatch(pwinfo.getOutlabelValue(), pwinfo.getASiteId(), 0, "PW");
					for(MsPwInfo msPwInfo: pwinfo.getMsPwInfos()){
						labelService.insertNewLabel(msPwInfo.getFrontInlabel(), msPwInfo.getSiteId(), "PW");
						labelService.updateBatch(msPwInfo.getFrontInlabel(), msPwInfo.getSiteId(), 0, "PW");
						labelService.insertNewLabel(msPwInfo.getBackInlabel(), msPwInfo.getSiteId(),"PW");
						labelService.updateBatch(msPwInfo.getBackInlabel(), msPwInfo.getSiteId(), 0, "PW");
					}
					labelService.insertNewLabel(pwinfo.getBackInlabel(), pwinfo.getZSiteId(), "PW");
					labelService.updateBatch(pwinfo.getBackInlabel(), pwinfo.getZSiteId(), 0, "PW");
				}else{
					labelService.insertNewLabel(pwinfo.getInlabelValue(), pwinfo.getASiteId(), "PW");
					labelService.insertNewLabel(pwinfo.getOutlabelValue(), pwinfo.getZSiteId(),"PW");
					// 修改前向标签状态
					labelService.updateBatch(pwinfo.getInlabelValue(), pwinfo.getASiteId(), 0,"PW");
					// 修改后向标签状态
					labelService.updateBatch(pwinfo.getOutlabelValue(), pwinfo.getZSiteId(), 0,"PW");
				}
			}else{
				if(pwinfo.getZSiteId()>0){
					labelService.insertNewLabel(pwinfo.getOutlabelValue(), pwinfo.getZSiteId(), "PW");
					labelService.updateBatch(pwinfo.getOutlabelValue(), pwinfo.getZSiteId(), 0, "PW");
				}else if(pwinfo.getASiteId()>0){
					labelService.insertNewLabel(pwinfo.getInlabelValue(), pwinfo.getASiteId(), "PW");
					labelService.updateBatch(pwinfo.getInlabelValue(), pwinfo.getASiteId(), 0, "PW");
				}else
				{
					if(pwinfo.getMsPwInfos() != null && pwinfo.getMsPwInfos().size()> 0)
					{
						for(MsPwInfo msPwInfo: pwinfo.getMsPwInfos()){
							labelService.insertNewLabel(msPwInfo.getFrontInlabel(), msPwInfo.getSiteId(), "PW");
							labelService.updateBatch(msPwInfo.getFrontInlabel(), msPwInfo.getSiteId(), 0, "PW");
							labelService.insertNewLabel(msPwInfo.getBackInlabel(), msPwInfo.getSiteId(),"PW");
							labelService.updateBatch(msPwInfo.getBackInlabel(), msPwInfo.getSiteId(), 0, "PW");
						}	
					}
					
				}
				
			}
			

			result = this.pwInfoDao.update(pwinfo, connection);

			List<OamInfo> oamList = pwinfo.getOamList();
			if (oamList != null && oamList.size() > 0) {
				for (OamInfo oamInfo : oamList) {
					if (oamInfo.getOamType() == OamTypeEnum.AMEP) {
						oamInfo.getOamMep().setServiceId(pwinfo.getPwId());
						oamInfo.getOamMep().setObjId(pwinfo.getApwServiceId());
						oamInfo.setOamType(OamTypeEnum.AMEP);
					} else if (oamInfo.getOamType() == OamTypeEnum.ZMEP) {
						oamInfo.getOamMep().setServiceId(pwinfo.getPwId());
						oamInfo.getOamMep().setObjId(pwinfo.getZpwServiceId());
						oamInfo.setOamType(OamTypeEnum.ZMEP);
					} else if (oamInfo.getOamType() == OamTypeEnum.MEP) {
						oamInfo.getOamMep().setServiceId(pwinfo.getPwId());
						oamInfo.getOamMep().setObjId(ConstantUtil.siteId);
						oamInfo.setOamType(OamTypeEnum.MEP);
					}
					oamInfoService.saveOrUpdate(oamInfo);
				}
			}

			qosRelevanceService = (QosRelevanceService) ConstantUtil.serviceFactory.newService(Services.QOSRELEVANCE, this.connection);
			if(null != pwinfo.getQosList() && pwinfo.getQosList().size() > 0){
				qosRelevanceService.synchro(pwinfo.getPwId(), pwinfo.getQosList().get(0), EServiceType.PW.toString());
			}

			//离线网元数据下载
			if(0!=pwinfo.getASiteId()){
				super.dateDownLoad(pwinfo.getASiteId(),pwinfo.getPwId(), EServiceType.PW.getValue(), EActionType.UPDATE.getValue());
			}
			if(0!=pwinfo.getZSiteId()){
				super.dateDownLoad(pwinfo.getZSiteId(),pwinfo.getPwId(), EServiceType.PW.getValue(), EActionType.UPDATE.getValue());
			}
			if(pwinfo.getMsPwInfos() != null){
				for(MsPwInfo msPwInfo : pwinfo.getMsPwInfos()){
					msPwInfoDao.update(msPwInfo, connection);
				}
			}
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
		return result;
	}

	public void setUser(int pwId, ServiceInfo sInfo) throws Exception {

		try {
			if (pwId == 0) {
				throw new Exception("pwinfo is null");
			}
			this.pwInfoDao.setUser(pwId, sInfo.getId(), sInfo.getServiceType(), connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} 
	}

	public void delete(List<PwInfo> pwList) throws Exception {

		PwNniDao pwNniDao = null;
		OamInfoService oamInfoService = null;
		LabelInfoService labelService = null;
		OamInfo oamInfo = null;
		OamMepInfo oamMepInfo = null;
		OamMipInfo oamMipInfo = null;
		BusinessidDao businessidDao = null;
		QosRelevanceDao qosRelevanceDao = null;
		QosRelevance qosRelevance = null;
		MsPwInfoDao msPwInfoDao = null;
		QosInfoDao qosInfoDao = null;
		try {
			connection.setAutoCommit(false);

			oamInfoService = (OamInfoService) ConstantUtil.serviceFactory.newService(Services.OamInfo, this.connection);
		    labelService = (LabelInfoService) ConstantUtil.serviceFactory.newService(Services.LABELINFO, this.connection);
			businessidDao = new BusinessidDao();

			pwNniDao = new PwNniDao();
			msPwInfoDao = new MsPwInfoDao();
			for (PwInfo obj : pwList) {
				oamInfo = new OamInfo();
				oamMepInfo = new OamMepInfo();
				oamMepInfo.setServiceId(obj.getPwId());
				oamMepInfo.setObjType("PW");
				oamInfo.setOamMep(oamMepInfo);

				oamMipInfo = new OamMipInfo();
				oamMipInfo.setServiceId(obj.getPwId());
				oamMipInfo.setObjType("PW");
				oamInfo.setOamMip(oamMipInfo);
				oamInfoService.delete(oamInfo);

				//删除之前先判断该条QoS是否被其他pw使用，如果被其他pw使用，则不删除，否则删除
				//先删除qosInfo,再删除qosRelevance
				qosRelevanceDao = new QosRelevanceDao();
				qosInfoDao = new QosInfoDao();
				List<QosRelevance> qosRelavanceList = this.getQosRelevanceList(obj);
				this.checkIsOccupy(obj, qosRelavanceList);
				if(qosRelavanceList != null && !qosRelavanceList.isEmpty()){
					for (QosRelevance relevance : qosRelavanceList) {
						if(!relevance.isRepeat()){
							qosInfoDao.deleteByGroupId(relevance.getQosGroupId(), connection);
						}
					}
				}
				qosRelevance = new QosRelevance();
				qosRelevance.setObjType(EServiceType.PW.toString());
				qosRelevance.setObjId(obj.getPwId());
				qosRelevanceDao.delete(qosRelevance, connection);

				if (obj.getaPwNniInfo() != null) {
					pwNniDao.delete(obj.getaPwNniInfo().getId(), connection);
				}
				if (obj.getzPwNniInfo() != null) {
					pwNniDao.delete(obj.getzPwNniInfo().getId(), connection);
				}
				// labelInfoService.updateBatch(obj.getInlabelValue(), "pw", 1);
				// labelInfoService.updateBatch(obj.getOutlabelValue(), "pw",
				// 1);
				if (obj.getIsSingle() == 0) { // 修改标签状态，如果是网络配置，修改a z�?否则只修改一�?
					if("1".equals(obj.getBusinessType())){
						labelService.updateBatch(obj.getOutlabelValue(), obj.getASiteId(), 1,"PW");
						for(MsPwInfo msPwInfo: obj.getMsPwInfos()){
							labelService.updateBatch(msPwInfo.getFrontInlabel(), msPwInfo.getSiteId(), 1,"PW");
							labelService.updateBatch(msPwInfo.getBackInlabel(), msPwInfo.getSiteId(), 1, "PW");
						}
						labelService.updateBatch(obj.getBackInlabel(), obj.getZSiteId(), 1, "PW");
					}else{
						labelService.updateBatch(obj.getInlabelValue(), obj.getASiteId(), 1, "PW");
						labelService.updateBatch(obj.getOutlabelValue(), obj.getZSiteId(), 1,"PW");
					}
				} else {
					if(obj.getASiteId()>0){
						labelService.updateBatch(obj.getInlabelValue(), obj.getASiteId(), 1,"PW");
					}else if(obj.getZSiteId()>0){
						labelService.updateBatch(obj.getOutlabelValue(), obj.getZSiteId(), 1,"PW");
					}else
					{
						if(obj.getMsPwInfos() != null && obj.getMsPwInfos().size() >0){
							for(MsPwInfo msPwInfo: obj.getMsPwInfos()){
								labelService.updateBatch(msPwInfo.getFrontInlabel(), msPwInfo.getSiteId(), 1,"PW");
								labelService.updateBatch(msPwInfo.getBackInlabel(), msPwInfo.getSiteId(), 1, "PW");
							}
						}
					}
				}
				Businessid businessId = new Businessid();
				if(obj.getASiteId()>0){
					businessId.setIdStatus(0);
					businessId.setIdValue(obj.getApwServiceId());
					businessId.setType(this.getPwType(obj, "a", obj.getASiteId()));
					businessId.setSiteId(obj.getASiteId());
					businessidDao.updateBusinessid(businessId, connection);
				}
				if(obj.getZSiteId()>0){
					businessId.setIdStatus(0);
					businessId.setIdValue(obj.getZpwServiceId());
					businessId.setSiteId(obj.getZSiteId());
					businessId.setType(this.getPwType(obj, "z", obj.getZSiteId()));
					businessidDao.updateBusinessid(businessId, connection);
				}
				//离线网元操作
				offLineAcion(obj);
				
				pwInfoDao.delete(obj.getPwId(), connection);
			
				if(obj.getMsPwInfos() != null){
					for(MsPwInfo msPwInfo: obj.getMsPwInfos()){
						msPwInfoDao.delete(msPwInfo.getId(), connection);
					}
				}
				
			}
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
	}

	/**
	 * 判断pw引用的该条QoS是否被其他pw使用
	 * @param qosRelavanceList 
	 */
	private void checkIsOccupy(PwInfo pw, List<QosRelevance> qosRelevanceList) {
		try {
			QosRelevanceDao qosRelevanceDao = new QosRelevanceDao();
			if(qosRelevanceList != null && !qosRelevanceList.isEmpty()){
				QosRelevance qosRelevance = new QosRelevance();
				for (QosRelevance relevance : qosRelevanceList) {
					qosRelevance.setSiteId(relevance.getSiteId());
					qosRelevance.setObjId(0);
					qosRelevance.setObjType(EServiceType.PW.toString());
					qosRelevance.setQosGroupId(relevance.getQosGroupId());
					List<QosRelevance> qosList = qosRelevanceDao.queryByCondition(qosRelevance, connection); 
					if(qosList != null && qosList.size() > 1){
						relevance.setRepeat(true);
					}else{
						relevance.setRepeat(false);
					}
				}
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}
	}
	
	private List<QosRelevance> getQosRelevanceList(PwInfo pw) throws Exception{
		QosRelevanceDao qosRelevanceDao = new QosRelevanceDao();
		QosRelevance qosRelevance = new QosRelevance();
		qosRelevance.setObjId(pw.getPwId());
		qosRelevance.setObjType(EServiceType.PW.toString());
		return qosRelevanceDao.queryByCondition(qosRelevance, connection);
	}

	/**
	 * 根据site查询
	 * 
	 * @param siteId
	 *            网元ID
	 * @return
	 * @throws Exception
	 */
	public List<PwInfo> select(int siteId) throws Exception {

		List<PwInfo> pwlList = new ArrayList<PwInfo>();
		try {

			pwlList = pwInfoDao.queryBySiteId(siteId, connection);
			if (null != pwlList && pwlList.size() != 0) {
				getOAMandQoSforPw(pwlList);
			}

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return pwlList;
	}

	public List<PwInfo> select() throws Exception {

		List<PwInfo> pwinfoList = null;
		PwNniDao pwNniDao = null;
		PwNniInfo pwNniInfo = null;
		List<PwNniInfo> infos = null;
		MsPwInfoDao msPwInfoDao = null;
		MsPwInfo mspwinfoCondition = null;
		try {
			PwInfo pwinfo = new PwInfo();
			pwNniDao = new PwNniDao();
			msPwInfoDao = new MsPwInfoDao();
			pwinfoList = pwInfoDao.queryByCondition(pwinfo, connection);

			for (PwInfo pwInfo : pwinfoList) {// 封装对应的pwnniInfo
				mspwinfoCondition = new MsPwInfo();
				mspwinfoCondition.setPwId(pwInfo.getPwId());
				pwNniInfo = new PwNniInfo();
				pwNniInfo.setPwId(pwInfo.getPwId());
				infos = pwNniDao.queryByCondition(pwNniInfo, connection);
				for (PwNniInfo info : infos) {
					if (info.getSiteId() == pwInfo.getASiteId() && pwInfo.getApwServiceId() != 0) {
						pwInfo.setaPwNniInfo(info);
					}
					if (info.getSiteId() == pwInfo.getZSiteId() && pwInfo.getZpwServiceId() != 0) {
						pwInfo.setzPwNniInfo(info);
					}
				}
				pwInfo.setMsPwInfos(msPwInfoDao.queryByCondition(mspwinfoCondition, connection));
			}
			getOAMandQoSforPw(pwinfoList);

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return pwinfoList;
	}

	public List<PwInfo> select(PwInfo pwinfoConditin) throws Exception {

		List<PwInfo> pwinfoList = null;
		PwNniDao pwNniDao = null;
		PwNniInfo pwNniInfo = null;
		List<PwNniInfo> infos = null;
		MsPwInfoDao msPwInfoDao = null;
		MsPwInfo mspwinfoCondition = null;
		List<Tunnel> tunnels = null;
		
		List<PwInfo> pwInfoList1 = null;
		List<PwInfo> pwInfoList2 = null;
		try {
			pwNniDao = new PwNniDao();
			pwinfoList = new ArrayList<PwInfo>();
			pwInfoList1 = pwInfoDao.queryByCondition(pwinfoConditin, connection);
			msPwInfoDao = new MsPwInfoDao();
			//先通过端口号查tunnel，再通过tunnel查pw，然后过滤pw
			if(pwinfoConditin.getPortId() > 0)
			{
				tunnels = this.tunnelDao.queryByportId(pwinfoConditin.getPortId(), connection);
				if(tunnels.size()>0)
				{
					List<Integer> tunnelIds = new ArrayList<Integer>();
					for(Tunnel tunnel:tunnels)
					{
						tunnelIds.add(tunnel.getTunnelId());
					}
					pwInfoList2 = pwInfoDao.queryByPwTunnelIdCondition(tunnelIds, connection);
					for(PwInfo pw1 : pwInfoList1)
					{
						for(PwInfo pw2 : pwInfoList2)
						{
							if(pw2.getPwId() == pw1.getPwId())
							{
								pwinfoList.add(pw1);
							}
						}
					}
				}
			}
			else
			{
				pwinfoList.addAll(pwInfoList1);
			}
			for (PwInfo pwInfo : pwinfoList) {// 封装对应的pwnniInfo
				mspwinfoCondition = new MsPwInfo();
				mspwinfoCondition.setPwId(pwInfo.getPwId());
				pwNniInfo = new PwNniInfo();
				pwNniInfo.setPwId(pwInfo.getPwId());
				infos = pwNniDao.queryByCondition(pwNniInfo, connection);
				for (PwNniInfo info : infos) {
					if (info.getSiteId() == pwInfo.getASiteId() && pwInfo.getApwServiceId() != 0) {
						pwInfo.setaPwNniInfo(info);
					}
					if (info.getSiteId() == pwInfo.getZSiteId() && pwInfo.getZpwServiceId() != 0) {
						pwInfo.setzPwNniInfo(info);
					}
				}
				pwInfo.setMsPwInfos(msPwInfoDao.queryByCondition(mspwinfoCondition, connection));
			}

			getOAMandQoSforPw(pwinfoList);

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return pwinfoList;
	}
	
	public List<PwInfo> selectbyType(PwInfo pwinfoConditin) throws Exception {

		List<PwInfo> pwinfoList = null;
		PwNniDao pwNniDao = null;
		PwNniInfo pwNniInfo = null;
		List<PwNniInfo> infos = null;
		MsPwInfoDao msPwInfoDao = null;
		MsPwInfo mspwinfoCondition = null;
		List<Tunnel> tunnels = null;
		
		List<PwInfo> pwInfoList1 = null;
		List<PwInfo> pwInfoList2 = null;
		try {
			pwNniDao = new PwNniDao();
			pwinfoList = new ArrayList<PwInfo>();
			pwInfoList1 = pwInfoDao.queryByType(pwinfoConditin, connection);
			msPwInfoDao = new MsPwInfoDao();
			//先通过端口号查tunnel，再通过tunnel查pw，然后过滤pw
			if(pwinfoConditin.getPortId() > 0)
			{
				tunnels = this.tunnelDao.queryByportId(pwinfoConditin.getPortId(), connection);
				if(tunnels.size()>0)
				{
					List<Integer> tunnelIds = new ArrayList<Integer>();
					for(Tunnel tunnel:tunnels)
					{
						tunnelIds.add(tunnel.getTunnelId());
					}
					pwInfoList2 = pwInfoDao.queryByPwTunnelIdCondition(tunnelIds, connection);
					for(PwInfo pw1 : pwInfoList1)
					{
						for(PwInfo pw2 : pwInfoList2)
						{
							if(pw2.getPwId() == pw1.getPwId())
							{
								pwinfoList.add(pw1);
							}
						}
					}
				}
			}
			else
			{
				pwinfoList.addAll(pwInfoList1);
			}
			for (PwInfo pwInfo : pwinfoList) {// 封装对应的pwnniInfo
				mspwinfoCondition = new MsPwInfo();
				mspwinfoCondition.setPwId(pwInfo.getPwId());
				pwNniInfo = new PwNniInfo();
				pwNniInfo.setPwId(pwInfo.getPwId());
				infos = pwNniDao.queryByCondition(pwNniInfo, connection);
				for (PwNniInfo info : infos) {
					if (info.getSiteId() == pwInfo.getASiteId() && pwInfo.getApwServiceId() != 0) {
						pwInfo.setaPwNniInfo(info);
					}
					if (info.getSiteId() == pwInfo.getZSiteId() && pwInfo.getZpwServiceId() != 0) {
						pwInfo.setzPwNniInfo(info);
					}
				}
				pwInfo.setMsPwInfos(msPwInfoDao.queryByCondition(mspwinfoCondition, connection));
			}

			getOAMandQoSforPw(pwinfoList);

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return pwinfoList;
	}

	public PwInfo selectBypwid(PwInfo pwinfo) throws Exception {
		PwInfo pwInfo2 = null;
		List<PwInfo> pwInfoList = null;
		try {
			pwInfoList = select(pwinfo);
			if (pwInfoList != null && pwInfoList.size() == 1) {
				pwInfo2 = pwInfoList.get(0);
			}
			// pwInfo2 = pwInfoDao.queryByPwidCondition(pwinfo, connection);

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return pwInfo2;
	}

	/**
	 * 根据pwID查询pw对象
	 * 
	 * @author kk
	 * @param pwinfo
	 * @return
	 * @throws Exception
	 */
	public PwInfo selectBypwid_notjoin(PwInfo pwinfo) throws Exception {
		PwInfo pwInfo = null;
		List<PwInfo> pwInfoList = null;
		PwNniDao pwNniDao = null;
		PwNniInfo pwNniInfo = null;
		List<PwNniInfo> infos = null;
		MsPwInfoDao msPwInfoDao = null;
		MsPwInfo mspwinfoCondition = null;
		try {
			pwNniDao = new PwNniDao();
			pwInfo = pwInfoDao.queryByPwidCondition_notjoin(pwinfo, connection);
			pwInfoList = new ArrayList<PwInfo>();
			pwInfoList.add(pwInfo);
			msPwInfoDao = new MsPwInfoDao();
			for (PwInfo pwInfo2 : pwInfoList) {// 封装对应的pwnniInfo
				pwNniInfo = new PwNniInfo();
				pwNniInfo.setPwId(pwInfo.getPwId());
				mspwinfoCondition = new MsPwInfo();
				mspwinfoCondition.setPwId(pwInfo.getPwId());
				infos = pwNniDao.queryByCondition(pwNniInfo, connection);
				for (PwNniInfo info : infos) {
					if (info.getSiteId() == pwInfo2.getASiteId() && pwInfo2.getApwServiceId() != 0) {
						pwInfo.setaPwNniInfo(info);
					}
					if (info.getSiteId() == pwInfo2.getZSiteId() && pwInfo2.getZpwServiceId() != 0) {
						pwInfo.setzPwNniInfo(info);
					}
				}
				pwInfo.setMsPwInfos(msPwInfoDao.queryByCondition(mspwinfoCondition, connection));
			}
			getOAMandQoSforPw(pwInfoList);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return pwInfo;
	}

	/**
	 * 根据tunnelID集合查询pw
	 * 
	 * @param tunnelIds
	 *            tunnel集合
	 * @return count
	 * @throws Exception
	 */
	public List<PwInfo> selectPwInfoByTunnelId(List<Integer> tunnelIds) throws Exception {

		List<PwInfo> pwList = null;
		try {
			pwList = pwInfoDao.queryByPwTunnelIdCondition(tunnelIds, connection);

			getOAMandQoSforPw(pwList);

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return pwList;
	}

	public void updateActiveStatus(List<Integer> idList, int active) throws Exception {

		try {
			connection.setAutoCommit(false);

			this.pwInfoDao.updateStatus(idList, active, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
	}

	public void updateActiveStatus(int siteId, int active) throws Exception {

		try {
			connection.setAutoCommit(false);

			this.pwInfoDao.updateStatus(siteId, active, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
	}

	private void getOAMandQoSforPw(List<PwInfo> pwList) {
		OamInfoService oamInfoService = null;
		QosInfoService qosInfoService = null;
		OamInfo oamInfo = null;
		OamMepInfo oamMepInfo = null;
		OamMipInfo oamMipInfo = null;
//		QosInfo qosInfo = null;
		PwNniDao pwNniDao = null;
		PwNniInfo pwNniInfo = null;
		List<PwNniInfo> pwNniInfoList = null;
		try {
			qosInfoService = (QosInfoService) ConstantUtil.serviceFactory.newService(Services.QosInfo, this.connection);
			oamInfoService = (OamInfoService) ConstantUtil.serviceFactory.newService(Services.OamInfo, this.connection);

			for (PwInfo pw : pwList) {
				oamInfo = new OamInfo();
				oamMepInfo = new OamMepInfo();
				oamMepInfo.setServiceId(pw.getPwId());
				oamMepInfo.setObjType("PW");
				oamInfo.setOamMep(oamMepInfo);

				oamMipInfo = new OamMipInfo();
				oamMipInfo.setServiceId(pw.getPwId());
				oamMipInfo.setObjType("PW");
				oamInfo.setOamMip(oamMipInfo);
				pw.setOamList(oamInfoService.queryByServiceId(oamInfo));

				// 查询qos
				pw.setQosList(qosInfoService.getQosByObj(EServiceType.PW.toString(), pw.getPwId()));

				//查询pw的vlan信息
				pwNniDao = new PwNniDao();
				//查询此pw下的所有vlan信息
				pwNniInfo = new PwNniInfo();
				pwNniInfo.setPwId(pw.getPwId());
				pwNniInfoList = pwNniDao.queryByCondition(pwNniInfo, connection);
				//因为pw只有az两端  所以pwvlan信息最多又两个记录
				if( null != pwNniInfo && pwNniInfoList.size()>0 && pwNniInfoList.size()<2){
					for(PwNniInfo pwNniInfo_select : pwNniInfoList){
						if(pwNniInfo_select.getSiteId()==pw.getASiteId()){
							pw.setaPwNniInfo(pwNniInfo_select);
							continue;
						}
						if(pwNniInfo_select.getSiteId()==pw.getZSiteId()){
							pw.setzPwNniInfo(pwNniInfo_select);
							continue;
						}
					}
				}

			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
//			UiUtil.closeService(qosInfoService);
//			UiUtil.closeService(oamInfoService);
		}
	}

	public PwInfo select(int siteId, int serviceId) throws Exception {
		PwInfo pwinfo = null;
		MsPwInfoDao msPwInfoDao = null;
		MsPwInfo mspwinfoCondition = null;
		try {
			pwinfo = this.pwInfoDao.queryBySiteIdAndServiceId(siteId, serviceId, connection);
			if(pwinfo != null)
			{
				mspwinfoCondition = new MsPwInfo();
				msPwInfoDao = new MsPwInfoDao();
				mspwinfoCondition.setPwId(pwinfo.getPwId());
				pwinfo.setMsPwInfos(msPwInfoDao.queryByCondition(mspwinfoCondition, connection));
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return pwinfo;
	}

	public int getDefaultPortConfig(int portId, int siteId, String name) throws Exception {
		PwNniBufferService pwnService = null;
		PwNniInfo pwNniInfo = null;
		int configId = 0;
		try {
			pwnService = (PwNniBufferService) ConstantUtil.serviceFactory.newService(Services.PwNniBuffer, this.connection);
			pwNniInfo = new PwNniInfo();
			pwNniInfo.setName(name);
			pwNniInfo.setSiteId(siteId);
			configId = pwnService.saveOrUpdate(pwNniInfo);

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
//			UiUtil.closeService(pwnService);
		}
		return configId;
	}

	/**
	 * 查询单网元下的pw
	 * 
	 * @param siteId
	 * @return
	 * @throws Exception
	 */
	public List<PwInfo> selectNodeBySiteid(int siteId) throws Exception {

		List<PwInfo> pwInfoList = null;
		List<PwInfo> pwInfoList_result = null;
		PwNniDao pwNniDao = null;
		PwNniInfo pwNniInfo = null;
		List<PwNniInfo> infos = null;
		PwInfo pwinfoSel = new PwInfo();
		MsPwInfoDao msPwInfoDao = new MsPwInfoDao();
		try {
			pwinfoSel.setASiteId(siteId);
			pwinfoSel.setZSiteId(siteId);
			pwNniDao = new PwNniDao();
			pwInfoList_result = new ArrayList<PwInfo>();
			pwInfoList = this.pwInfoDao.queryNode(pwinfoSel, connection);
			for (PwInfo pwinfo : pwInfoList) {
				pwinfo.setNode(true);
				if (pwinfo.getIsSingle() == 1) {
					if (pwinfo.getASiteId() == siteId && pwinfo.getApwServiceId() != 0) {
						pwInfoList_result.add(pwinfo);
					} else if (pwinfo.getZSiteId() == siteId && pwinfo.getZpwServiceId() != 0) {
						pwInfoList_result.add(pwinfo);
					}
				} else {
					pwInfoList_result.add(pwinfo);
				}
			}
			for (PwInfo pwInfo : pwInfoList_result) {// 封装对应的pwnniInfo
				pwNniInfo = new PwNniInfo();
				pwNniInfo.setPwId(pwInfo.getPwId());
				infos = pwNniDao.queryByCondition(pwNniInfo, connection);
				MsPwInfo mspwinfoCondition = new MsPwInfo();
				mspwinfoCondition.setPwId(pwInfo.getPwId());
				for (PwNniInfo info : infos) {
					if (info.getSiteId() == pwInfo.getASiteId() && pwInfo.getApwServiceId() != 0) {
						pwInfo.setaPwNniInfo(info);
					}
					if (info.getSiteId() == pwInfo.getZSiteId() && pwInfo.getZpwServiceId() != 0) {
						pwInfo.setzPwNniInfo(info);
					}
				}
				
				pwInfo.setMsPwInfos(msPwInfoDao.queryByCondition(mspwinfoCondition, connection));
			}
			
			getOAMandQoSforPw(pwInfoList);

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return pwInfoList_result;
	}

	/**
	 * 同步时查询pw对象
	 * 
	 * @author kk
	 * 
	 * @param
	 * 
	 * @return
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	public List<PwInfo> select_synchro(int siteid, int pwServiceId, int pwtype) throws Exception {
		List<PwInfo> pwInfos = this.pwInfoDao.query_synchro(siteid, pwServiceId, pwtype, connection);
		MsPwInfoDao msPwInfoDao = new MsPwInfoDao();
		for(PwInfo pwInfo :pwInfos){
			MsPwInfo mspwinfoCondition = new MsPwInfo();
			mspwinfoCondition.setPwId(pwInfo.getPwId());
			pwInfo.setMsPwInfos(msPwInfoDao.queryByCondition(mspwinfoCondition, connection));
		}
		return pwInfos;
		
	}

	/**
	 * 验证名字是否重复
	 * 
	 * @author kk
	 * 
	 * @param afterName
	 *            修改之后的名�?
	 * @param beforeName
	 *            修改之前的名�?
	 * 
	 * @return
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	public boolean nameRepetition(String afterName, String beforeName) throws Exception {

		int result = this.pwInfoDao.query_name(afterName, beforeName, connection);
		if (0 == result) {
			return false;
		} else {
			return true;
		}

	}

	/**
	 * 单网元名称验证
	 * 
	 * @param afterName
	 * @param beforeName
	 * @param siteId
	 * @return
	 * @throws Exception
	 */
	public boolean nameRepetitionBySingle(String afterName, String beforeName,int siteId) throws Exception {

		int result = this.pwInfoDao.query_nameBySingle(afterName, beforeName, connection,siteId);
		if (0 == result) {
			return false;
		} else {
			return true;
		}

	}

	/**
	 * 
	 * **/
	public void exeSearchPW(List<SiteInst> siteInstList) {	
		if(siteInstList.size()>1){
			String siteidin =" (0,";	
			for(SiteInst si : siteInstList){
				siteidin=siteidin+si.getSite_Inst_Id()+"," ;
			}
			siteidin = siteidin.substring(0, siteidin.length()-1)+") ";
//System.out.println("line 1508 . siteidin = "+siteidin);			
		try {
				this.pwInfoDao.exeSearchPW(connection,siteidin);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		}else{
			System.out.println("in PwInfoService.(exeSearchPW) siteInstList.size <=1 . error");
		}
	}
	
	/**
	 * 根据siteID，业务id查询pw
	 * 
	 * @param siteId
	 * @param serviceId
	 * @return
	 */
	public List<PwInfo> selectBysiteIdAndServiceId(int siteId,int serviceId){
		List<PwInfo> pwInfos = null;
		try {
			pwInfos = pwInfoDao.queryBySiteAndServiceId(siteId, serviceId, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return pwInfos;
	}

	/**
	 * 根据网元id，初始化某网元pw
	 * 
	 * @param siteId
	 * @throws SQLException
	 */
	public void initializtionSite(int siteId) throws SQLException{
		List<PwInfo> pwInfos = null;
		List<PwInfo> signlePwInfos = null;
		try {
			pwInfos = this.selectNodeBySiteid(siteId);
			signlePwInfos = new ArrayList<PwInfo>();
			if(pwInfos != null && pwInfos.size()>0){
				for(PwInfo pwInfo : pwInfos){
					if(pwInfo.getIsSingle() ==1){
						signlePwInfos.add(pwInfo);
					}else{
						if(pwInfo.getASiteId() == siteId){
							pwInfo.setAoppositeId("");
							pwInfo.setASiteId(0);
							pwInfo.setaPortConfigId(0);
							pwInfo.setApwServiceId(0);
							pwInfo.setIsSingle(1);
						}else{
							pwInfo.setZoppositeId("");
							pwInfo.setZSiteId(0);
							pwInfo.setzPortConfigId(0);
							pwInfo.setZpwServiceId(0);
							pwInfo.setIsSingle(1);
						}
						this.update(pwInfo);
					}
				}
			}
			this.delete(signlePwInfos);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}finally{
		}
	}
	
	/**
	 * 查询数据库中条件等于参数pwinfo的pwinfo集合。（eline快速配置业务时，查询是否存在可用pwinfo时用）
	 * 
	 * @param pwinfo
	 *            页面传递的pwinfo对象
	 * @return tunnel 对象
	 * @throws Exception
	 * @throws Exception
	 */
	public PwInfo selectExistPwinfo(PwInfo pwInfo) throws Exception {
		List<Integer> tunnelIds = new ArrayList<Integer>();
		List<PwInfo> pwinfoList = null;
		PwInfo pwInfoResult = null;
		QosInfoService qosInfoService = null;
		try {
			//从数据库查出此tunnel中的所有pw
			qosInfoService = (QosInfoService) ConstantUtil.serviceFactory.newService(Services.QosInfo, this.connection);
			tunnelIds.add(pwInfo.getTunnelId());
			pwinfoList = this.pwInfoDao.selectByCondition(tunnelIds, connection);
			
			//如果有pw 比较qos  
			if (null != pwinfoList && pwinfoList.size() > 0) {
				for (PwInfo pwInfo_db : pwinfoList) {
					if(pwInfo_db.getRelatedServiceId() == 0 && pwInfo_db.getType().getValue() == pwInfo.getType().getValue()){
						//如果qos匹配。返回pw对象
						if (qosInfoService.compareQos(pwInfo_db.getPwId(), EServiceType.PW, pwInfo.getQosList())) {
							pwInfoResult = pwInfo_db;
							break;
						}
					}
				}
			}

		} catch (Exception e) {
			throw e;
		} finally {
//			UiUtil.closeService(qosInfoService);
		}
		return pwInfoResult;
	}

	
	/**
	 * 根据site查询此网元下的单点pw
	 * 
	 * @param siteId
	 *            网元ID
	 * @return
	 * @throws Exception
	 */
	public List<PwInfo> selectBySiteId_node(int siteId) throws Exception {
		List<PwInfo> pwlList = null;
		try {
			pwlList = pwInfoDao.queryPwBySiteIdAndIsSingle(siteId, 1,connection);
			getOAMandQoSforPw(pwlList);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return pwlList;
	}

	/**
	 * 根据site查询此网元下的网络pw
	 * 
	 * @param siteId
	 *            网元ID
	 * @return
	 * @throws Exception
	 */
	public List<PwInfo> selectBySiteId_network(int siteId) throws Exception {
		List<PwInfo> pwlList = null;
		try {
			pwlList = pwInfoDao.queryPwBySiteIdAndIsSingle(siteId, 0,connection);
			getOAMandQoSforPw(pwlList);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return pwlList;
	}

	public PwInfo queryByPwId(PwInfo pw) {
		PwInfo pwInfo = null;
		List<PwInfo> pwInfoList=new ArrayList<PwInfo>();
		try {
			pwInfo = pwInfoDao.queryByPwidCondition_notjoin(pw, connection);
			pwInfoList.add(pwInfo);
			this.getOAMandQoSforPw(pwInfoList);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return pwInfo;
	}
	
	/**
	 * 根据tunnelId查询
	 * 
	 * @param tunnelId
	 *            tunnelID
	 * @return
	 * @throws Exception
	 */
	public List<PwInfo> selectPWByTunnelId(int tunnelId) throws Exception {
		List<PwInfo> pwInfoList = null;
		try {
			pwInfoList = this.pwInfoDao.queryPWByTunnelId(tunnelId, connection);
			this.getOAMandQoSforPw(pwInfoList);
		} catch (Exception e) {
			throw e;
		}

		return pwInfoList;
	}


	/**
	 * 根据tunnelId查询
	 * 
	 * @param tunnelId
	 *            tunnelID
	 * @return
	 * @throws Exception
	 */
	public List<PwInfo> selectByTunnelId(int tunnelId) throws Exception {
		List<PwInfo> pwInfoList = null;
		try {
			pwInfoList = this.pwInfoDao.queryByTunnelId(tunnelId, connection);
			this.getOAMandQoSforPw(pwInfoList);
		} catch (Exception e) {
			throw e;
		}

		return pwInfoList;
	}

	/**
	 * 根据网元ID获取可用的pw集合
	 * 
	 * @param siteId
	 *            网元ID
	 * @return
	 * @throws Exception
	 */
	public List<PwInfo> getAvailable(int siteId,EPwType ePwType) throws Exception {

		List<PwInfo> pwInfoList = null;
		List<PwInfo> pwInfoList_result = null;
		try {
			pwInfoList_result = new ArrayList<PwInfo>();
			pwInfoList = this.selectNodeBySiteid(siteId);

			if (null != pwInfoList && pwInfoList.size() > 0) {
				for (PwInfo pwInfo : pwInfoList) {
					
					//eth类型
					if(ePwType.getValue() == EPwType.ETH.getValue()){
						if (pwInfo.getType() == EPwType.ETH) {
							if(this.pwIsAvailable(pwInfo, siteId)){
								pwInfoList_result.add(pwInfo);
							}
						}
					}else if(ePwType.getValue() == EPwType.PDH.getValue()){		//pdh类型
						if (pwInfo.getASiteId() == siteId) {
							if (pwInfo.getType().getValue() == EPwType.PDH.getValue() || pwInfo.getType().getValue() == EPwType.PDH_SDH.getValue()) {
								if(this.pwIsAvailable(pwInfo, siteId)){
									pwInfoList_result.add(pwInfo);
								}
							}
						} else {
							if (pwInfo.getType().getValue() == EPwType.PDH.getValue() || pwInfo.getType().getValue() == EPwType.SDH_PDH.getValue()) {
								if(this.pwIsAvailable(pwInfo, siteId)){
									pwInfoList_result.add(pwInfo);
								}
							}
						}
					}else {		//sdh类型
						if (pwInfo.getASiteId() == siteId) {
							if (pwInfo.getType().getValue() == EPwType.SDH.getValue() || pwInfo.getType().getValue() == EPwType.SDH_PDH.getValue()) {
								if(this.pwIsAvailable(pwInfo, siteId)){
									pwInfoList_result.add(pwInfo);
								}
							}
						} else {
							if (pwInfo.getType().getValue() == EPwType.SDH.getValue() || pwInfo.getType().getValue() == EPwType.PDH_SDH.getValue()) {
								if(this.pwIsAvailable(pwInfo, siteId)){
									pwInfoList_result.add(pwInfo);
								}
							}
						}
					}
				}
			}

		} catch (Exception e) {
			throw e;
		}
		return pwInfoList_result;
	}
	
	/**
	 * 验证已被用的pw，是否被单网元的业务被用。
	 * 如果是，验证此单网元业务是否为参数网元的业务，如果不是。说明此pw的参数网元端没有被使用
	 * @param pwInfo 
	 * @param siteId
	 * @return
	 * @throws Exception 
	 */
	private boolean pwIsAvailable(PwInfo pwInfo , int siteId) throws Exception{
		boolean flag=false;
		ServiceInfoDao serviceInfoDao=null;
		List<ServiceInfo> serviceInfoList=null;
		try {
			
			//如果没被任何业务使用，可直接返回
			if(pwInfo.getRelatedServiceId() == 0){
				flag=true;
			}else{
				//如果被使用，并且是网络侧数据。 需要验证是否被siteId端所使用
				if(pwInfo.getIsSingle() == 0){
					serviceInfoDao = new ServiceInfoDao();
					serviceInfoList=serviceInfoDao.queryByPwId(pwInfo.getPwId(), connection);
					for(ServiceInfo serviceInfo : serviceInfoList){
						if(serviceInfo.getaSiteId() == siteId || serviceInfo.getzSiteId() == siteId){
							flag=false;
							break;
						}else{
							flag=true;
						}
					}
				}
			}
			
		} catch (Exception e) {
			throw e;
		} finally{
			serviceInfoDao=null;
			serviceInfoList=null;
		}
		return flag;
	}

	/**
	 * 查询同一端口下标签是否可用
	 * @param aSiteId
	 * @param zSiteId
	 * @param label
	 * @return
	 */
	public boolean checkOutLabelUsable(int aSiteId, int zSiteId, int label) throws Exception{
		return this.pwInfoDao.queryOutLabelUsable(aSiteId,zSiteId,label,connection);
	}

	
	/**
	 * 
	 * @param tunnelId
	 * @return 
	 * @throws Exception
	 */
	public List<PwInfo> selectSamePortByTunnelId(int tunnelId,int siteId) throws Exception{
		List<PwInfo> pwInfoList = null;
		try {
			pwInfoList = this.pwInfoDao.selectSamePortByTunnelId(tunnelId,siteId, connection);
		} catch (Exception e) {
			throw e;
		}

		return pwInfoList;
		
	}

	public int updateRelatedService(PwInfo pwInfo) throws Exception {
		return this.pwInfoDao.update(pwInfo, connection);
	}

	public List<PwInfo> selectServiceIdsByPwIds(String pwIds) throws Exception {
		return this.pwInfoDao.selectServiceIdsByPwIds(pwIds, connection);
	}

	/**
	 * 离线网元数据下载
	 * 
	 * @param obj
	 *            pw对象
	 * @throws Exception
	 */
	private void offLineAcion(PwInfo obj) throws Exception {
		
		int aPortType = 0;
		int zPortType = 0;
		if(EPwType.ETH.getValue()==obj.getType().getValue()){
			aPortType=EPwType.ETH.getValue();
			zPortType=EPwType.ETH.getValue();
		}else if(EPwType.PDH.getValue()==obj.getType().getValue()){
			aPortType=EPwType.PDH.getValue();
			zPortType=EPwType.PDH.getValue();
		}else if(EPwType.SDH.getValue()==obj.getType().getValue()){
			aPortType=EPwType.SDH.getValue();
			zPortType=EPwType.SDH.getValue();
		}else if(EPwType.PDH_SDH.getValue()==obj.getType().getValue()){
			aPortType=EPwType.PDH.getValue();
			zPortType=EPwType.SDH.getValue();
		}else if(EPwType.SDH_PDH.getValue()==obj.getType().getValue()){
			aPortType=EPwType.SDH.getValue();
			zPortType=EPwType.PDH.getValue();
		}
		if(0!=obj.getASiteId()){
			super.dateDownLoad(obj.getASiteId(),obj.getPwId(), EServiceType.PW.getValue(), EActionType.DELETE.getValue(), obj.getApwServiceId()+"" ,obj.getTunnelId()+"",0,0,aPortType+"");
		}
		if(0!=obj.getZSiteId()){
			super.dateDownLoad(obj.getZSiteId(),obj.getPwId(), EServiceType.PW.getValue(), EActionType.DELETE.getValue(), obj.getZpwServiceId()+"",obj.getTunnelId()+"",0,0,zPortType+"");
		}
	}

	/**
	 * 通过网元ID查询
	 * 
	 * @param siteid
	 *            网元id
	 * @return
	 * @throws Exception
	 */
	public List<PwInfo> queryBySiteId(int siteid) throws Exception {
		PwInfo pwinfo = new PwInfo();
		pwinfo.setZSiteId(siteid);
		pwinfo.setASiteId(siteid);
		return this.pwInfoDao.queryNode(pwinfo, connection);
	}

	/**
	 * 通过pw过滤条件查询单网元的pw
	 * 
	 * @param siteId
	 *            单网元的id
	 * @param pwFilterCondition
	 *            pw的过滤条件
	 * @return
	 */
	public List<PwInfo> selectNodeByCondition(PwInfo pwFilterCondition) throws Exception {

		List<PwInfo> pwInfoList1 = null;
		List<PwInfo> pwInfoList2 = new ArrayList<PwInfo>();
		List<PwInfo> pwInfoList = null;
		List<PwInfo> pwInfoList_result = null;
		PwNniDao pwNniDao = null;
		PwNniInfo pwNniInfo = null;
		List<PwNniInfo> infos = null;
		List<Tunnel> tunnels = null;
		List<Integer> tunnelIds = null;
		try {
			pwNniDao = new PwNniDao();
			tunnelIds = new ArrayList<Integer>();
			pwInfoList = new ArrayList<PwInfo>();
			pwInfoList_result = new ArrayList<PwInfo>();
			pwInfoList1 = this.pwInfoDao.queryNode(pwFilterCondition, connection);
			if(pwFilterCondition.getPortId() > 0)
			{
				//先通过端口号查tunnel，再通过tunnel查pw，然后过滤pw
				tunnels = this.tunnelDao.queryByportId(pwFilterCondition.getPortId(), connection);
				for(Tunnel tunnel:tunnels)
				{
					tunnelIds.add(tunnel.getTunnelId());
				}
				if(!tunnelIds.isEmpty()){
					pwInfoList2 = pwInfoDao.queryByPwTunnelIdCondition(tunnelIds, connection);
				}
				for(PwInfo pw1 : pwInfoList1)
				{
					for(PwInfo pw2 : pwInfoList2)
					{
						if(pw2.getPwId() == pw1.getPwId())
						{
							pwInfoList.add(pw1);
						}
					}
				}
			}
			else
			{
				pwInfoList.addAll(pwInfoList1);
			}
			
			for (PwInfo pwinfo : pwInfoList) {
				pwinfo.setNode(true);
				if (pwinfo.getIsSingle() == 1) {
					if (pwinfo.getASiteId() == pwFilterCondition.getASiteId() && pwinfo.getApwServiceId() != 0) {
						pwInfoList_result.add(pwinfo);
					} else if (pwinfo.getZSiteId() == pwFilterCondition.getZSiteId() && pwinfo.getZpwServiceId() != 0) {
						pwInfoList_result.add(pwinfo);
					}
				} else {
					pwInfoList_result.add(pwinfo);
				}
			}
			for (PwInfo pwInfo : pwInfoList_result) {// 封装对应的pwnniInfo
				pwNniInfo = new PwNniInfo();
				pwNniInfo.setPwId(pwInfo.getPwId());
				infos = pwNniDao.queryByCondition(pwNniInfo, connection);
				for (PwNniInfo info : infos) {
					if (info.getSiteId() == pwInfo.getASiteId() && pwInfo.getApwServiceId() != 0) {
						pwInfo.setaPwNniInfo(info);
					}
					if (info.getSiteId() == pwInfo.getZSiteId() && pwInfo.getZpwServiceId() != 0) {
						pwInfo.setzPwNniInfo(info);
					}
				}
			}

			getOAMandQoSforPw(pwInfoList);

		} catch (Exception e) {
			e.printStackTrace();
			ExceptionManage.dispose(e, this.getClass());
		}
		return pwInfoList_result;
	}

	/**
	 * 通过主键查询pw对象
	 * 
	 * @param pwId
	 * @return
	 * @throws Exception
	 */
	public PwInfo selectByPwId(int pwId) throws Exception {

		List<PwInfo> pwInfoList = null;
		PwInfo pwInfo = null;
		try {
			pwInfo = new PwInfo();
			pwInfo.setPwId(pwId);
			pwInfoList = this.select(pwInfo);
			if (null != pwInfoList && pwInfoList.size() == 1) {
				pwInfo = pwInfoList.get(0);
			} else {
				throw new Exception("查询pw出错");
			}
		} catch (Exception e) {
			throw e;
		} finally {
			pwInfoList = null;
		}
		return pwInfo;
	}
	
	/**
	 * 通过主键查询pw对象
	 * 只提供给多段PW来查询
	 * lable = 1 查询单站 否则查询所有
	 * @param pwId
	 * @return
	 * @throws Exception
	 */ 
	public PwInfo selectByPwIdForMulti(int pwId,int lable) throws Exception {

		List<PwInfo> pwInfoList = null;
		PwInfo pwInfo = null;
		try {
			pwInfo = new PwInfo();
			pwInfo.setPwId(pwId);
			pwInfoList = this.pwInfoDao.selectByPWId(pwInfo, connection,lable);   //selectByPWId
			if (null != pwInfoList && pwInfoList.size() == 1) {
				pwInfo = pwInfoList.get(0);
			} else {
				throw new Exception("查询pw出错");
			}
		} catch (Exception e) {
			throw e;
		} finally {
			pwInfoList = null;
		}
		return pwInfo;
	}
	
	
	/**
	 * 创建或修改时，验证此PW承载的tunnel的qos带宽是否可以承载此pw的qos
	 * 
	 * @param pwInfo
	 *            要创建或修改的pw对象
	 * @param qosInfo
	 *            qos带宽
	 * @return true 可以承载 false 不可承载
	 * @throws Exception
	 */
	public boolean checkingQos(PwInfo pwInfo, List<QosInfo> qosInfoList, List<QosInfo> update_before_qosInfoList) throws Exception {
		TunnelService tunnelService = null;
		Tunnel tunnel = null;
		QosInfoService qosInfoService = null;
		QosInfo qosinfo_pw = null;
		boolean flag = true;
		List<Tunnel> tunnelList = null;
		QosInfo qosInfo_pw_before = null;
		int before_cir = 0;
		int before_eir = 0;
		try {
			qosInfoService = (QosInfoService) ConstantUtil.serviceFactory.newService(Services.QosInfo, this.connection);
			// 根据tunnel主键 查询tunnel对象
			tunnelService = (TunnelService) ConstantUtil.serviceFactory.newService(Services.Tunnel, this.connection);
			tunnel = new Tunnel();
			tunnel.setTunnelId(pwInfo.getTunnelId());
			tunnelList = tunnelService.selectNodeByTunnelId(tunnel);
			if (null != tunnelList && tunnelList.size() == 1) {
				tunnel = tunnelList.get(0);
			} else {
				throw new Exception("查询tunnel出错");
			}

			for (QosInfo qosInfo_tunnel : tunnel.getQosList()) {

				// 从qos集合中取出来qosui的对象
				qosinfo_pw = qosInfoService.getQosInfo(qosInfoList, qosInfo_tunnel.getCos(), qosInfo_tunnel.getDirection());
				// 如果没查询到 直接返回
				if (qosinfo_pw == null) {
					flag = false;
					break;
				} else {
					if(null!=update_before_qosInfoList){
						qosInfo_pw_before = qosInfoService.getQosInfo(update_before_qosInfoList, qosInfo_tunnel.getCos(), qosInfo_tunnel.getDirection());
						if (null != qosInfo_pw_before) {
							before_cir = qosInfo_pw_before.getCir();
							before_eir = qosInfo_pw_before.getEir();
						}
					}

					QosInfo qosInfo_result=qosInfoService.calculateQos(qosInfo_tunnel, EServiceType.TUNNEL, pwInfo.getTunnelId());
					if (qosInfo_result.getCir() + before_cir < qosinfo_pw.getCir() || qosInfo_result.getEir() + before_eir < qosinfo_pw.getEir()) {
						flag = false;
						break;
					}
				}
			}

		} catch (Exception e) {
			throw e;
		} finally {
//			UiUtil.closeService(tunnelService);
//			UiUtil.closeService(qosInfoService);
		}
		return flag;
	}
	
	/**
	 * 修改时 验证qos是否与AC匹配
	 * @param pwInfo  要修改的pw对象
	 * @param qosInfoList 修改后的qos对象
	 * @return
	 * @throws Exception 
	 */
	public boolean checkQosPwAndAc(PwInfo pwInfo,List<QosInfo> qosInfoList) throws Exception{
		if(null==pwInfo){
			throw new Exception("pwInfo is null");
		}
		if(null==qosInfoList || qosInfoList.size()==0){
			throw new Exception("qosInfoList is null");
		}
		boolean flag=true;
		ServiceInfoDao serviceInfoDao=new ServiceInfoDao();
		List<ServiceInfo> serviceInfoList=null;
		List<Integer> acIdList=new ArrayList<Integer>();
		AcInfoService acInfoService=null;
		List<AcPortInfo> acPortInfoList=null;
		QosInfoService qosInfoService=null;
		UiUtil uiUtil = new UiUtil();
		try { 
			//如果是eth的pw并且已经关联了业务。 才做此操作
			if(pwInfo.getType()==EPwType.ETH && pwInfo.getRelatedServiceId()>0){
				
				//根据pw查询业务对象
				serviceInfoList=serviceInfoDao.queryByPwId(pwInfo.getPwId(), super.connection);
				
				//把业务对象的AZ端AC放入集合中。 
				if(null!=serviceInfoList && serviceInfoList.size()==1){
					if(serviceInfoList.get(0).getaAcId()>0){
						acIdList.add(serviceInfoList.get(0).getaAcId());
					}
					if(serviceInfoList.get(0).getzAcId()>0){
						acIdList.add(serviceInfoList.get(0).getzAcId());
					}
					if(serviceInfoList.get(0).getAmostAcId() != null && !serviceInfoList.get(0).getAmostAcId().equals(""))
					{
						acIdList.addAll(uiUtil.getAcIdSets(serviceInfoList.get(0).getAmostAcId()));
					}
					if(serviceInfoList.get(0).getZmostAcId() != null && !serviceInfoList.get(0).getZmostAcId().equals(""))
					{
						acIdList.addAll(uiUtil.getAcIdSets(serviceInfoList.get(0).getZmostAcId()));
					}
				}
				
				//根据ID主键集合查询AC对象
				acInfoService=(AcInfoService) ConstantUtil.serviceFactory.newService(Services.AcInfo, this.connection);
				acPortInfoList = acInfoService.select(acIdList);
				
				//计算新的pw的qos和ac的qos是否匹配
				qosInfoService=(QosInfoService) ConstantUtil.serviceFactory.newService(Services.QosInfo, this.connection);
				flag=qosInfoService.checkPwAndAcQos(pwInfo,qosInfoList, acPortInfoList);
			}
		} catch (Exception e) {
			throw e;
		} finally {
//			UiUtil.closeService(acInfoService);
//			UiUtil.closeService(qosInfoService);
			uiUtil= null;
		}
		return flag;
	}
	
	/**
	 * 根据网元名称和pwname查询
	 * @param siteId
	 * @param name
	 * @return
	 */
	public List<PwInfo> selectBySiteIdAndName(int siteId,String name){
		List<PwInfo> pwInfos = null;
		pwInfos = this.pwInfoDao.selectBySiteIdAndName(siteId, name, connection);
		return pwInfos;
	}
	
	/**
	 * 根据site查询
	 * 
	 * @param siteId
	 *            网元ID
	 * @return
	 * @throws Exception
	 */
	public List<PwInfo> queryPwBySiteId(int siteId) throws Exception {

		List<PwInfo> pwlList = null;
		try {

			pwlList = pwInfoDao.selectPwBySiteId(siteId, connection);

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return pwlList;
	}

	/**
	 * 查询所有pw(包括网络侧和单站侧)
	 */
	public List<PwInfo> selectAll() {
		List<PwInfo> pwinfoList = new ArrayList<PwInfo>();
		try {
			PwNniDao pwNniDao = new PwNniDao();
			MsPwInfoDao msPwInfoDao = new MsPwInfoDao();
			pwinfoList = pwInfoDao.queryAll(connection);
			for (PwInfo pwInfo : pwinfoList) {// 封装对应的pwnniInfo
				MsPwInfo mspwinfoCondition = new MsPwInfo();
				mspwinfoCondition.setPwId(pwInfo.getPwId());
				PwNniInfo pwNniInfo = new PwNniInfo();
				pwNniInfo.setPwId(pwInfo.getPwId());
				List<PwNniInfo> infos = pwNniDao.queryByCondition(pwNniInfo, connection);
				for (PwNniInfo info : infos) {
					if (info.getSiteId() == pwInfo.getASiteId() && pwInfo.getApwServiceId() != 0) {
						pwInfo.setaPwNniInfo(info);
					}
					if (info.getSiteId() == pwInfo.getZSiteId() && pwInfo.getZpwServiceId() != 0) {
						pwInfo.setzPwNniInfo(info);
					}
				}
				pwInfo.setMsPwInfos(msPwInfoDao.queryByCondition(mspwinfoCondition, connection));
			}
			getOAMandQoSforPw(pwinfoList);

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return pwinfoList;
	}
	
	/**
	 * 查询不是eth类型的pw
	 * 
	 * @param siteId
	 *            为0说明是查询网络侧的。 不为0说明是查询单网元的
	 * @return
	 * @throws Exception
	 */
	public List<PwInfo> selectNotEth(PwInfo pwInfoCondition) throws Exception{
		return this.pwInfoDao.queryNotEth(pwInfoCondition, connection);
	}
	
	/**
	 * 搜索pw
	 * @param list
	 * @param mapMspwInfo
	 */
	public void doSearch(List<PwInfo> list,Map<Integer,List<MsPwInfo>> mapMspwInfo){
		try {
			this.pwInfoDao.doSearch(list, mapMspwInfo, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}
	}
	
	/**
	 * 根据标签去查询
	 * @throws Exception 
	 */
	public PwInfo queryByLabel(int aSiteId, int aInLabel, int zSiteId, int zInLabel, int pwType) throws Exception{
		return this.pwInfoDao.queryByLabel(aSiteId, aInLabel, zSiteId, zInLabel, pwType, connection);
		
	}
	
	public int insertPwInfo(PwInfo pwinfo) throws Exception{
		return  this.pwInfoDao.insert(pwinfo, connection);
	}
	
	public List<PwInfo> findPwByPWIds(List<Integer> pwIds) throws Exception
	{
		return this.pwInfoDao.findPwByIds(pwIds, connection);
	}
	
	public PwInfo selectByLabels(PwInfo pwinfo) throws Exception
	{
		return  this.pwInfoDao.queryByPwidCondition_notjoin(pwinfo, connection);
	}
	
	/**
	 * pw的设置过滤,查询普通pw
	 * @param filterPwInfo
	 * @return
	 */
	public List<PwInfo> selectFilter(PwInfo filterPwInfo){
		List<PwInfo> pwInfos = new ArrayList<PwInfo>();
		List<PwInfo> infos = null;
		Map<Integer,Tunnel> integers = null;
		TunnelService tunnelService = null;
		PwNniDao pwNniDao = new PwNniDao();
		PwNniInfo pwNniInfo = null;
		MsPwInfoDao msPwInfoDao = new MsPwInfoDao();
		MsPwInfo mspwinfoCondition = null;
		List<PwNniInfo> pwNniInfos = null;
		try {
			infos = this.pwInfoDao.queryFilte(filterPwInfo, connection);
			List<PwInfo> pwList = new ArrayList<PwInfo>();
			if(infos != null && !infos.isEmpty()){
				for (PwInfo pwInfo : infos) {
					if(filterPwInfo.getIsSingle() == pwInfo.getIsSingle()){
						pwList.add(pwInfo);
					}
				}
				infos.clear();
				infos.addAll(pwList);
			}
			tunnelService = (TunnelService) ConstantUtil.serviceFactory.newService(Services.Tunnel, connection);
			
			//根据端口查询所有tunnel
			if(filterPwInfo.getPortId()>0){
				List<Tunnel> tunnels = tunnelService.selectByPortIdAndSiteId(filterPwInfo.getASiteId(), filterPwInfo.getPortId());
				integers = new HashMap<Integer,Tunnel>();
				for(Tunnel tunnel :tunnels){
					integers.put(tunnel.getTunnelId(), tunnel);
				}
			}
			//根据tunnelid过滤
			if(filterPwInfo.getTunnelId()>0){
				if(integers == null){
					for(PwInfo pwInfo : infos){
						if(pwInfo.getTunnelId() == filterPwInfo.getTunnelId()){
							pwInfos.add(pwInfo);
						}	
					}
				}else{
					Tunnel tunnel = integers.get(filterPwInfo.getTunnelId());
					if(tunnel != null){
						for(PwInfo pwInfo : infos){
							if(pwInfo.getTunnelId() == tunnel.getTunnelId()){
								pwInfos.add(pwInfo);
							}	
						}
					}else{
						return pwInfos;
					}
				}
			}else{
				if(integers != null){
					for(PwInfo pwInfo : infos){
						if(integers.get(pwInfo.getTunnelId()) != null){
							pwInfos.add(pwInfo);
						}	
					}
				}else{
					pwInfos = infos;
				}
			}
			for (PwInfo pwInfo : pwInfos) {// 封装对应的pwnniInfo
				mspwinfoCondition = new MsPwInfo();
				mspwinfoCondition.setPwId(pwInfo.getPwId());
				pwNniInfo = new PwNniInfo();
				pwNniInfo.setPwId(pwInfo.getPwId());
				pwNniInfos = pwNniDao.queryByCondition(pwNniInfo, connection);
				for (PwNniInfo info : pwNniInfos) {
					if (info.getSiteId() == pwInfo.getASiteId() && pwInfo.getApwServiceId() != 0) {
						pwInfo.setaPwNniInfo(info);
					}
					if (info.getSiteId() == pwInfo.getZSiteId() && pwInfo.getZpwServiceId() != 0) {
						pwInfo.setzPwNniInfo(info);
					}
				}
//				pwInfo.setMsPwInfos(msPwInfoDao.queryByCondition(mspwinfoCondition, connection));
			}

			getOAMandQoSforPw(pwInfos);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}
		
		return pwInfos;
	}
	
}
