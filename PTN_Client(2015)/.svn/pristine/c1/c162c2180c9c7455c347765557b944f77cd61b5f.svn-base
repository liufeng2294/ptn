package com.nms.ui.ptn.safety.controller;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.List;

import com.nms.db.bean.system.OperationLog;
import com.nms.db.enums.EOperationLogType;
import com.nms.model.system.OperationLogService;
import com.nms.model.util.ExportExcel;
import com.nms.model.util.Services;
import com.nms.ui.frame.AbstractController;
import com.nms.ui.manager.AddOperateLog;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.ExceptionManage;
import com.nms.ui.manager.ResourceUtil;
import com.nms.ui.manager.UiUtil;
import com.nms.ui.manager.keys.StringKeysBtn;
import com.nms.ui.ptn.safety.OperationLogPanel;
import com.nms.ui.ptn.safety.dialog.LogChooseTime;
import com.nms.ui.ptn.safety.dialog.OperationLogFilterDialog;
/**
 * 处理操作日志
 * @author sy
 *
 */
public class OperationLogPanelController extends AbstractController{
	
	private OperationLogPanel view;
	private OperationLog log=null;
	private String startTime;//起始时间
	private String overTime;//截止时间
	
	public OperationLogPanelController(OperationLogPanel operationLagPanel) {
		this.view = operationLagPanel;
	}
	public OperationLogPanelController(){
		
	}
	
	/**
	 * 刷新按钮事件	
	 */
	@Override
	public void refresh() {
		OperationLogService operationService=null;
		List<OperationLog> OperationLogList = null;
		try {
			operationService=(OperationLogService) ConstantUtil.serviceFactory.newService(Services.OPERATIONLOGSERVIECE);
			if (log==null) {				
				// 若过滤条件为空，则显示所有信息
				log=new OperationLog();												
			}
			OperationLogList =operationService.select(log);
			this.view.clear();
			this.view.initData(OperationLogList);
			this.view.updateUI();
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			UiUtil.closeService(operationService);
		}
	}
	// 打开设置过滤条件对话框
	
	@Override
	public void openFilterDialog()throws Exception {
		final OperationLogFilterDialog filterDialog = new OperationLogFilterDialog();
		filterDialog.getConfirm().addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent evt) {

				try {
					OperationLogPanelController.this.setFilter(filterDialog);
				} catch (Exception e) {
					ExceptionManage.dispose(e, OperationLogPanelController.class);
				}
				
			}
		});
//		filterDialog.addWindowListener(new WindowAdapter() {
//			@Override
//			public void windowClosed(WindowEvent e) {
//				filterDialog.dispose();
//			}
//		});
		UiUtil.showWindow(filterDialog, 390, 270);
	}

	/*
	 * 设置过滤条件，并显示查询结果
	 */
	private void setFilter(OperationLogFilterDialog dialog)throws Exception {
		
		try {			
			startTime=this.setUsTime(dialog.getStartChooseTime().getText());
			overTime=this.setUsTime(dialog.getOverChooseTime().getText());
			log=new OperationLog();
			log.setUserName(dialog.userField.getText());
			// 模糊查询是否为选中
			if(dialog.getChbLikeSelect().isSelected()){
				log.setSelect(true);
			}
			log.setOperationType(EOperationLogType.from(dialog.getOperationLogTypeField().getSelectedItem()+""));
			if(startTime!=null&&!this.startTime.equals("")){
				log.setStartTime(this.startTime);
			}
			if(overTime!=null&&!this.overTime.equals("")){
				log.setOverTime(this.overTime);
			}
			
			int result=0;
			if(ResourceUtil.srcStr(StringKeysBtn.BTN_EXPORT_ISUCCESS).equals(dialog.getOperationResultBox().getSelectedItem())){
				result=1;
			}else if(ResourceUtil.srcStr(StringKeysBtn.BTN_EXPORT_FALSE).equals(dialog.getOperationResultBox().getSelectedItem())){
				result=2;
			}
			log.setOperationResult(result);
				this.refresh();
		
			dialog.dispose();
		} catch (Exception e) {
			dialog.dispose();
			throw e;
		}
	}
	//清除过滤
	@Override
	public void clearFilter()throws Exception{
		log=null;
		this.refresh();
	}
	/**
	 * 移除 按钮事件
	 */
	public void removeAction(){
		new LogChooseTime(2);
		this.refresh();
	}
	//导出
	@Override
	public void export()throws Exception{
		List<OperationLog> infos = null;
		String result;
		ExportExcel export=null;
		// 得到页面信息
		try {
			infos =  this.view.getTable().getAllElement();
			export=new ExportExcel();
			//得到bean的集合转为  String[]的List
			List<String[]> beanData=export.tranListString(infos,"operationLogTable");
			//导出页面的信息-Excel
			result=export.exportExcel(beanData, "operationLogTable");
			//添加操作日志记录
			AddOperateLog.insertOperate(EOperationLogType.EXPORTOPERATELOG.getValue(), result);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			infos = null;
			result=null;
			export=null;
		}
	}
	
	/**
	 * 将MM-dd-yyyy转为 中文 yyyy-MM-dd
	 * 
	 * @param enTime
	 * 
	 *            sy
	 * @return
	 */
	private String setUsTime(String enTime) {
		if (enTime == null || "".equals(enTime)) {
			return null;
		}
		if (ResourceUtil.language.equals("zh_CN")) {
			return enTime;
		}
		String newTime = null;
		StringBuffer dd = null;
		StringBuffer MM = null;
		StringBuffer yyyy = null;
		try {
			dd = new StringBuffer();
			MM = new StringBuffer();
			yyyy = new StringBuffer();
			/**
			 * 取 前10个字节 即 MM-dd-yyyy （01-23-2014）
			 */
			for (int i = 0; i < enTime.length(); i++) {
				if (i < 2) {
					MM.append(enTime.charAt(i) + "");
				}
				if (i < 5 && i > 2) {
					dd.append(enTime.charAt(i) + "");
				}
				if (i < 10 && i > 5) {
					yyyy.append(enTime.charAt(i) + "");
				}
			}
			newTime = yyyy.append("-").append(MM).append("-").append(dd).toString();
		} catch (Exception e) {
			ExceptionManage.dispose(e, UiUtil.class);
		} finally {
			yyyy = null;
			MM = null;
			dd = null;
		}
		return newTime;
	}
}
