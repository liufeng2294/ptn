package com.nms.db.dao.system;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.equipment.shelf.SiteInst;
import com.nms.db.bean.system.OffLinesiteBusi;
import com.nms.ui.manager.ExceptionManage;

/**
 * 离线网元业务下载Dao
 * 
 * @author Dzy
 * 
 */
public class OffLinesiteBusiDao {
	/**
	 * 搜索条件网元下 离线网元业务数据
	 * 
	 * @param allSelect
	 *            网元集合
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<OffLinesiteBusi> selectBySiteIds(List<SiteInst> siteInstList, Connection connection) throws Exception {
		if (connection == null) {
			throw new Exception("connection is null");
		}
		if (siteInstList == null) {
			throw new Exception("siteInstList is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<OffLinesiteBusi> offLinesiteBusiList = null;
		OffLinesiteBusi offLinesiteBusi = null;
		try {
			offLinesiteBusiList = new ArrayList<OffLinesiteBusi>();

			sql = " SELECT * FROM offLinesiteBusi t WHERE 1=1 ";
			for (SiteInst siteInst : siteInstList) {
				sql += " and siteid = " + siteInst.getSite_Inst_Id();
			}
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				offLinesiteBusi = new OffLinesiteBusi();
				offLinesiteBusi.setId(resultSet.getInt("id"));
				offLinesiteBusi.setOperId(resultSet.getInt("operId"));
				offLinesiteBusi.setOperType(resultSet.getInt("operType"));
				offLinesiteBusi.setAction(resultSet.getInt("action"));
				offLinesiteBusi.setSiteId(resultSet.getInt("siteId"));
				offLinesiteBusi.setActionIdentify(resultSet.getString("ActionIdentify"));
				offLinesiteBusi.setParentBusiId(resultSet.getString("parentBusiId"));
				offLinesiteBusi.setPortId(resultSet.getInt("portId"));
				offLinesiteBusi.setType(resultSet.getString("type"));
				offLinesiteBusi.setAcId(resultSet.getInt("acId"));
				offLinesiteBusiList.add(offLinesiteBusi);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return offLinesiteBusiList;
	}

	/**
	 * 搜索条件网元下 离线网元业务数据
	 * 
	 * @param allSelect
	 *            网元集合
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<OffLinesiteBusi> selectByCondition(OffLinesiteBusi condition, Connection connection) throws Exception {
		if (connection == null) {
			throw new Exception("connection is null");
		}
		if (condition == null) {
			throw new Exception("condition is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		OffLinesiteBusi offLinesiteBusi = null;
		List<OffLinesiteBusi> list = null;
		try {
			list = new ArrayList<OffLinesiteBusi>();
			sql = " SELECT * FROM offLinesiteBusi t WHERE 1=1 ";
			if (0 != condition.getId()) {
				sql += " and Id = " + condition.getId();
			}
			if (0 != condition.getOperId()) {
				sql += " and operId = " + condition.getOperId();
			}
			if (0 != condition.getOperType()) {
				sql += " and operType = " + condition.getOperType();
			}
			if (0 != condition.getSiteId()) {
				sql += " and siteId = " + condition.getSiteId();
			}
			/*
			 * if(null!=condition.getActionIdentify()&&!"".equals(condition.getActionIdentify())){ sql += " and ActionIdentify = '"+condition.getActionIdentify()+"'"; } if(null!=condition.getType()&&!"".equals(condition.getType())){ sql += " and type = '"+condition.getType()+"'"; } if(0!=condition.getPortId()){ sql += " and portid = '"+condition.getPortId()+"'"; }
			 */
			preparedStatement = (PreparedStatement) connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				offLinesiteBusi = new OffLinesiteBusi();
				offLinesiteBusi.setId(resultSet.getInt("id"));
				offLinesiteBusi.setOperId(resultSet.getInt("operId"));
				offLinesiteBusi.setOperType(resultSet.getInt("operType"));
				offLinesiteBusi.setAction(resultSet.getInt("action"));
				offLinesiteBusi.setSiteId(resultSet.getInt("siteId"));
				offLinesiteBusi.setActionIdentify(resultSet.getString("ActionIdentify"));
				offLinesiteBusi.setParentBusiId(resultSet.getString("parentBusiId"));
				offLinesiteBusi.setPortId(resultSet.getInt("portId"));
				offLinesiteBusi.setAcId(resultSet.getInt("acId"));
				list.add(offLinesiteBusi);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return list;
	}

	/**
	 * 新建
	 * 
	 * @param offLinesiteBusi
	 *            实体
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int insert(OffLinesiteBusi offLinesiteBusi, Connection connection) throws Exception {
		if (null == offLinesiteBusi) {
			throw new Exception("offLinesiteBusi is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		ResultSet resultSet = null;
		try {
			sql = "insert into offLinesiteBusi(OperId,OperType,Action,SiteId,ActionIdentify,parentBusiId,PortId,AcId,type) values(?,?,?,?,?,?,?,?,?)";
			preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, offLinesiteBusi.getOperId());
			preparedStatement.setInt(2, offLinesiteBusi.getOperType());
			preparedStatement.setInt(3, offLinesiteBusi.getAction());
			preparedStatement.setInt(4, offLinesiteBusi.getSiteId());
			preparedStatement.setString(5, offLinesiteBusi.getActionIdentify());
			preparedStatement.setString(6, offLinesiteBusi.getParentBusiId());
			preparedStatement.setInt(7, offLinesiteBusi.getPortId());
			preparedStatement.setInt(8, offLinesiteBusi.getAcId());
			preparedStatement.setString(9, offLinesiteBusi.getType());

			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				result = resultSet.getInt(1);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}

			sql = null;
		}

		return result;
	}

	/**
	 * 修改
	 * 
	 * @param offLinesiteBusi
	 *            实体
	 * @param connection
	 *            数据库连接
	 * @return 修改的记录数
	 * @throws Exception
	 */
	public int update(OffLinesiteBusi offLinesiteBusi, Connection connection) throws Exception {
		if (null == offLinesiteBusi) {
			throw new Exception("offLinesiteBusi is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "update offLinesiteBusi set operId=?,operType=?,siteId=?,action=?,actionIdentify=? ,parentBusiId=?,portid=?,acid=? ,type = ? where id = ? ";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, offLinesiteBusi.getOperId());
			preparedStatement.setInt(2, offLinesiteBusi.getOperType());
			preparedStatement.setInt(3, offLinesiteBusi.getSiteId());
			preparedStatement.setInt(4, offLinesiteBusi.getAction());
			preparedStatement.setString(5, offLinesiteBusi.getActionIdentify());
			preparedStatement.setString(6, offLinesiteBusi.getParentBusiId());
			preparedStatement.setInt(7, offLinesiteBusi.getPortId());
			preparedStatement.setInt(8, offLinesiteBusi.getAcId());
			preparedStatement.setString(9, offLinesiteBusi.getType());
			preparedStatement.setInt(10, offLinesiteBusi.getId());
			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 删除
	 * 
	 * @param condition
	 *            实体
	 * @param connection
	 *            数据库连接
	 * @return 删除的记录数
	 * @throws Exception
	 */
	public int delete(OffLinesiteBusi condition, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		if (null == condition) {
			throw new Exception("condition is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "delete from offLinesiteBusi where 1=1 ";
			if (0 != condition.getId()) {
				sql += " and id = " + condition.getId();
			}
			preparedStatement = connection.prepareStatement(sql);

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

}
