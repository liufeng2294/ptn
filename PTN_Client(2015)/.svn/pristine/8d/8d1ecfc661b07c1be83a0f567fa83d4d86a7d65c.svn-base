package com.nms.db.dao.perform;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.nms.db.bean.perform.Capability;
import com.nms.db.bean.perform.HisPerformanceInfo;
import com.nms.db.enums.EMonitorCycle;
import com.nms.db.enums.EObjectType;
import com.nms.ui.manager.DateUtil;
import com.nms.ui.manager.ExceptionManage;
import com.nms.ui.manager.ResourceUtil;
import com.nms.ui.manager.UiUtil;
import com.nms.ui.manager.keys.StringKeysObj;
import com.nms.ui.ptn.performance.model.HisPerformanceFilter;

/**
 * 历史性能数据库操作对象
 * 
 * @author Administrator
 * 
 */
public class HisPerformanceDao {

	/**
	 * 新增历史性能数据
	 * 
	 * @param hisInfo
	 *            任务实体
	 * @param connection
	 *            数据库连接
	 * @return 插入的记录数
	 * @throws Exception
	 */
	public int insert(HisPerformanceInfo hisInfo, Connection connection)
			throws Exception {
		if (null == hisInfo) {
			throw new Exception("hisInfo is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		try {
			sql = "insert into history_performance(siteId,slotId,objectid,objecttype,objectname,"
					+ "performancecode,performancevalue,performancetime,"
					+ "performanceEndtime,taskId,isCardOrSite,startTime,monitor) "
					+ " values(?,?,?,?,?,?,?,?,?,?,?,?,?)";
			preparedStatement = connection.prepareStatement(sql,
					Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, hisInfo.getSiteId());
			preparedStatement.setInt(2, hisInfo.getSlotId());
			preparedStatement.setInt(3, hisInfo.getObjectId());
			preparedStatement.setInt(4, hisInfo.getObjectType().getValue());
			preparedStatement.setString(5, hisInfo.getObjectName());
			preparedStatement.setInt(6, hisInfo.getPerformanceCode());
			preparedStatement.setFloat(7, hisInfo.getPerformanceValue());
			preparedStatement.setString(8, hisInfo.getPerformanceTime());
			preparedStatement.setString(9, hisInfo.getPerformanceEndTime());
			preparedStatement.setInt(10, hisInfo.getTaskId());
			preparedStatement.setInt(11, hisInfo.getIsCardOrSite());
			preparedStatement.setString(12, hisInfo.getStartTime());
			preparedStatement.setInt(13, hisInfo.getMonitorCycle().getValue());
			result = preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				result = resultSet.getInt(1);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}

	/**
	 * 修改历史性能数据
	 * 
	 * @param hisInfo
	 *            任务实体
	 * @param connection
	 *            数据库连接
	 * @return 插入的记录数
	 * @throws Exception
	 */
	public int update(HisPerformanceInfo hisInfo, Connection connection)
			throws Exception {
		if (null == hisInfo) {
			throw new Exception("hisInfo is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		try {
			sql = "update  history_performance as p set p.siteId =?,p.slotId=?,p.objectid=?"
					+ ",p.objecttype=?,p.objectname=?,p.performancecode=?,p.performancevalue=?,p.performancetime=?,p.performanceEndtime=?,p.isCardOrSite=?,p.startTime=?"
					+ " where p.id=? ";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, hisInfo.getSiteId());
			preparedStatement.setInt(2, hisInfo.getSlotId());
			preparedStatement.setInt(3, hisInfo.getObjectId());
			preparedStatement.setInt(4, hisInfo.getObjectType().getValue());
			preparedStatement.setString(5, hisInfo.getObjectName());
			preparedStatement.setInt(6, hisInfo.getPerformanceCode());
			preparedStatement.setFloat(7, hisInfo.getPerformanceValue());
			preparedStatement.setString(8, hisInfo.getPerformanceTime());
			preparedStatement.setString(9, hisInfo.getPerformanceEndTime());
			preparedStatement.setInt(10, hisInfo.getIsCardOrSite());
			preparedStatement.setString(11, hisInfo.getStartTime());
			preparedStatement.setInt(12, hisInfo.getId());
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}

	/**
	 * 删除历史性能数据
	 * 
	 * @param taskId
	 *            任务主键id
	 * @param connection
	 *            数据库连接
	 * @return 插入的记录数
	 * @throws Exception
	 */
	public int delete(int hisId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		try {
			sql = "delete frow history_performance where id=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, hisId);
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}

	/**
	 * 根据主键集合，批量删除历史性能数据
	 * 
	 * @param idList
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int delete(List<Integer> idList, Connection connection)
			throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		String ids = null;
		try {
			ids = idList.toString().substring(1, idList.toString().length() - 1);
			sql = "delete from history_performance where id in (" + ids + " )";
			preparedStatement = connection.prepareStatement(sql);
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
			ids = null;
		}

		return result;
	}

	/**
	 * 条件查询历史性能数据
	 * 
	 * @param taskInfo
	 *            查询条件
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<HisPerformanceInfo> queryByCondition(
			HisPerformanceInfo hisInfo, Connection connection) throws Exception {
		if (null == hisInfo) {
			throw new Exception("hisInfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		List<HisPerformanceInfo> list = null;
		try {
			sql = "SELECT * from history_performance where 1=1 ";
			if (hisInfo.getId() > 0) {
				sql += " and id=" + hisInfo.getId();
			}
			if (hisInfo.getSiteId() != 0) {
				sql += " and siteId=" + hisInfo.getSiteId();
			}
			if (hisInfo.getSlotId() != 0) {
				sql += " and slotId=" + hisInfo.getSlotId();
			}
			if (hisInfo.getObjectId() != 0) {
				sql += " and objectid=" + hisInfo.getObjectId();
			}
			if (hisInfo.getObjectType() != null
					&& !hisInfo.getObjectType().equals("")) {
				sql += " and objecttype='" + hisInfo.getObjectType() + "'";
			}
			if (hisInfo.getObjectName() != null&& !hisInfo.getObjectName().equals("")) {
				sql += " and objectname='" + hisInfo.getObjectType() + "'";
			}
			if (hisInfo.getPerformanceCode() != 0) {
				sql += " and performancecode=" + hisInfo.getPerformanceCode();
			}
			if (hisInfo.getPerformanceValue() != 0) {
				sql += " and performancevalue=" + hisInfo.getPerformanceValue();
			}
			if (hisInfo.getPerformanceTime() != null) {
				sql += " and performancetime='" + hisInfo.getPerformanceTime()+ "'";
			}
			if (hisInfo.getPerformanceEndTime() != null) {
				sql += " and performanceEndtime='"+ hisInfo.getPerformanceEndTime() + "'";
			}
			if (hisInfo.getStartTime() != null) {
				sql += " and startTime='" + hisInfo.getStartTime() + "'";
			}
			if (hisInfo.getTaskId() != 0) {
				sql += " and taskId=" + hisInfo.getTaskId();
			}
			if (hisInfo.getIsCardOrSite() != 0) {
				sql += " and isCardOrSite=" + hisInfo.getIsCardOrSite();
			}
			list = this.excuteQuery(connection, sql);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return list;
	}

	/**
	 * 条件查询历史性能数据
	 * 
	 * @param taskInfo
	 *            查询条件
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<HisPerformanceInfo> queryByConditionTime(
			HisPerformanceInfo hisInfo, Connection connection) throws Exception {
		if (null == hisInfo) {
			throw new Exception("hisInfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		List<HisPerformanceInfo> list = null;
		
		try {
			sql = "SELECT * from history_performance where startTime BETWEEN "+ 
			"'"+hisInfo.getPerformanceEndTime()+"' and "+"'"+DateUtil.getDate(DateUtil.FULLTIME)+"'";
			list = this.excuteQuery(connection, sql);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return list;
	}

	/**
	 * 根据主键id列表，批量查询
	 * 
	 * @param idList
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<HisPerformanceInfo> queryByIdList(List<Integer> idList,
			Connection connection) throws Exception {
		if (null == idList) {
			throw new Exception("idList is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<HisPerformanceInfo> hisInfoList = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		HisPerformanceInfo hisInfo;
		String sql = null;
		String ids = null;
		try {
			ids = idList.toString().substring(1, idList.toString().length() - 1);
			hisInfoList = new ArrayList<HisPerformanceInfo>();
			sql = "SELECT *  from history_performance WHERE id in " + "(" + ids+ ")";
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				hisInfo = new HisPerformanceInfo();
				hisInfo.setId(resultSet.getInt("id"));
				hisInfo.setSiteId(resultSet.getInt("siteId"));
				hisInfo.setSlotId(resultSet.getInt("slotId"));
				hisInfo.setObjectId(resultSet.getInt("objectid"));
				hisInfo.setObjectType(EObjectType.forms(resultSet.getInt("objecttype")));
				hisInfo.setObjectName(resultSet.getString("objectname"));
				hisInfo.setPerformanceCode(resultSet.getInt("performancecode"));
				hisInfo.setPerformanceValue(resultSet.getFloat("performancevalue"));
				hisInfo.setPerformanceTime(resultSet.getString("performancetime"));
				hisInfo.setPerformanceEndTime(resultSet.getString("performanceEndtime"));
				hisInfo.setTaskId(resultSet.getInt("taskId"));
				hisInfo.setIsCardOrSite(resultSet.getInt("isCardOrSite"));
				hisInfoList.add(hisInfo);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
			hisInfo = null;
			ids = null;
		}
		return hisInfoList;
	}

	/**
	 * 执行查询语句
	 * 
	 * @param connection
	 *            数据库连接
	 * @param sql
	 *            sql语句
	 * @return 查询集合
	 * @throws Exception
	 */
	private List<HisPerformanceInfo> excuteQuery(Connection connection,
			String sql) throws Exception {
		List<HisPerformanceInfo> hisInfoList = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		HisPerformanceInfo hisInfo;
		try {
			hisInfoList = new ArrayList<HisPerformanceInfo>();
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				hisInfo = new HisPerformanceInfo();
				hisInfo.setId(resultSet.getInt("id"));
				hisInfo.setSiteId(resultSet.getInt("siteId"));
				hisInfo.setSlotId(resultSet.getInt("slotId"));
				hisInfo.setObjectId(resultSet.getInt("objectid"));
				hisInfo.setObjectType(EObjectType.forms(resultSet.getInt("objecttype")));
				hisInfo.setObjectName(resultSet.getString("objectname"));
				hisInfo.setPerformanceCode(resultSet.getInt("performancecode"));
				hisInfo.setPerformanceValue(resultSet.getFloat("performancevalue"));
				hisInfo.setPerformanceTime(resultSet.getString("performancetime"));
				hisInfo.setPerformanceEndTime(resultSet.getString("performanceEndtime"));
				hisInfo.setTaskId(resultSet.getInt("taskId"));
				hisInfo.setIsCardOrSite(resultSet.getInt("isCardOrSite"));
				hisInfo.setStartTime(resultSet.getString("startTime"));
				hisInfo.setMonitor(resultSet.getInt("monitor"));
				hisInfoList.add(hisInfo);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			hisInfo = null;
		}

		return hisInfoList;
	}

	/**
	 * 根据过滤条件查询历史性能数据
	 * 
	 * @param filter
	 *            过滤条件
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<HisPerformanceInfo> queryByFilter(HisPerformanceFilter filter,Connection connection) throws Exception {
		if (null == filter) {
			throw new Exception("filter is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}
		StringBuffer sql = null;
		String cardIds = null;
		String siteIds = null;
		List<HisPerformanceInfo> list = null;
		SimpleDateFormat sdf =null;
		try {
			sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			sql = new StringBuffer("SELECT * from history_performance where 1=1 ");
			if (filter.getObjectType() != null&& filter.getObjectType() == EObjectType.SITEINST) {
				if (filter.getSiteInsts() != null&& filter.getSiteInsts().size() > 0) {
					siteIds = filter.getSiteInsts().toString().substring(1,filter.getSiteInsts().toString().length() - 1);
					sql.append(" and siteId in (").append(siteIds).append(") ");
				}
			} else if (filter.getObjectType() != null
					&& filter.getObjectType() == EObjectType.SLOTINST) {
				if (filter.getSiteInsts() != null
						&& filter.getSiteInsts().size() > 0) {
					siteIds = filter.getSiteInsts().toString().substring(1,
							filter.getSiteInsts().toString().length() - 1);
					sql.append(" and siteId in (").append(siteIds).append(") ");
				}
				if (filter.getSlotInsts() != null
						&& filter.getSlotInsts().size() > 0) {
					cardIds = filter.getSlotInsts().toString().substring(1,
							filter.getSlotInsts().toString().length() - 1);
					sql.append(" and slotId in (").append(cardIds).append(") ");
				}
			}
			if(UiUtil.isNull(filter.getObjectName())){//判断端口名称为空，或者""，
				sql.append(" and objectname in (").append((filter.getObjectName())).append(") ");
			}
			if(filter.getMonitorCycle()!=null&&filter.getMonitorCycle().toString()!=null&&!filter.getMonitorCycle().toString().equals("")){
				if(filter.getMonitorCycle().toString().equals(ResourceUtil.srcStr(StringKeysObj.OBJ_15_MINUTES))){
					
					sql.append(" and monitor in ("+EMonitorCycle.MIN15.getValue()+")");
				}
				else if(filter.getMonitorCycle().toString().equals(ResourceUtil.srcStr(StringKeysObj.OBJ_24_HOURS))){
					sql.append(" and monitor in ("+ EMonitorCycle.HOUR24.getValue()+")");
				}
				
			}
			sql.append(" and performancetime BETWEEN '").append(sdf.format(new Date(filter.getStartTime()))).append("' and '").append(sdf.format(new Date(filter.getEndTime()))+"'");
			sql.append(" and isCardOrSite=" + filter.getIsCardOrSite());
			list = this.excuteQuery(connection, sql.toString());
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
			cardIds = null;
			siteIds = null;
			sdf=null;
		}
		return list;
	}

	/**
	 * 数据库中有多少条记录
	 * 
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int selectHisPerformanceCount(Connection connection)
			throws Exception {
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		try {
			String sql = "select count(*) from history_performance";
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			
			while (resultSet.next()) {
				result = resultSet.getInt("count(*)");
			}
		} catch (Exception e) {
			throw e;
		}finally{
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		
		return result;
	}
	
	/**
	 * 性能统计   
	 * 		条件 过滤
	 * @param hisInfo
	 * 			历史性能对象
	 * @param code
	 * 			结束 时间  （范围查询）
	 * 		0-7 之間 進行判斷
	 * @ param capability
	 * 			性能類型- 關聯  CapabilityCode
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<HisPerformanceInfo> queryByHisPerfromance(HisPerformanceInfo hisInfo,int code,Capability capability,Connection connection) throws Exception {
		if (null == hisInfo) {
			throw new Exception("hisInfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement=null;
		ResultSet resultSet=null;
		List<HisPerformanceInfo> hisInfoList = null;
		long startTime =0;//开始时间
		long endTime = 0;//结束时间
		long nowTime = new Date().getTime();
		SimpleDateFormat sdf = null;
		int taskId =0;
		try {
		    sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			sql = "SELECT * from history_performance where 1=1 " +
					" and performancecode in"+"(select CapabilityCode from capability where CapabilityName=? and Manufacturer=?) ";
//			if(hisInfo.getMonitorCycle() == EMonitorCycle.MIN15){
//				taskId = EMonitorCycle.MIN15.getValue();
//			 }else{
//				taskId = EMonitorCycle.HOUR24.getValue();
//			 }
			//and taskId in(";sql +=taskId+")
			//sql +=taskId+") and performancecode in"+"(select CapabilityCode from capability where CapabilityName=? and Manufacturer=?) ";
			/**
			 * 分別   判斷   結束時間 選擇框 的 條件
			 * 
			 * 	決定SQL 語句 的 附加條件
			 */
			switch (code) {
			case 0:
				//过滤选择框 已做处理（结束时间不可以选择 0）
				break;
			case 1:// 近 一個小時
				startTime = nowTime - 60 * 60 * 1000;
				endTime = nowTime;
				sql += " and performancetime BETWEEN '"+sdf.format(new Date(startTime))+"' and '"+sdf.format(new Date(endTime))+"'";
				//使用 now()-interval 1 hour 这个的前提条件是  performancetime 为 datetime 类型
			   //sql += " and  performancetime>= now()-interval 1 hour";
				break;
			case 2:
				startTime = nowTime - 12* 60 * 60 * 1000;
				endTime = nowTime;
				sql += " and performancetime BETWEEN '"+sdf.format(new Date(startTime))+"' and '"+sdf.format(new Date(endTime))+"'";
				break;
			case 3:
				startTime = nowTime - 24* 60 * 60 * 1000;
				endTime = nowTime;
				sql += " and performancetime BETWEEN '"+sdf.format(new Date(startTime))+"' and '"+sdf.format(new Date(endTime))+"'";
				break;
			case 4://近   7  天
				startTime = nowTime - 7*24* 60 * 60 * 1000;
				endTime = nowTime;
				sql += " and performancetime BETWEEN '"+sdf.format(new Date(startTime))+"' and '"+sdf.format(new Date(endTime))+"'";
				break;
			case 5:
				startTime = nowTime - 30L * 24 * 60 * 60 * 1000;
				endTime = nowTime;
				sql += " and performancetime BETWEEN '"+sdf.format(new Date(startTime))+"' and '"+sdf.format(new Date(endTime))+"'";
				break;
			case 7:// 自定義    ，，  時間選擇 為完成
				sql += " and  performancetime between ' "+hisInfo.getStartTime()+" ' "+ " and '"+hisInfo.getPerformanceEndTime()+" '";
			default:
				break;
			}
			if (hisInfo.getSiteId() != 0) {
				sql += " and siteId=" + hisInfo.getSiteId();
			}

			if (hisInfo.getObjectName() != null&& !hisInfo.getObjectName().equals("")) {
				sql += " and objectname='" + hisInfo.getObjectName() + "'";
			}

			preparedStatement = connection.prepareStatement(sql);
			/**
			 * 傳入  性能類型CODE，
			 */
			preparedStatement.setString(1, capability.getCapabilityname());
			preparedStatement.setInt(2, capability.getManufacturer());
			resultSet = preparedStatement.executeQuery();
			hisInfoList=new ArrayList<HisPerformanceInfo>();
			while (resultSet.next()) {
				hisInfo = new HisPerformanceInfo();
				hisInfo.setId(resultSet.getInt("id"));
				hisInfo.setSiteId(resultSet.getInt("siteId"));
				hisInfo.setSlotId(resultSet.getInt("slotId"));
				hisInfo.setObjectId(resultSet.getInt("objectid"));
				hisInfo.setObjectType(EObjectType.forms(resultSet.getInt("objecttype")));
				hisInfo.setObjectName(resultSet.getString("objectname"));
				hisInfo.setPerformanceCode(resultSet.getInt("performancecode"));
				//性能值
				hisInfo.setPerformanceValue(resultSet.getFloat("performancevalue"));
				hisInfo.setPerformanceTime(resultSet.getString("performancetime"));
				hisInfo.setPerformanceEndTime(resultSet.getString("performanceEndtime"));
				hisInfo.setTaskId(resultSet.getInt("taskId"));
				hisInfo.setIsCardOrSite(resultSet.getInt("isCardOrSite"));
				hisInfoList.add(hisInfo);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
			sdf = null;
		}
		return hisInfoList;
	}
	
	/**
	 * 条件删除历史告警
	 * @param currentAlarmInfo
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int deleteHisAlarmInfo(HisPerformanceInfo hisPerformanceInfo, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		List<Object> paramList = null;
		try {
			sql = "delete from history_performance where 1=1";
			paramList = new ArrayList<Object>();
			if (hisPerformanceInfo.getSiteId() != 0) {
				sql += " and siteid=?";
				paramList.add(hisPerformanceInfo.getSiteId());
			}
			if (hisPerformanceInfo.getObjectId() != 0) {
				sql += " and objectid=?";
				paramList.add(hisPerformanceInfo.getObjectId());
			}
			if (hisPerformanceInfo.getObjectType() != null && !"".equals(hisPerformanceInfo.getObjectType())) {
				sql += " and objecttype=?";
				paramList.add(hisPerformanceInfo.getObjectType().getValue());
			}
			preparedStatement = connection.prepareStatement(sql);
			if (paramList.size() > 0) {
				for (int i = 0; i < paramList.size(); i++) {
					preparedStatement.setObject(i + 1, paramList.get(i));
				}
			}
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {

			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}

	/**
	 * 根据时间段来查询历史性能
	 * @param taskIdList 
	 * @throws Exception 
	 */
	public List<HisPerformanceInfo> queryByTime(String startTime,
			String endTime, List<Integer> taskIdList, int siteId,Connection connection) throws Exception {
		if (null == startTime || null == endTime) {
			throw new Exception("time is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}
		try {
			String sql = "SELECT * from history_performance where (startTime " +
					"between '"+startTime+"' and '"+endTime+"')";
			String taskIds = "";
			if(taskIdList != null && taskIdList.size() > 0){
				taskIds = " and taskId in(";
				for (int i = 0; i < taskIdList.size(); i++) {
					int taskId = taskIdList.get(i);
					if(i == (taskIdList.size()-1)){
						taskIds += taskId+")";
					}else{
						taskIds += taskId+",";
					}
				}
			}
			if(!taskIds.equals("")){
				sql += taskIds;
			}
			sql +="and siteId="+ siteId;
			return this.excuteQuery(connection, sql);
		} catch (Exception e) {
			throw e;
		}
	}

	public int selectCount(HisPerformanceFilter filter, List<Integer> siteIdList, Connection connection) throws SQLException {
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		try {
			String sql = "select count(*) from history_performance where 1=1";
			sql = this.getSql(sql, filter, siteIdList);
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			while(resultSet.next()){
				result=resultSet.getInt("count(*)");
			}
		} finally{
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
	}

	private String getSql(String sql, HisPerformanceFilter filter, List<Integer> siteIdList) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		if(siteIdList != null && siteIdList.size() > 0){
			sql += " and siteId in(";
			for (Integer siteId : siteIdList) {
				sql += siteId+",";
			}
			sql += "0)";
		}
		if(filter != null){
			if (filter.getObjectType() != null && filter.getObjectType() == EObjectType.SLOTINST) {
				sql += " and slotId in(";
				for (Integer slotId : filter.getSlotInsts()) {
					sql += slotId+",";
				}
				sql += "0)";
			}
			if(!filter.getPerformanceCodeList().isEmpty()){
				sql += " and performancecode in(";
				for (Integer code : filter.getPerformanceCodeList()) {
					sql += code+",";
				}
				sql += "0)";
			}
			if(filter.getStartTime() > 0){
				sql += " and (startTime between '"+sdf.format(new Date(filter.getStartTime()))+"' and '"
				+sdf.format(new Date(filter.getEndTime()))+"') ";
			}
			if(filter.getFiterZero() > 0){
				sql += " and performancevalue != 0 ";
			}
			if(filter.getMonitorCycle() != null){
				sql += " and monitor = " + filter.getMonitorCycle().getValue()+" ";
			}
			if(filter.getIsCardOrSite() > -1){
				sql += " and isCardOrSite = " + filter.getIsCardOrSite() + " ";
			}
		}
		return sql;
	}

	public List<HisPerformanceInfo> selectByPage(int direction, int id, HisPerformanceFilter filter, 
			List<Integer> siteIdList,Connection connection, int pageCount) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = "";
		if(direction == 0){
			sql = "SELECT * FROM history_performance WHERE id<"+id;
			sql = this.getSql(sql, filter, siteIdList);
			sql += "ORDER BY id DESC LIMIT " + pageCount;
		}else{
			sql = "SELECT * FROM history_performance WHERE id>"+id;
			sql = this.getSql(sql, filter, siteIdList);
			sql += "ORDER BY id ASC LIMIT " + pageCount;
		}
		return this.excuteQuery(connection, sql);
	}
	
	/**
	 * 新增历史性能数据
	 * 
	 * @param hisInfo
	 *            任务实体
	 * @param connection
	 *            数据库连接
	 * @return 插入的记录数
	 * @throws Exception
	 */
	public void insertAlll(List<HisPerformanceInfo> hisInfoList, Connection connection)
			throws Exception {
		if (null == hisInfoList) {
			throw new Exception("hisInfoList is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			connection.setAutoCommit(false); 
			sql = "insert into history_performance(siteId,slotId,objectid,objecttype,objectname,"
					+ "performancecode,performancevalue,performancetime,"
					+ "performanceEndtime,taskId,isCardOrSite,startTime,monitor) "
					+ " values(?,?,?,?,?,?,?,?,?,?,?,?,?)";
			preparedStatement = connection.prepareStatement(sql);
			for(HisPerformanceInfo hisInfo: hisInfoList)
			{
				if(null !=hisInfo.getObjectName() && !hisInfo.getObjectName().equals(""))
				{
					preparedStatement.setInt(1, hisInfo.getSiteId());
					preparedStatement.setInt(2, hisInfo.getSlotId());
					preparedStatement.setInt(3, hisInfo.getObjectId());
					preparedStatement.setInt(4, hisInfo.getObjectType().getValue());
					preparedStatement.setString(5, hisInfo.getObjectName());
					preparedStatement.setInt(6, hisInfo.getPerformanceCode());
					preparedStatement.setFloat(7, hisInfo.getPerformanceValue());
					preparedStatement.setString(8, hisInfo.getPerformanceTime());
					preparedStatement.setString(9, hisInfo.getPerformanceEndTime());
					preparedStatement.setInt(10, hisInfo.getTaskId());
					preparedStatement.setInt(11, hisInfo.getIsCardOrSite());
					preparedStatement.setString(12, hisInfo.getStartTime());
					preparedStatement.setInt(13, hisInfo.getMonitorCycle().getValue());
					preparedStatement.addBatch();
				}
			}
			preparedStatement.executeBatch();
			if(connection.getAutoCommit()!=true)
			{
				connection.setAutoCommit(true);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			if (connection.getAutoCommit() != true) {
				connection.commit();
			}
			sql = null;
		}
	}
	
}
