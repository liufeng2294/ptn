package com.nms.model.ptn.oam;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.oam.OamInfo;
import com.nms.db.bean.ptn.oam.OamLinkInfo;
import com.nms.db.bean.ptn.oam.OamMepInfo;
import com.nms.db.bean.ptn.oam.OamMipInfo;
import com.nms.db.dao.ptn.oam.OamInfoDao;
import com.nms.db.enums.EActionType;
import com.nms.db.enums.EServiceType;
import com.nms.db.enums.OamTypeEnum;
import com.nms.model.util.ObjectService;
import com.nms.ui.manager.ExceptionManage;

public class OamInfoService extends ObjectService {
	public void setConnection(Connection connection) {
		super.connection = connection;
	}

	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}

	private OamInfoDao oamInfoDao = new OamInfoDao();

	/*
	 * 保存或者更新
	 */
	public int saveOrUpdate(OamInfo oam) throws Exception {
		if (null == oam) {
			throw new Exception("oam is null");
		}
		int result = 0;
		int type = 0;
		try {
			//段
			if (oam.getOamType() == OamTypeEnum.AMEP || oam.getOamType() == OamTypeEnum.ZMEP || oam.getOamType() == OamTypeEnum.MEP) {
				if("SECTION".equals(oam.getOamMep().getObjType())){
					type = EServiceType.ETH.getValue();
				}else{
					type = EServiceType.from(oam.getOamMep().getObjType());
				}
				if (0==oam.getOamMep().getId()) {
					result = oamInfoDao.insert(oam.getOamMep(), connection);
					//离线网元数据下载
 					super.dateDownLoad(oam.getOamMep().getSiteId(),result,type,EActionType.INSERT.getValue(), "",null,oam.getOamMep().getObjId(),0,OamTypeEnum.MEP.getValue()+"");
				} else {
					oamInfoDao.update(oam.getOamMep(), connection);
					//离线网元数据下载
					super.dateDownLoad(oam.getOamMep().getSiteId(),oam.getOamMep().getId(),type, EActionType.UPDATE.getValue(), "",null,oam.getOamMep().getObjId(),0,OamTypeEnum.MEP.getValue()+"");
				}
			} else if (oam.getOamType() == OamTypeEnum.MIP) {
				//tunnel界面修改时，mipID界面没有收集，所以需要做修改
				OamMipInfo oamMipInfo = this.queryMep(oam.getOamMip());
				if (oamMipInfo != null && oamMipInfo.getId()>0) {
					oamInfoDao.update(oam.getOamMip(), connection);
					//离线网元数据下载
 					super.dateDownLoad(oam.getOamMip().getSiteId(),oam.getOamMip().getId(),EServiceType.TUNNEL.getValue(), EActionType.UPDATE.getValue(), "",null,oam.getOamMip().getObjId(),0,OamTypeEnum.MIP.getValue()+"");
				} else {
					result = oamInfoDao.insert(oam.getOamMip(), connection);
					//离线网元数据下载
 					super.dateDownLoad(oam.getOamMip().getSiteId(),result,EServiceType.TUNNEL.getValue(), EActionType.INSERT.getValue(), "",null,oam.getOamMip().getObjId(),0,OamTypeEnum.MIP.getValue()+"");

				}
			} else {
				OamInfo oamInfo = this.queryByCondition(oam, OamTypeEnum.LINKOAM);
				if(oamInfo.getOamLinkInfo() != null){
					if (0==oamInfo.getOamLinkInfo().getId()) {
						result = oamInfoDao.insert(oam.getOamLinkInfo(), connection);
						//离线网元数据下载
						super.dateDownLoad(oam.getOamLinkInfo().getSiteId(),result, EServiceType.OAMETHLINK.getValue(), EActionType.INSERT.getValue(), "",null,oam.getOamLinkInfo().getObjId(),0,OamTypeEnum.LINKOAM.getValue()+"");
					} else {
						oamInfoDao.updata(oam.getOamLinkInfo(), connection);
						//离线网元数据下载
						super.dateDownLoad(oam.getOamLinkInfo().getSiteId(),result, EServiceType.OAMETHLINK.getValue(), EActionType.UPDATE.getValue(), "",null,oam.getOamLinkInfo().getObjId(),0,OamTypeEnum.LINKOAM.getValue()+"");
					}
				}
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			oam = null;
		}
		return result;

	}

	/*
	 * 删除oam
	 */
	public int delete(OamInfo oam) throws Exception {
		if (null == oam) {
			throw new Exception("oam is null");
		}
		int result = 0;
		int type = 0;
		try {
			if (oam.getOamMep() != null) {
				result = oamInfoDao.delete(oam.getOamMep(), connection);
				//离线网元数据下载
				if("SECTION".equals(oam.getOamMep().getObjType())){
					type = EServiceType.ETH.getValue();
				}else{
					type = EServiceType.from(oam.getOamMep().getObjType());
				}
				super.dateDownLoad(oam.getOamMep().getSiteId(),oam.getOamMep().getId(), type, EActionType.DELETE.getValue(), oam.getOamMep().getServiceId()+"",null,oam.getOamMep().getObjId(),0,OamTypeEnum.AMEP.getValue()+"");
			}
			if (oam.getOamMip() != null) {
				result = oamInfoDao.delete(oam.getOamMip(), connection);
				//离线网元数据下载
				super.dateDownLoad(oam.getOamMip().getSiteId(),oam.getOamMip().getId(), EServiceType.TUNNEL.getValue(), EActionType.DELETE.getValue(), "",null,oam.getOamMip().getObjId(),0,OamTypeEnum.MIP.getValue()+"");
			}
			if (oam.getOamLinkInfo() != null) {
				result = oamInfoDao.delete(oam.getOamLinkInfo(), connection);
				//离线网元数据下载
				super.dateDownLoad(oam.getOamLinkInfo().getSiteId(),oam.getOamLinkInfo().getId(), EServiceType.OAMETHLINK.getValue(), EActionType.DELETE.getValue(), "",null,oam.getOamLinkInfo().getObjId(),0,OamTypeEnum.LINKOAM.getValue()+"");
			}
		} catch (Exception e) {
			throw e;
		} finally {
			oam = null;
		}
		return result;
	}

	/*
	 * 根据对象类型和对象id查找oamMepInfo
	 */
	public OamInfo queryByCondition(OamInfo oam, OamTypeEnum oamType) throws Exception {
		if (null == oam) {
			throw new Exception("oam is null");
		}
		OamInfo oamInfo = null;
		try {
			oamInfo = new OamInfo();
			if (oamType == OamTypeEnum.AMEP || oamType == OamTypeEnum.ZMEP) {
				oamInfo.setOamMep(oamInfoDao.queryMepByCondition(oam.getOamMep(), connection));
			} else if (oamType == OamTypeEnum.MIP) {
				oamInfo.setOamMip(oamInfoDao.queryMipByCondition(oam.getOamMip(), connection));
			} else {
				oamInfo.setOamLinkInfo(oamInfoDao.queryOamLinkInfoByCondition(oam.getOamLinkInfo(), connection));
			}
		} catch (Exception e) {
			throw e;
		} finally {
			oam = null;
		}
		return oamInfo;
	}

	public List<OamInfo> queryBySiteId(OamInfo oamInfo, OamTypeEnum oamType) throws Exception {
		if (null == oamInfo) {
			throw new Exception("oam is null");
		}
		List<OamMepInfo> oamMepList = null;
		List<OamInfo> oamInfoList = null;
		try {
			oamInfoList = new ArrayList<OamInfo>();
			if (oamType == OamTypeEnum.AMEP || oamType == OamTypeEnum.ZMEP) {
				oamMepList = oamInfoDao.queryMepByTypeAndSiteId(oamInfo.getOamMep(), connection);
			}
			for (OamMepInfo oamMepInfo : oamMepList) {
				OamInfo info = new OamInfo();
				info.setOamMep(oamMepInfo);
				oamInfoList.add(info);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			oamMepList = null;
		}
		return oamInfoList;
	}

	/**
	 * 通过网元id查询以太网链路oam
	 * @param oam
	 * @return
	 * @throws Exception
	 */
	public List<OamInfo> queryLinkOAMBySiteId(OamInfo oam) throws Exception {
		if (oam == null) {
			throw new Exception("oam  is null");
		}
		List<OamInfo> oamList = null;
		List<OamLinkInfo> oamLinkList = null;
		OamLinkInfo linkInfo = null;
		OamInfo oamInfo = null;
		try {
			oamList = new ArrayList<OamInfo>();
			oamLinkList = new ArrayList<OamLinkInfo>();
			linkInfo = new OamLinkInfo();
			linkInfo.setObjType(oam.getOamLinkInfo().getObjType());
			linkInfo.setSiteId(oam.getOamLinkInfo().getSiteId());
			oamLinkList = oamInfoDao.queryOamLinkByType(linkInfo, connection);
			for (OamLinkInfo info : oamLinkList) {
				oamInfo = new OamInfo();
				oamInfo.setOamLinkInfo(info);

				oamInfo.setId(info.getId());
				oamList.add(oamInfo);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			linkInfo = null;
			oamInfo = null;
		}

		return oamList;
	}

	/*
	 * 根据serviceId查询
	 */
	public List<OamInfo> queryByServiceId(OamInfo oam) throws Exception {
		if (null == oam) {
			throw new Exception("oam is null");
		}
		List<OamInfo> oamList = null;
		List<OamMepInfo> oamMepList = null;
		List<OamInfo> oamMipList = null;
		OamMepInfo oamMep = null;
		OamMipInfo oamMip = null;
		OamInfo oamI = null;
		try {
			oamList = new ArrayList<OamInfo>();
			oamMepList = new ArrayList<OamMepInfo>();
			oamMep = new OamMepInfo();
			oamMep.setServiceId(oam.getOamMep().getServiceId());
			oamMep.setObjType(oam.getOamMep().getObjType());
			oamMep.setSiteId(oam.getOamMep().getSiteId());
			oamMepList = oamInfoDao.queryMepByServiceId(oamMep, connection);
			for (OamMepInfo oamM : oamMepList) {
				oamI = new OamInfo();
				oamI.setOamMep(oamM);
				oamI.setId(oamM.getId());
				oamI.setOamType(OamTypeEnum.MEP);
				oamList.add(oamI);
			}
			oamMip = new OamMipInfo();
			oamMip.setServiceId(oam.getOamMep().getServiceId());
//			oamMip.setSiteId(oam.getOamMep().getSiteId());
			oamMip.setObjType(oam.getOamMep().getObjType());
			oamMipList = oamInfoDao.queryMipByConditionForList(oamMip, connection);
			for (OamInfo oami : oamMipList) {
				oamList.add(oami);
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			oam = null;
		}

		return oamList;
	}

	/*
	 * 根据serviceId查询
	 */
	public List<OamInfo> queryByServiceForNode(OamInfo oam) throws Exception {
		if (null == oam) {
			throw new Exception("oam is null");
		}
		List<OamInfo> oamList = null;
		List<OamMepInfo> oamMepList = null;
		List<OamMipInfo> oamMipList = null;
		OamMepInfo oamMep = null;
		OamMipInfo oamMip = null;
		OamInfo oamI = null;
		try {
			oamList = new ArrayList<OamInfo>();
			oamMepList = new ArrayList<OamMepInfo>();
			oamMep = new OamMepInfo();
			oamMep.setServiceId(oam.getOamMep().getServiceId());
			oamMep.setSiteId(oam.getOamMep().getSiteId());
			oamMep.setObjType(oam.getOamMep().getObjType());
			oamMepList = oamInfoDao.queryMepByType(oamMep, connection);
			for (OamMepInfo oamM : oamMepList) {
				oamI = new OamInfo();
				oamI.setOamMep(oamM);
				oamI.setId(oamM.getId());
				oamI.setOamType(OamTypeEnum.MEP);
				oamList.add(oamI);
			}
			oamMip = new OamMipInfo();
			oamMip.setServiceId(oam.getOamMep().getServiceId());
			oamMip.setSiteId(oam.getOamMep().getSiteId());
			oamMip.setObjType(oam.getOamMep().getObjType());
			oamMipList = oamInfoDao.queryMipByServiceId(oamMip, connection);
			for (OamMipInfo oamM : oamMipList) {
				oamI = new OamInfo();
				oamI.setOamMip(oamM);
				oamI.setId(oamM.getId());
				oamI.setOamType(OamTypeEnum.MIP);
				oamList.add(oamI);
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			oam = null;
		}

		return oamList;
	}

	/**
	 * 查询mip
	 * 
	 * @author kk
	 * 
	 * @param
	 * 
	 * @return
	 * 
	 * @Exception 异常对象
	 */
	public List<OamInfo> queryMipOam(OamMipInfo oamMipInfo) throws Exception {
		List<OamMipInfo> oamMipList = oamInfoDao.queryMipByServiceId(oamMipInfo, connection);
		OamInfo oamI = null;
		List<OamInfo> oamList = new ArrayList<OamInfo>();

		for (OamMipInfo oamM : oamMipList) {
			oamI = new OamInfo();
			oamI.setOamMip(oamM);
			oamI.setId(oamM.getId());
			oamI.setOamType(OamTypeEnum.MIP);
			oamList.add(oamI);
		}
		return oamList;
	}

	/*
	 * 判断该oamMep是否存在
	 */
	public boolean checkOamMepIsExist(OamMepInfo oamMep) {
		OamMepInfo oam = null;
		try {
			oam = oamInfoDao.queryMepByCondition(oamMep, connection);
			if (oam == null) {
				return false;
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			oam = null;
		}
		return true;
	}

	public  boolean checklinkOamIsExist(OamLinkInfo oamLinkInfo) {
		OamLinkInfo oam = null;
		try {
			oam = oamInfoDao.queryOamLinkInfoByCondition(oamLinkInfo, connection);
			if (oam == null) {
				return false;
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());

		} finally {
			oam = null;
		}
		return true;
	}

	/*
	 * 生成MegId,且不能重复
	 */
	public String generateMegId() {
		StringBuffer megId = new StringBuffer();
		char megIcc = 0;
		char megUmc = 0;
		int i = 0, j = 0;
		do {
			i = 1 + (int) Math.abs(Math.random() * 11);
			switch (i) {
			case 1:
				megIcc = '1';
				megId.append(megIcc);
				break;
			case 2:
				megIcc = (char) ('1' + Math.random() * ('2' - '1' + 1));
				megId.append(megIcc);
				break;
			case 3:
				megIcc = (char) ('1' + Math.random() * ('3' - '1' + 1));
				megId.append(megIcc);
				break;
			case 4:
				megIcc = (char) ('1' + Math.random() * ('4' - '1' + 1));
				megId.append(megIcc);
				break;
			case 5:
				megIcc = (char) ('1' + Math.random() * ('5' - '1' + 1));
				megId.append(megIcc);
				break;
			case 6:
				megIcc = (char) ('1' + Math.random() * ('6' - '1' + 1));
				megId.append(megIcc);
				break;
			case 7:
				megId.append('1');
				megId.append((char) ('1' + Math.random() * ('2' - '1' + 1)));
				break;
			case 8:
				megId.append((char) ('1' + Math.random() * ('2' - '1' + 1)));
				megId.append((char) ('1' + Math.random() * ('3' - '1' + 1)));
				break;
			case 9:
				megId.append((char) ('1' + Math.random() * ('3' - '1' + 1)));
				megId.append((char) ('1' + Math.random() * ('4' - '1' + 1)));
				break;
			case 10:
				megId.append((char) ('1' + Math.random() * ('4' - '1' + 1)));
				megId.append((char) ('1' + Math.random() * ('5' - '1' + 1)));
				break;
			case 11:
				megId.append((char) ('1' + Math.random() * ('5' - '1' + 1)));
				megId.append((char) ('1' + Math.random() * ('6' - '1' + 1)));
				break;
			}
			j = 1 + (int) Math.abs(Math.random() * 3);
			switch (j) {
			case 1:
				megUmc = (char) ('a' + Math.random() * ('c' - 'a' + 1));
				megId.append("*" + megUmc);
				break;
			case 2:
				megUmc = (char) ('7' + Math.random() * ('9' - '7' + 1));
				megId.append("*" + megUmc);
				break;
			case 3:
				megId.append("*" + (char) ('7' + Math.random() * ('9' - '7' + 1)));
				megId.append((char) ('a' + Math.random() * ('c' - 'a' + 1)));
				break;
			}
		} while (!checkMegIdDbIsExsits(megIcc, megUmc));

		return megId.toString();
	}

	/*
	 * 判断megId
	 */
	private boolean checkMegIdDbIsExsits(char megIcc, char megUmc) {
		List<OamMepInfo> oamList = null;
		try {
			oamList = new ArrayList();
			oamList = oamInfoDao.queryMepByMegId(megIcc, megUmc, connection);
			if (oamList.size() == 0) {
				return true;
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			oamList = null;
		}
		return false;
	}
	
	/**
	 *  根据网元ID、serviceId、objectType 修改objId  tunnel保护时用
	
	* @author kk
	
	* @param   
	
	* @return 
	 * @throws Exception 
	
	* @Exception 异常对象
	 */
	public void update_mep_objid(int objid,int siteId,int serviceId,String objtype,Connection connection) throws Exception{
		this.oamInfoDao.update_mep_objid(objid, siteId, serviceId, objtype, connection);
	}

	
	public List<OamInfo> queryBySiteIdAndType(OamInfo oam) throws Exception {
		if (null == oam) {
			throw new Exception("oam is null");
		}
		List<OamInfo> oamList = null;
		List<OamMepInfo> oamMepList = null;
		OamMepInfo oamMep = null;
		OamInfo oamI = null;
		try {
			oamList = new ArrayList<OamInfo>();
			oamMepList = new ArrayList<OamMepInfo>();
			oamMep = new OamMepInfo();
//			oamMep.setServiceId(oam.getOamMep().getServiceId());
			oamMep.setSiteId(oam.getOamMep().getSiteId());
			oamMep.setObjType(oam.getOamMep().getObjType());
			oamMepList = oamInfoDao.queryMepByType(oamMep, connection);
			for (OamMepInfo oamM : oamMepList) {
				oamI = new OamInfo();
				oamI.setOamMep(oamM);
				oamI.setId(oamM.getId());
				oamI.setOamType(OamTypeEnum.AMEP);
				oamList.add(oamI);
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			oam = null;
		}

		return oamList;
	}
	
	/**
	 * 删除oam
	 */
	public int deleteById(OamInfo oam) throws Exception {
		if (null == oam) {
			throw new Exception("oam is null");
		}
		int result = 0;
		try {
			if (oam.getOamMep() != null) {
				result = oamInfoDao.deleteMepInfo(oam.getOamMep(), connection);
			}
			if (oam.getOamMip() != null) {
				result = oamInfoDao.delete(oam.getOamMip(), connection);
			}
			if (oam.getOamLinkInfo() != null) {
				result = oamInfoDao.delete(oam.getOamLinkInfo(), connection);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			oam = null;
		}
		return result;
	}

	public boolean queryByObjIdAndType(OamMepInfo mep) throws Exception {
		if (null == mep) {
			throw new Exception("oamMep is null");
		}
		boolean flag = false;
		try {
			flag = oamInfoDao.queryMepByObjIdAndType(mep, connection);
		} catch (Exception e) {
			throw e;
		}
		return flag;
		
	}
	
	/**
	 * 条件查询mep
	 * @param mep
	 * @return
	 * @throws Exception
	 */
	public List<OamMepInfo> selectByOamMepInfo(OamMepInfo mep) throws Exception{
		if (null == mep) {
			throw new Exception("oamMep is null");
		}
		List<OamMepInfo> oamMepInfos = oamInfoDao.selectByOamMepInfo(mep, connection);
		return oamMepInfos;
	}

	public void updateEquipExitStatusForEthLinkOam(int siteId, int status) {
		try {
			this.oamInfoDao.updateEquipExitStatusForEthLinkOam(siteId,status, super.connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
	}
	

	/*
	 * 根据对象类型和对象id查找oamMepInfo
	 */
	public List<OamInfo> queryMipListByCondition(OamInfo oam, OamTypeEnum oamType) throws Exception {
		return oamInfoDao.queryMipByConditionForList(oam.getOamMip(),this.connection);
	}
	/**
	 * 条件查询
	 * @param oamMep
	 * @return
	 */
	public OamMepInfo queryMep(OamMepInfo oamMep) {
		OamMepInfo oam = null;
		try {
			oam = oamInfoDao.queryMepByCondition(oamMep, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} 
		return oam;
	}
	/**
	 * 条件查询
	 * @param oamMip
	 * @return
	 */
	public OamMipInfo queryMep(OamMipInfo oamMip) {
		OamMipInfo oam = null;
		try {
			oam = oamInfoDao.queryMipByCondition(oamMip, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return oam;
	}

	/**
	 *  根据主键id修改objId
	 */
	public void updateObjIdById(OamMepInfo mep) throws Exception{
		this.oamInfoDao.updateMepById(mep, connection);
	}
}
