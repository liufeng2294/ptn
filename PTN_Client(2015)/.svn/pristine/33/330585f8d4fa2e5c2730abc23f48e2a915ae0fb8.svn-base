package com.nms.db.dao.ptn.port;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.nms.db.bean.ptn.port.Acbuffer;

public class AcbufferDao {

	/**
	 * 新增
	 * 
	 * @param acbuffer
	 *            流对象
	 * @param connection
	 *            数据库连接
	 * @throws Exception
	 */
	public int insert(Acbuffer acbuffer, Connection connection)
			throws Exception {

		if (null == acbuffer) {
			throw new Exception("acbuffer is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}

		int result = 0;
		PreparedStatement preparedStatement = null;
		String sql = null;
		try {
			sql = "INSERT INTO `acbuffer` (acId,bufferEnable,vlanId,sourceMac,targetmac,eightIp,sourceIp,targetIp,ipDscp,model,cir,pir,cm,cbs,pbs,strategy,phb,portId,siteId,"
					+ "OperatorVlanIdValue,OperatorVlanIdMask,clientVlanIdValue,clientVlanIdMask,OperatorVlanPriorityValue,OperatorVlanPriorityMask,"
					+ "ClientVlanPriorityValue,ClientVlanPriorityMask,iPTypeValue,iPTypeMask,SinkIpLabelMask,SourceIpLabelMask,SinkMacLabelMask,"
					+ "SourceMacLabelMask ,qosName,qostype,simpleQosId,EthernetTypeValue,EthernetTypeMask,AppendBufferName,ebs,eir,sourceTcpPort,endTcpPort,IPToS,portType) "
					+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, acbuffer.getAcId());
			preparedStatement.setInt(2, acbuffer.getBufferEnable());
			preparedStatement.setInt(3, acbuffer.getVlanId());
			preparedStatement.setString(4, acbuffer.getSourceMac());
			preparedStatement.setString(5, acbuffer.getTargetMac());
			preparedStatement.setInt(6, acbuffer.getEightIp());
			preparedStatement.setString(7, acbuffer.getSourceIp());
			preparedStatement.setString(8, acbuffer.getTargetIp());
			preparedStatement.setInt(9, acbuffer.getIpDscp());
			preparedStatement.setInt(10, acbuffer.getModel());
			preparedStatement.setInt(11, acbuffer.getCir());
			preparedStatement.setInt(12, acbuffer.getPir());
			preparedStatement.setInt(13, acbuffer.getCm());
			preparedStatement.setInt(14, acbuffer.getCbs());
			preparedStatement.setInt(15, acbuffer.getPbs());
			preparedStatement.setInt(16, acbuffer.getStrategy());
			preparedStatement.setInt(17, acbuffer.getPhb());
			preparedStatement.setInt(18, acbuffer.getPortId());
			preparedStatement.setInt(19, acbuffer.getSiteId());
			preparedStatement.setString(20, acbuffer.getOperatorVlanIdValue());
			preparedStatement.setString(21, acbuffer.getOperatorVlanIdMask());
			preparedStatement.setString(22, acbuffer.getClientVlanIdValue());
			preparedStatement.setString(23, acbuffer.getClientVlanIdMask());
			preparedStatement.setString(24, acbuffer.getOperatorVlanPriorityValue());
			preparedStatement.setString(25, acbuffer.getOperatorVlanPriorityMask());
			preparedStatement.setString(26, acbuffer.getClientVlanPriorityValue());
			preparedStatement.setString(27, acbuffer.getClientVlanPriorityMask());
			preparedStatement.setString(28, acbuffer.getiPTypeValue());
			preparedStatement.setString(29, acbuffer.getiPTypeMask());
			preparedStatement.setString(30, acbuffer.getSinkIpLabelMask());
			preparedStatement.setString(31, acbuffer.getSourceIpLabelMask());
			preparedStatement.setString(32, acbuffer.getSinkMacLabelMask());
			preparedStatement.setString(33, acbuffer.getSourceMacLabelMask());
			preparedStatement.setString(34, acbuffer.getQosName());
			preparedStatement.setString(35, acbuffer.getQosType());	
			preparedStatement.setInt(36, acbuffer.getSimpleQosId());
			preparedStatement.setString(37, acbuffer.getEthernetTypeValue());	
			preparedStatement.setString(38, acbuffer.getEthernetTypeMask());
			preparedStatement.setString(39, acbuffer.getAppendBufferName());
			preparedStatement.setInt(40, acbuffer.getEbs());
			preparedStatement.setInt(41, acbuffer.getEir());
			preparedStatement.setInt(42, acbuffer.getSourceTcpPortId());
			preparedStatement.setInt(43, acbuffer.getEndTcpPortId());
			preparedStatement.setInt(44, acbuffer.getIPTOS());
			preparedStatement.setInt(45, acbuffer.getPortType());
			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}

	public int update(Acbuffer buffer, Connection connection) throws Exception {
		if (null == buffer) {
			throw new Exception("buffer is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
//		ResultSet rs=null;
		try {
			sql = "update acbuffer set acId = ?,bufferEnable = ?,vlanId=?,sourceMac=?,targetmac=?,eightIp=?,"
					+ "sourceIp=?,targetIp=?,ipDscp=?,model=?,cir=?,pir=?,cm=?,cbs=?,pbs=?,strategy=?,phb=?,portId=?, siteId=? ,"
					+ "OperatorVlanIdValue=?,OperatorVlanIdMask=?,ClientVlanIdValue=?,ClientVlanIdMask=?,OperatorVlanPriorityValue=?,"
					+ "OperatorVlanPriorityMask=?,ClientVlanPriorityValue=?,ClientVlanPriorityMask=?,iPTypeValue=?,iPTypeMask=?,"
					+ "SinkIpLabelMask=?,SourceIpLabelMask=?,SinkMacLabelMask=?,SourceMacLabelMask=? ,EthernetTypeValue=?"
					+ ",EthernetTypeMask=?, QosName = ?, AppendBufferName=?,ebs=?,eir=?,sourceTcpPort=?,endTcpPort=?,IPToS=?,portType=? where id=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, buffer.getAcId());
			preparedStatement.setInt(2, buffer.getBufferEnable());
			preparedStatement.setInt(3, buffer.getVlanId());
			preparedStatement.setString(4, buffer.getSourceMac());
			preparedStatement.setString(5, buffer.getTargetMac());
			preparedStatement.setInt(6, buffer.getEightIp());
			preparedStatement.setString(7, buffer.getSourceIp());
			preparedStatement.setString(8, buffer.getTargetIp());
			preparedStatement.setInt(9, buffer.getIpDscp());
			preparedStatement.setInt(10, buffer.getModel());
			preparedStatement.setInt(11, buffer.getCir());
			preparedStatement.setInt(12, buffer.getPir());
			preparedStatement.setInt(13, buffer.getCm());
			preparedStatement.setInt(14, buffer.getCbs());
			preparedStatement.setInt(15, buffer.getPbs());
			preparedStatement.setInt(16, buffer.getStrategy());
			preparedStatement.setInt(17, buffer.getPhb());
			preparedStatement.setInt(18, buffer.getPortId());
			preparedStatement.setInt(19, buffer.getSiteId());
			preparedStatement.setString(20, buffer.getOperatorVlanIdValue());
			preparedStatement.setString(21, buffer.getOperatorVlanIdMask());
			preparedStatement.setString(22, buffer.getClientVlanIdValue());
			preparedStatement.setString(23, buffer.getClientVlanIdMask());
			preparedStatement.setString(24, buffer.getOperatorVlanPriorityValue());
			preparedStatement.setString(25, buffer.getOperatorVlanPriorityMask());
			preparedStatement.setString(26, buffer.getClientVlanPriorityValue());
			preparedStatement.setString(27, buffer.getClientVlanPriorityMask());
			preparedStatement.setString(28, buffer.getiPTypeValue());
			preparedStatement.setString(29, buffer.getiPTypeMask());
			preparedStatement.setString(30, buffer.getSinkIpLabelMask());
			preparedStatement.setString(31, buffer.getSourceIpLabelMask());
			preparedStatement.setString(32, buffer.getSinkMacLabelMask());
			preparedStatement.setString(33, buffer.getSourceMacLabelMask());
			preparedStatement.setString(34, buffer.getEthernetTypeValue());
			preparedStatement.setString(35, buffer.getEthernetTypeMask());
			preparedStatement.setString(36, buffer.getQosName());
			preparedStatement.setString(37, buffer.getAppendBufferName());
			preparedStatement.setInt(38, buffer.getEbs());
			preparedStatement.setInt(39, buffer.getEir());
			preparedStatement.setInt(40, buffer.getSourceTcpPortId());
			preparedStatement.setInt(41, buffer.getEndTcpPortId());
			preparedStatement.setInt(42, buffer.getIPTOS());
			preparedStatement.setInt(43, buffer.getPortType());
			preparedStatement.setInt(44, buffer.getId());
			result=	 preparedStatement.executeUpdate();
//			 // 返回数据库自动生成的id
//			  rs = preparedStatement.getGeneratedKeys();
//				if (rs.next()) {
//					result = rs.getInt(1);
//				} 
			
		} catch (Exception e) {
			throw e;
		} finally {
//			if(rs!=null){
//				try {
//					rs.close();
//				} catch (Exception e) {
//					throw e;
//				}
//				rs = null;	
//			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 根据业务ID删除
	 * 
	 * @param acId
	 *            业务ID
	 * @param connection
	 *            数据库连接
	 * @throws Exception
	 */
	public void delete(int acId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			sql = "delete from acbuffer where acId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, acId);

			preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
	}
	
	public void deletebyBufferId(int bufferId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			sql = "delete from acbuffer where id=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, bufferId);

			preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
	}


	/**
	 * 根据acID查询
	 * 
	 * @param acId
	 *            业务ID
	 * @param connection
	 *            数据库连接
	 * @return 流集合
	 * @throws Exception
	 */
	public List<Acbuffer> query(int acId, Connection connection)
			throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<Acbuffer> acbufferList = null;
		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Acbuffer acbuffer = null;
		try {
			acbufferList = new ArrayList<Acbuffer>();
			sql = "select * from acbuffer where acId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, acId);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				acbuffer = new Acbuffer();
				acbuffer.setBufferEnable(resultSet.getInt("bufferenable"));
				acbuffer.setCbs(resultSet.getInt("cbs"));
				acbuffer.setCir(resultSet.getInt("cir"));
				acbuffer.setCm(resultSet.getInt("cm"));
				acbuffer.setEightIp(resultSet.getInt("eightIp"));
				acbuffer.setAcId(resultSet.getInt("acId"));
				acbuffer.setId(resultSet.getInt("id"));
				acbuffer.setIpDscp(resultSet.getInt("ipDscp"));
				acbuffer.setModel(resultSet.getInt("model"));
				acbuffer.setPbs(resultSet.getInt("pbs"));
				acbuffer.setPhb(resultSet.getInt("phb"));
				acbuffer.setPir(resultSet.getInt("pir"));
				acbuffer.setSourceIp(resultSet.getString("sourceIp"));
				acbuffer.setSourceMac(resultSet.getString("sourceMac"));
				acbuffer.setStrategy(resultSet.getInt("strategy"));
				acbuffer.setTargetIp(resultSet.getString("targetIp"));
				acbuffer.setTargetMac(resultSet.getString("targetmac"));
				acbuffer.setVlanId(resultSet.getInt("vlanId"));
				acbuffer.setSiteId(resultSet.getInt("siteId"));
				acbuffer.setSourceTcpPortId(resultSet.getInt("sourceTcpPort"));
				acbuffer.setEndTcpPortId(resultSet.getInt("endTcpPort"));
				acbuffer.setIPTOS(resultSet.getInt("IPToS"));
				acbuffer.setPortType(resultSet.getInt("portType"));
				acbufferList.add(acbuffer);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
			acbuffer = null;
		}

		return acbufferList;
	}

	public Acbuffer querybyBufferId(int bufferId, Connection connection)
			throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Acbuffer acbuffer = null;
		try {
			sql = "select * from acbuffer where id=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, bufferId);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				acbuffer = new Acbuffer();
				acbuffer.setBufferEnable(resultSet.getInt("bufferenable"));
				acbuffer.setCbs(resultSet.getInt("cbs"));
				acbuffer.setCir(resultSet.getInt("cir"));
				acbuffer.setCm(resultSet.getInt("cm"));
				acbuffer.setEightIp(resultSet.getInt("eightIp"));
				acbuffer.setAcId(resultSet.getInt("acId"));
				acbuffer.setId(resultSet.getInt("id"));
				acbuffer.setIpDscp(resultSet.getInt("ipDscp"));
				acbuffer.setModel(resultSet.getInt("model"));
				acbuffer.setPbs(resultSet.getInt("pbs"));
				acbuffer.setPhb(resultSet.getInt("phb"));
				acbuffer.setPir(resultSet.getInt("pir"));
				acbuffer.setSourceIp(resultSet.getString("sourceIp"));
				acbuffer.setSourceMac(resultSet.getString("sourceMac"));
				acbuffer.setStrategy(resultSet.getInt("strategy"));
				acbuffer.setTargetIp(resultSet.getString("targetIp"));
				acbuffer.setTargetMac(resultSet.getString("targetmac"));
				acbuffer.setVlanId(resultSet.getInt("vlanId"));
				acbuffer.setSiteId(resultSet.getInt("siteId"));
				acbuffer.setSourceTcpPortId(resultSet.getInt("sourceTcpPort"));
				acbuffer.setEndTcpPortId(resultSet.getInt("endTcpPort"));
				acbuffer.setIPTOS(resultSet.getInt("IPToS"));
				acbuffer.setPortType(resultSet.getInt("portType"));
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return acbuffer;
	}

	
	/**
	 * 根据条件查询
	 * 
	 * @param acId
	 *            业务ID
	 * @param connection
	 *            数据库连接
	 * @return 流集合
	 * @throws Exception
	 */
	public List<Acbuffer> queryByCondition(Acbuffer acbuffer, Connection connection)
			throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<Acbuffer> acbufferList = null;
		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Acbuffer acbuffer_result = null;
		try {
			acbufferList = new ArrayList<Acbuffer>();
			sql = "select * from acbuffer where 1=1";
			if (acbuffer.getAcId() > 0) {
				sql += " and acid=" + acbuffer.getAcId();
			}
			if (acbuffer.getPortId() > 0) {
				sql += " and portId=" + acbuffer.getPortId();
			}
			if (acbuffer.getVlanId() > 0) {
				sql += " and vlanId=" + acbuffer.getVlanId();
			}
			if (acbuffer.getSiteId() > 0) {
				sql += " and SiteId=" + acbuffer.getSiteId();
			}
			if (null!=acbuffer.getQosType()&&!"".equals(acbuffer.getQosType() )) {
				sql += " and QosType=" + acbuffer.getQosType();
			}
			if (acbuffer.getSimpleQosId() > 0) {
				sql += " and SimpleQosId=" + acbuffer.getSimpleQosId();
			}
			
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				acbuffer_result = new Acbuffer();
				acbuffer_result.setId(resultSet.getInt("id"));
				acbuffer_result.setBufferEnable(resultSet.getInt("bufferenable"));
				acbuffer_result.setCbs(resultSet.getInt("cbs"));
				acbuffer_result.setCir(resultSet.getInt("cir"));
				acbuffer_result.setCm(resultSet.getInt("cm"));
				acbuffer_result.setEightIp(resultSet.getInt("eightIp"));
				acbuffer_result.setAcId(resultSet.getInt("acId"));
				acbuffer_result.setId(resultSet.getInt("id"));
				acbuffer_result.setIpDscp(resultSet.getInt("ipDscp"));
				acbuffer_result.setModel(resultSet.getInt("model"));
				acbuffer_result.setPbs(resultSet.getInt("pbs"));
				acbuffer_result.setPhb(resultSet.getInt("phb"));
				acbuffer_result.setPir(resultSet.getInt("pir"));
				acbuffer_result.setSourceIp(resultSet.getString("sourceIp"));
				acbuffer_result.setSourceMac(resultSet.getString("sourceMac"));
				acbuffer_result.setStrategy(resultSet.getInt("strategy"));
				acbuffer_result.setTargetIp(resultSet.getString("targetIp"));
				acbuffer_result.setTargetMac(resultSet.getString("targetmac"));
				acbuffer_result.setVlanId(resultSet.getInt("vlanId"));
				acbuffer_result.setSiteId(resultSet.getInt("siteId"));
				acbuffer_result.setAppendBufferName(resultSet.getString("appendBufferName"));
				acbuffer_result.setSimpleQosId(resultSet.getInt("simpleQosId"));
				acbuffer.setSourceTcpPortId(resultSet.getInt("sourceTcpPort"));
				acbuffer.setEndTcpPortId(resultSet.getInt("endTcpPort"));
				acbuffer.setIPTOS(resultSet.getInt("IPToS"));
				acbuffer.setPortType(resultSet.getInt("portType"));
				acbufferList.add(acbuffer_result);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
			acbuffer = null;
		}

		return acbufferList;
	}

	/**
	 * 根据业务ID删除
	 * 
	 * @param acId
	 *            业务ID
	 * @param connection
	 *            数据库连接
	 * @throws Exception
	 */
	public void deleteBySiteId(int siteId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			sql = "delete from acbuffer where siteId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);

			preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
	}


	public List<Acbuffer> appendBufferCount(Acbuffer acbuffer,
			Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<Acbuffer> acbufferList = null;
		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Acbuffer acbuffer_result = null;
		try {
			acbufferList = new ArrayList<Acbuffer>();
			sql = "select * from acbuffer where 1=1 and appendBufferName is not null";
			if (0!=acbuffer.getSiteId()) {
				sql += " and siteId =" + acbuffer.getSiteId();
			}
			if (null!=acbuffer.getQosType()&&!"".equals(acbuffer.getQosType())) {
				sql += " and QosType =" + acbuffer.getQosType();
			}
			sql += " GROUP BY appendBufferName ORDER BY appendBufferName DESC;";
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				acbuffer_result = new Acbuffer();
				acbuffer_result.setId(resultSet.getInt("id"));
				acbuffer_result.setBufferEnable(resultSet.getInt("bufferenable"));
				acbuffer_result.setCbs(resultSet.getInt("cbs"));
				acbuffer_result.setCir(resultSet.getInt("cir"));
				acbuffer_result.setCm(resultSet.getInt("cm"));
				acbuffer_result.setEightIp(resultSet.getInt("eightIp"));
				acbuffer_result.setAcId(resultSet.getInt("acId"));
				acbuffer_result.setId(resultSet.getInt("id"));
				acbuffer_result.setIpDscp(resultSet.getInt("ipDscp"));
				acbuffer_result.setModel(resultSet.getInt("model"));
				acbuffer_result.setPbs(resultSet.getInt("pbs"));
				acbuffer_result.setPhb(resultSet.getInt("phb"));
				acbuffer_result.setPir(resultSet.getInt("pir"));
				acbuffer_result.setSourceIp(resultSet.getString("sourceIp"));
				acbuffer_result.setSourceMac(resultSet.getString("sourceMac"));
				acbuffer_result.setStrategy(resultSet.getInt("strategy"));
				acbuffer_result.setTargetIp(resultSet.getString("targetIp"));
				acbuffer_result.setTargetMac(resultSet.getString("targetmac"));
				acbuffer_result.setVlanId(resultSet.getInt("vlanId"));
				acbuffer_result.setSiteId(resultSet.getInt("siteId"));
				acbuffer_result.setAppendBufferName(resultSet.getString("appendBufferName"));
				acbuffer.setSourceTcpPortId(resultSet.getInt("sourceTcpPort"));
				acbuffer.setEndTcpPortId(resultSet.getInt("endTcpPort"));
				acbuffer.setIPTOS(resultSet.getInt("IPToS"));
				acbuffer.setPortType(resultSet.getInt("portType"));
				acbufferList.add(acbuffer_result);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
			acbuffer = null;
		}

		return acbufferList;
	}

	public List<Acbuffer> checkBuffer(Acbuffer acbuffer, Map<Integer,String> exitMap,
			Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<Acbuffer> acbufferList = null;
		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Acbuffer acbuffer_result = null;
		try {
			acbufferList = new ArrayList<Acbuffer>();
			sql = "select * from acbuffer where 1=1";
			if (acbuffer.getSiteId() > 0) {
				sql += " and SiteId =" + acbuffer.getSiteId();
			}
			if(null!=acbuffer.getOperatorVlanIdValue()&&!"".equals(acbuffer.getOperatorVlanIdValue())){
				sql += " and OperatorVlanIdValue='" + acbuffer.getOperatorVlanIdValue()+"'";
			}
			if(null!=acbuffer.getOperatorVlanIdMask()&&!"".equals(acbuffer.getOperatorVlanIdMask())){
				sql += " and OperatorVlanIdMask='" + acbuffer.getOperatorVlanIdMask()+"'";
			}
			if(null!=acbuffer.getClientVlanIdValue()&&!"".equals(acbuffer.getClientVlanIdValue())){
				sql += " and clientVlanIdValue='" + acbuffer.getClientVlanIdValue()+"'";
			}
			if(null!=acbuffer.getClientVlanIdMask()&&!"".equals(acbuffer.getClientVlanIdMask())){
				sql += " and clientVlanIdMask='" + acbuffer.getClientVlanIdMask()+"'";
			}
			if(null!=acbuffer.getOperatorVlanPriorityValue()&&!"".equals(acbuffer.getOperatorVlanPriorityValue())){
				sql += " and OperatorVlanPriorityValue='" + acbuffer.getOperatorVlanPriorityValue()+"'";
			}
			if(null!=acbuffer.getOperatorVlanPriorityMask()&&!"".equals(acbuffer.getOperatorVlanPriorityMask())){
				sql += " and OperatorVlanPriorityMask='" + acbuffer.getOperatorVlanPriorityMask()+"'";
			}
			if(null!=acbuffer.getClientVlanPriorityValue()&&!"".equals(acbuffer.getClientVlanPriorityValue())){
				sql += " and ClientVlanPriorityValue='" + acbuffer.getClientVlanPriorityValue()+"'";
			}
			if(null!=acbuffer.getClientVlanPriorityMask()&&!"".equals(acbuffer.getClientVlanPriorityMask())){
				sql += " and ClientVlanPriorityMask ='" + acbuffer.getClientVlanPriorityMask()+"'";
			}
			if(null!=acbuffer.getEthernetTypeMask()&&!"".equals(acbuffer.getEthernetTypeMask())){
				sql += " and EthernetTypeMask ='" + acbuffer.getEthernetTypeMask()+"'";
			}
			if(null!=acbuffer.getEthernetTypeValue()&&!"".equals(acbuffer.getEthernetTypeValue())){
				sql += " and EthernetTypeValue ='" + acbuffer.getEthernetTypeValue()+"'";
			}
			if(null!=acbuffer.getiPTypeValue()&&!"".equals(acbuffer.getiPTypeValue())){
				sql += " and iPTypeValue ='" + acbuffer.getiPTypeValue()+"'";
			}
			if(null!=acbuffer.getiPTypeMask()&&!"".equals(acbuffer.getiPTypeMask())){
				sql += " and iPTypeMask ='" + acbuffer.getiPTypeMask()+"'";
			}
			if(null!=acbuffer.getTargetIp()&&!"".equals(acbuffer.getTargetIp())){
				sql += " and TargetIp ='" + acbuffer.getTargetIp()+"'";
			}
			if(null!=acbuffer.getSinkIpLabelMask()&&!"".equals(acbuffer.getSinkIpLabelMask())){
				sql += " and SinkIpLabelMask ='" + acbuffer.getSinkIpLabelMask()+"'";
			}
			if(null!=acbuffer.getSourceIp()&&!"".equals(acbuffer.getSourceIp())){
				sql += " and SourceIp ='" + acbuffer.getSourceIp()+"'";
			}
			if(null!=acbuffer.getSourceIpLabelMask()&&!"".equals(acbuffer.getSourceIpLabelMask())){
				sql += " and SourceIpLabelMask ='" + acbuffer.getSourceIpLabelMask()+"'";
			}
			if(null!=acbuffer.getTargetMac()&&!"".equals(acbuffer.getTargetMac())){
				sql += " and TargetMac ='" + acbuffer.getTargetMac()+"'";
			}
			if(null!=acbuffer.getSinkMacLabelMask()&&!"".equals(acbuffer.getSinkMacLabelMask())){
				sql += " and SinkMacLabelMask = '" + acbuffer.getSinkMacLabelMask()+"'";
			}
			if(null!=acbuffer.getSourceMac()&&!"".equals(acbuffer.getSourceMac())){
				sql += " and SourceMac ='" + acbuffer.getSourceMac()+"'";
			}
			if(null!=acbuffer.getSourceMacLabelMask()&&!"".equals(acbuffer.getSourceMacLabelMask())){
				sql += " and SourceMacLabelMask = '" + acbuffer.getSourceMacLabelMask()+"'";
			}
			if(0!=acbuffer.getPhb()){
				sql += " and phb = " + acbuffer.getPhb();
			}
			if(0!=acbuffer.getCir()){
				sql += " and cir = " + acbuffer.getCir();
			}
			if(0!=acbuffer.getCbs()){
				sql += " and cbs = " + acbuffer.getCbs();
			}
			if(0!=acbuffer.getCm()){
				sql += " and cm = " + acbuffer.getCm();
			}
			if(0!=acbuffer.getSeq()){
				sql += " and seq = " + acbuffer.getSeq();
			}
			if(0!=acbuffer.getEir()){
				sql += " and eir = " + acbuffer.getEir();
			}
			if(0!=acbuffer.getEbs()){
				sql += " and ebs = " + acbuffer.getEbs();
			}
			if(0!=acbuffer.getPir()){
				sql += " and pir = " + acbuffer.getPir();
			}
			if(0!=acbuffer.getPbs()){
				sql += " and pbs = " + acbuffer.getPbs();
			}
			for (Integer id : exitMap.keySet()) {
				sql += " and id != "+ id;
			}
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				acbuffer_result = new Acbuffer();
				acbuffer_result.setId(resultSet.getInt("id"));
				acbuffer_result.setBufferEnable(resultSet.getInt("bufferenable"));
				acbuffer_result.setCbs(resultSet.getInt("cbs"));
				acbuffer_result.setCir(resultSet.getInt("cir"));
				acbuffer_result.setCm(resultSet.getInt("cm"));
				acbuffer_result.setEightIp(resultSet.getInt("eightIp"));
				acbuffer_result.setAcId(resultSet.getInt("acId"));
				acbuffer_result.setId(resultSet.getInt("id"));
				acbuffer_result.setIpDscp(resultSet.getInt("ipDscp"));
				acbuffer_result.setModel(resultSet.getInt("model"));
				acbuffer_result.setPbs(resultSet.getInt("pbs"));
				acbuffer_result.setPhb(resultSet.getInt("phb"));
				acbuffer_result.setPir(resultSet.getInt("pir"));
				acbuffer_result.setSourceIp(resultSet.getString("sourceIp"));
				acbuffer_result.setSourceMac(resultSet.getString("sourceMac"));
				acbuffer_result.setStrategy(resultSet.getInt("strategy"));
				acbuffer_result.setTargetIp(resultSet.getString("targetIp"));
				acbuffer_result.setTargetMac(resultSet.getString("targetmac"));
				acbuffer_result.setVlanId(resultSet.getInt("vlanId"));
				acbuffer_result.setSiteId(resultSet.getInt("siteId"));
				acbuffer_result.setAppendBufferName(resultSet.getString("appendBufferName"));
				acbuffer_result.setQosName(resultSet.getString("qosName"));
				acbuffer_result.setSourceTcpPortId(resultSet.getInt("sourceTcpPort"));
				acbuffer_result.setEndTcpPortId(resultSet.getInt("endTcpPort"));
				acbuffer.setIPTOS(resultSet.getInt("IPToS"));
				acbuffer.setPortType(resultSet.getInt("portType"));
				acbufferList.add(acbuffer_result);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
			acbuffer = null;
		}

		return acbufferList;
	}
	
	/**
	 * 根据条件查询   cx用来查询是否重复
	 * 
	 * @param acId
	 *            业务ID
	 * @param connection
	 *            数据库连接
	 * @return 流集合
	 * @throws Exception
	 */
	public List<Acbuffer> selectForCondition(Acbuffer acbuffer, Connection connection)
			throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<Acbuffer> acbufferList = null;
		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Acbuffer acbuffer_result = null;
		try {
			acbufferList = new ArrayList<Acbuffer>();
			sql = "select * from acbuffer where 1=1";
			if (acbuffer.getAcId() > 0) {
				sql += " and acid=" + acbuffer.getAcId();
			}
			if (acbuffer.getPortId() > 0) {
				sql += " and portId=" + acbuffer.getPortId();
			}
			if (acbuffer.getVlanId() > 0) {
				sql += " and vlanId=" + acbuffer.getVlanId();
			}
			if (acbuffer.getSiteId() > 0) {
				sql += " and SiteId=" + acbuffer.getSiteId();
			}
			if (null!=acbuffer.getQosType()&&!"".equals(acbuffer.getQosType() )) {
				sql += " and QosType=" + acbuffer.getQosType();
			}
			if (acbuffer.getSimpleQosId() > 0) {
				sql += " and SimpleQosId=" + acbuffer.getSimpleQosId();
			}
			
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				acbuffer_result = new Acbuffer();
				acbuffer_result.setId(resultSet.getInt("id"));
				acbuffer_result.setBufferEnable(resultSet.getInt("bufferenable"));
				acbuffer_result.setCbs(resultSet.getInt("cbs"));
				acbuffer_result.setCir(resultSet.getInt("cir"));
				acbuffer_result.setCm(resultSet.getInt("cm"));
				acbuffer_result.setEightIp(resultSet.getInt("eightIp"));
				acbuffer_result.setAcId(resultSet.getInt("acId"));
				acbuffer_result.setId(resultSet.getInt("id"));
				acbuffer_result.setIpDscp(resultSet.getInt("ipDscp"));
				acbuffer_result.setModel(resultSet.getInt("model"));
				acbuffer_result.setPbs(resultSet.getInt("pbs"));
				acbuffer_result.setPhb(resultSet.getInt("phb"));
				acbuffer_result.setPir(resultSet.getInt("pir"));
				acbuffer_result.setSourceIp(resultSet.getString("sourceIp"));
				acbuffer_result.setSourceMac(resultSet.getString("sourceMac"));
				acbuffer_result.setStrategy(resultSet.getInt("strategy"));
				acbuffer_result.setTargetIp(resultSet.getString("targetIp"));
				acbuffer_result.setTargetMac(resultSet.getString("targetmac"));
				acbuffer_result.setVlanId(resultSet.getInt("vlanId"));
				acbuffer_result.setSiteId(resultSet.getInt("siteId"));
				acbuffer_result.setAppendBufferName(resultSet.getString("appendBufferName"));
				acbuffer_result.setSimpleQosId(resultSet.getInt("simpleQosId"));
				acbuffer_result.setQosName(resultSet.getString("QosName"));
				acbuffer_result.setSourceTcpPortId(resultSet.getInt("sourceTcpPort"));
				acbuffer_result.setEndTcpPortId(resultSet.getInt("endTcpPort"));
				acbuffer.setIPTOS(resultSet.getInt("IPToS"));
				acbuffer.setPortType(resultSet.getInt("portType"));
				acbufferList.add(acbuffer_result);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
			acbuffer = null;
		}

		return acbufferList;
	}

}
