package com.nms.db.dao.ptn.path.protect;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.path.protect.MspProtect;
import com.nms.ui.manager.ExceptionManage;

/**
 * msp保护的数据库访问类
 * 
 * @author kk
 * 
 */
public class MspProtectDao {

	/**
	 * 新增sql
	 */
	private final String INSRT_SQL = "insert into mspProtect (businessId,protectType,recoveryMode,workPortId,ProtectPortId,WaitTime,delayTime,sfPriority,sdPriority,apsEnable,sdEnable,ProtectStatus,NowWorkPortId,siteid,RotateOrder,mspStatus,name) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	/**
	 * 修改sql
	 */
	private final String UPDATE_SQL = "update mspprotect set businessId=?,protectType=?,recoveryMode=?,workPortId=?,ProtectPortId=?,WaitTime=?,delayTime=?,sfPriority=?,sdPriority=?,apsEnable=?,sdEnable=?,ProtectStatus=?,NowWorkPortId=?,siteid=? ,RotateOrder=? ,mspStatus=?, name=? where id=?";


	/**
	 * 根据网元删除sql
	 */
	private final String DELETE_BY_SITE_SQL = "delete from mspprotect where siteId=?";

	/**
	 * 查询sql语句
	 */
	private final String SELECT_SQL = "select id,businessId,protectType,recoveryMode,workPortId,ProtectPortId,WaitTime,delayTime,sfPriority,sdPriority,apsEnable,sdEnable,ProtectStatus,NowWorkPortId,siteid,RotateOrder ,mspStatus,name from mspProtect where 1=1";

	/**
	 * 修改激活状态
	 */
	private final String UPDATEACTIVESTATUS = "update mspprotect set mspstatus = ? where siteid = ?";

	/**
	 * 插入
	 * 
	 * @param mspProtect
	 *            mspbean对象
	 * @param connection
	 *            数据库连接
	 * @return 执行个数
	 * @throws Exception
	 */
	public int insert(MspProtect mspProtect, Connection connection) throws Exception {
		if (null == mspProtect) {
			throw new Exception("mspProtect is null");
		}
		if (null == connection) {
			throw new Exception("conection is null");
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		try {
			preparedStatement = connection.prepareStatement(this.INSRT_SQL, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, mspProtect.getBusinessId());
			preparedStatement.setInt(2, mspProtect.getProtectType());
			preparedStatement.setInt(3, mspProtect.getRecoveryMode());
			preparedStatement.setInt(4, mspProtect.getWorkPortId());
			preparedStatement.setInt(5, mspProtect.getProtectPortId());
			preparedStatement.setInt(6, mspProtect.getWaitTime());
			preparedStatement.setInt(7, mspProtect.getDelayTime());
			preparedStatement.setInt(8, mspProtect.getSfPriority());
			preparedStatement.setInt(9, mspProtect.getSdPriority());
			preparedStatement.setInt(10, mspProtect.getApsEnable());
			preparedStatement.setInt(11, mspProtect.getSdEnable());
			preparedStatement.setString(12, mspProtect.getProtectStatus());
			preparedStatement.setInt(13, mspProtect.getNowWorkPortId());
			preparedStatement.setInt(14, mspProtect.getSiteId());
			preparedStatement.setInt(15, mspProtect.getRotateOrder());
			preparedStatement.setInt(16, mspProtect.getMspStatus());
			preparedStatement.setString(17, "MSP/" +mspProtect.getBusinessId());
			result = preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				result = resultSet.getInt(1);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
	}

	/**
	 * 修改
	 * 
	 * @param mspProtect
	 *            mspbean对象
	 * @param connection
	 *            数据库连接
	 * @return 执行个数
	 * @throws Exception
	 */
	public int update(MspProtect mspProtect, Connection connection) throws Exception {
		if (null == mspProtect) {
			throw new Exception("mspProtect is null");
		}
		if (null == connection) {
			throw new Exception("conection is null");
		}

		PreparedStatement preparedStatement = null;
		int result = 0;
		try {
			preparedStatement = connection.prepareStatement(this.UPDATE_SQL);
			preparedStatement.setInt(1, mspProtect.getBusinessId());
			preparedStatement.setInt(2, mspProtect.getProtectType());
			preparedStatement.setInt(3, mspProtect.getRecoveryMode());
			preparedStatement.setInt(4, mspProtect.getWorkPortId());
			preparedStatement.setInt(5, mspProtect.getProtectPortId());
			preparedStatement.setInt(6, mspProtect.getWaitTime());
			preparedStatement.setInt(7, mspProtect.getDelayTime());
			preparedStatement.setInt(8, mspProtect.getSfPriority());
			preparedStatement.setInt(9, mspProtect.getSdPriority());
			preparedStatement.setInt(10, mspProtect.getApsEnable());
			preparedStatement.setInt(11, mspProtect.getSdEnable());
			preparedStatement.setString(12, mspProtect.getProtectStatus());
			preparedStatement.setInt(13, mspProtect.getNowWorkPortId());
			preparedStatement.setInt(14, mspProtect.getSiteId());
			preparedStatement.setInt(15, mspProtect.getRotateOrder());
			preparedStatement.setInt(16, mspProtect.getMspStatus());
			preparedStatement.setString(17, mspProtect.getName());
			preparedStatement.setInt(18, mspProtect.getId());

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
	}

	/**
	 * 根据主键删除
	 * 
	 * @param id
	 *            主键
	 * @param connection
	 *            数据库连接
	 * @return 执行成功条目数
	 * @throws Exception
	 */
	public int delete(MspProtect mspProtect, Connection connection) throws Exception {
		if (null == mspProtect) {
			throw new Exception("mspProtect is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "delete from mspprotect where 1=1";
			if (0 != mspProtect.getId()) {
				sql += " and id = ?";
			}
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, mspProtect.getId());

			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}

	/**
	 * 根据主键删除
	 * 
	 * @param siteId
	 *            网元主键
	 * @param connection
	 *            数据库连接
	 * @return 执行成功条目数
	 * @throws Exception
	 */
	public int deleteBySite(int siteId, Connection connection) throws Exception {
		if (0 == siteId) {
			throw new Exception("siteId is 0");
		}
		if (null == connection) {
			throw new Exception("conection is null");
		}

		PreparedStatement preparedStatement = null;
		int result = 0;
		try {
			preparedStatement = connection.prepareStatement(this.DELETE_BY_SITE_SQL);
			preparedStatement.setInt(1, siteId);

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
	}

	/**
	 * 根据条件查询 当mspProtect中没有添加任何值时。 查询全部
	 * 
	 * @param mspProtect
	 *            bean对象
	 * @param connection
	 *            数据库连接
	 * @return 查询得到的结果集
	 * @throws Exception
	 */
	public List<MspProtect> query(MspProtect mspProtect, Connection connection) throws Exception {
		if (null == mspProtect) {
			throw new Exception("mspProtect is null");
		}
		if (null == connection) {
			throw new Exception("conection is null");
		}

		PreparedStatement preparedStatement = null;
		StringBuffer stringBuffer = null; // sql语句
		List<Object> paramList = null; // 查询参数集合
		List<MspProtect> mspProtectList = null;
		try {
			paramList = new ArrayList<Object>();
			stringBuffer = new StringBuffer(this.SELECT_SQL);

			// 根据条件拼接sql语句
			if (mspProtect.getId() > 0) {
				stringBuffer.append(" and id=?");
				paramList.add(mspProtect.getId());
			}
			if (mspProtect.getSiteId() > 0) {
				stringBuffer.append(" and siteId=?");
				paramList.add(mspProtect.getSiteId());
			}
			if(mspProtect.getBusinessId()>0){
				stringBuffer.append(" and businessId=?");
				paramList.add(mspProtect.getBusinessId());
			}
			if (mspProtect.getName() != null && !"".equals(mspProtect.getName().trim())) {
				stringBuffer.append(" and name=?");
				paramList.add(mspProtect.getName());
			}
			preparedStatement = connection.prepareStatement(stringBuffer.toString());
			// 添加参数
			if (paramList.size() > 0) {
				for (int i = 0; i < paramList.size(); i++) {
					preparedStatement.setObject(i + 1, paramList.get(i));
				}
			}

			mspProtectList = this.executeQuery(preparedStatement);

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				preparedStatement = null;
			}
			stringBuffer = null; // sql语句
			paramList = null; // 查询参数集合
		}
		return mspProtectList;
	}

	/**
	 * 执行sql语句 返回结果集
	 * 
	 * @param preparedStatement
	 * @return
	 * @throws Exception
	 */
	private List<MspProtect> executeQuery(PreparedStatement preparedStatement) throws Exception {

		if (null == preparedStatement) {
			throw new Exception("preparedStatement is null");
		}
		ResultSet resultSet = null;
		List<MspProtect> mspProtectList = null;
		MspProtect mspProtect = null;
		try {
			mspProtectList = new ArrayList<MspProtect>();

			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				mspProtect = new MspProtect();
				mspProtect.setId(resultSet.getInt("Id"));
				mspProtect.setBusinessId(resultSet.getInt("BusinessId"));
				mspProtect.setProtectType(resultSet.getInt("ProtectType"));
				mspProtect.setRecoveryMode(resultSet.getInt("RecoveryMode"));
				mspProtect.setWorkPortId(resultSet.getInt("WorkPortId"));
				mspProtect.setProtectPortId(resultSet.getInt("ProtectPortId"));
				mspProtect.setWaitTime(resultSet.getInt("WaitTime"));
				mspProtect.setDelayTime(resultSet.getInt("DelayTime"));
				mspProtect.setSfPriority(resultSet.getInt("SfPriority"));
				mspProtect.setSdPriority(resultSet.getInt("SdPriority"));
				mspProtect.setApsEnable(resultSet.getInt("ApsEnable"));
				mspProtect.setSdEnable(resultSet.getInt("SdEnable"));
				mspProtect.setProtectStatus(resultSet.getString("ProtectStatus"));
				mspProtect.setNowWorkPortId(resultSet.getInt("NowWorkPortId"));
				mspProtect.setSiteId(resultSet.getInt("SiteId"));
				mspProtect.setRotateOrder(resultSet.getInt("RotateOrder"));
				mspProtect.setMspStatus(resultSet.getInt("mspStatus"));
				mspProtect.setName(resultSet.getString("name"));
				mspProtectList.add(mspProtect);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				resultSet = null;
			}
			mspProtect = null;
		}
		return mspProtectList;
	}

	/**
	 * 修改设备是否存在的状态
	 * 
	 * @param siteId
	 *            网元ID
	 * @param status
	 *            状态值
	 * @return
	 * @throws Exception
	 */
	public int updateActiveStatus(int siteId, int status, Connection connection) throws Exception {
		if (0 == siteId) {
			throw new Exception("siteId is 0");
		}
		if (0 == status) {
			throw new Exception("status is 0");
		}
		if (null == connection) {
			throw new Exception("conection is null");
		}

		PreparedStatement preparedStatement = null;
		int result = 0;
		try {
			preparedStatement = connection.prepareStatement(this.UPDATEACTIVESTATUS);
			preparedStatement.setInt(1, status);
			preparedStatement.setInt(2, siteId);
			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
	}
}
