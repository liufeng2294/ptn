package com.nms.model.system.user;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.system.user.UserField;
import com.nms.db.dao.system.user.UserFieldDao;
import com.nms.model.util.ObjectService;
import com.nms.ui.manager.ExceptionManage;

public class UserFieldService extends ObjectService {

	public void setConnection(Connection connection) {
		super.connection = connection;
	}

	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}

	private  UserFieldDao userfielddao = new UserFieldDao();

	/**
	 * 根据user_id查询
	 * 
	 * @param user_id
	 * @return
	 * @throws Exception
	 */
	public List<UserField> query(int user_id) throws Exception {
		List<UserField> userFields = null;
		try {
			userFields = new ArrayList<UserField>();
			userFields = userfielddao.queryByCondition(user_id, connection);

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return userFields;
	}
	/**
	 * 根据user_id查询
	 * 
	 * @param user_id
	 * @return
	 * @throws Exception
	 */
	public List<UserField> queryUserField(UserField userField) throws Exception {
		List<UserField> userFields = null;
		try {
			userFields = new ArrayList<UserField>();
			userFields = userfielddao.queryByUserField(userField, connection);

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return userFields;
	}

	/**
	 * 批量新增portattr
	 * 
	 * @param portAttrList
	 *            portAttr集合
	 * @throws Exception
	 */
	public void saveBatch(List<UserField> userFields,int userid) throws Exception {
		if (userFields == null) {
			throw new Exception("userFields is null");
		}
		try {
			connection.setAutoCommit(false);
			userfielddao.delete(userid, connection);
			if (userFields.size() > 0) {
				userfielddao.insertBatch(userFields, connection);
			}
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
	}

	public void delete(int userId) throws Exception {
		try {
			userfielddao.delete(userId, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
	}
	
	public void deleteByField(int fieldId) throws Exception {
		try {
			userfielddao.delete(fieldId, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
	}
}
