package com.nms.db.dao.ptn;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import com.nms.db.bean.ptn.clock.PtpPortinfo;
import com.nms.db.bean.ptn.clock.TimeSyncInfo;
import com.nms.ui.manager.ExceptionManage;


public class TimeSyncDao {
	
	
	public List<TimeSyncInfo> queryByCondition(int siteId,Connection connection)throws Exception{
		if(connection == null){
			throw new Exception("Connection is null");
		}
		
		List<TimeSyncInfo> timesyns = null;
		String sql = null;
		String sql1 = null;
		ResultSet resultSet = null;
		ResultSet resultSet1 = null;
		PreparedStatement preparedStatement = null;
		PreparedStatement preparedStatement1 = null;
		TimeSyncInfo info = null;
		PtpPortinfo ptpPort = null;
		List<PtpPortinfo> ptpPortList =new ArrayList<PtpPortinfo>() ;
		try{
			timesyns = new ArrayList<TimeSyncInfo>();
			sql = "select *from timesync where siteId=?";
			sql1 = "select *from ptpport where siteId=?";
			preparedStatement =  connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);			
			resultSet  = preparedStatement.executeQuery();	
		
			while(resultSet.next()){
				info = new TimeSyncInfo();
				info.setId(resultSet.getInt("timeid"));
				info.setPtpModel(resultSet.getInt("ptpModel"));
				info.setClockModel(resultSet.getInt("clockModel"));
				info.setSrcclockModel(resultSet.getInt("srcclockModel"));
				info.setSrcclockId(resultSet.getString("srcclockId"));
				info.setSrcclocktype(resultSet.getInt("srcclocktype"));
				info.setSrcclockpri1(resultSet.getInt("srcclockpri1"));
				info.setSrcclockpri2(resultSet.getInt("srcclockpri2"));
				info.setSrcclockLevel(resultSet.getInt("srcclockLevel"));
				info.setSrcclockaccuray(resultSet.getInt("srcclockaccuray"));
				info.setSlaveOnlyModel(resultSet.getInt("SlaveOnlyModel"));
				info.setInCompensation(resultSet.getInt("inCompensation"));
				info.setInDelay(resultSet.getInt("inDelay"));
				info.setOutCompensation(resultSet.getInt("outCompensation"));
				info.setOutDelay(resultSet.getInt("outDelay"));
				info.setSynCicle(resultSet.getInt("SynCicle"));
				info.setNoteCicle(resultSet.getInt("NoteCicle"));
				info.setTimeInfoIt(resultSet.getInt("TimeInfoIt"));			
				info.setSiteId(resultSet.getInt("siteId"));
				info.setSyncFreq(resultSet.getInt("syncFreq"));
				info.setDelayFreq(resultSet.getInt("delayFreq"));
				info.setAnnounceFreq(resultSet.getInt("announceFreq"));
				info.setDelayOver(resultSet.getInt("delayOver"));
				info.setAnnounceOver(resultSet.getInt("announceOver"));
				info.setDomainNumbe(resultSet.getInt("domainNumbe"));	
				preparedStatement1 =  connection.prepareStatement(sql1);
				preparedStatement1.setInt(1, siteId);
				resultSet1  = preparedStatement1.executeQuery();	
				while(resultSet1.next()){
					ptpPort = new PtpPortinfo();
					ptpPort.setId(resultSet1.getInt("id"));
					ptpPort.setIndexId(resultSet1.getInt("indexId"));
					ptpPort.setPortId(resultSet1.getInt("portId"));
					ptpPort.setPortNum(resultSet1.getInt("portNum"));
					ptpPort.setWorkModel(resultSet1.getInt("workModel"));
					ptpPort.setLine(resultSet1.getInt("line"));
					ptpPort.setLineCpn(resultSet1.getInt("lineCpn"));
					ptpPort.setDelayMeca(resultSet1.getInt("delayMeca"));						
					ptpPort.setMessageMode(resultSet1.getInt("MessageMode"));
					ptpPortList.add(ptpPort);
					info.setPtpPortlist(ptpPortList);
			}				
				timesyns.add(info);				
			}
		}catch(Exception e){
			throw e;
		}finally{
			if(resultSet != null){
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if(preparedStatement != null){
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
			info = null;
		}
		return timesyns;
	}

	public int update(TimeSyncInfo info,Connection connection)throws Exception{
		if (null == info) {
			throw new Exception("TimeSyncInfo is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result=0;
		try {
			sql = "update timesync set ptpModel=?,clockModel=?,srcclockModel=?,srcclockId=?,srcclocktype=?,srcclockpri1=?," +
					"srcclockpri2=?,srcclockLevel=?,srcclockaccuray=?,SlaveOnlyModel=?,inCompensation=?,inDelay=?," +
					"outCompensation=?,outDelay=?,SynCicle=?,NoteCicle=?,TimeInfoIt=?,syncFreq=?,delayFreq=? ,announceFreq=? ,delayOver=?,announceOver=?,domainNumbe=? where siteId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, info.getPtpModel());
			preparedStatement.setInt(2, info.getClockModel());
			preparedStatement.setInt(3, info.getSrcclockModel());
			preparedStatement.setString(4, info.getSrcclockId());
			preparedStatement.setInt(5, info.getSrcclocktype());
			preparedStatement.setInt(6, info.getSrcclockpri1());
			preparedStatement.setInt(7, info.getSrcclockpri2());
			preparedStatement.setInt(8, info.getSrcclockLevel());
			preparedStatement.setInt(9, info.getSrcclockaccuray());
			preparedStatement.setInt(10, info.getSlaveOnlyModel());
			preparedStatement.setInt(11, info.getInCompensation());
			preparedStatement.setInt(12, info.getInDelay());
			preparedStatement.setInt(13, info.getOutCompensation());
			preparedStatement.setInt(14, info.getOutDelay());
			preparedStatement.setInt(15, info.getSynCicle());
			preparedStatement.setInt(16, info.getNoteCicle());
			preparedStatement.setInt(17, info.getTimeInfoIt());
			preparedStatement.setInt(18, info.getSyncFreq());
			preparedStatement.setInt(19, info.getDelayFreq());
			preparedStatement.setInt(20, info.getAnnounceFreq());
			preparedStatement.setInt(21, info.getDelayOver());
			preparedStatement.setInt(22, info.getAnnounceOver());
			preparedStatement.setInt(23, info.getDomainNumbe());
			preparedStatement.setInt(24, info.getSiteId());
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		}finally{
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		
		return result;
	}
	
	public int delete(int siteId,Connection connection)throws Exception{
		if (0 == siteId) {
			throw new Exception("siteId is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result=0;
		try {
			sql = "delete from ptpport where siteId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		}finally{
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		
		return result;
	}
	public int updatePtpPort(PtpPortinfo info,Connection connection)throws Exception{
		if (null == info) {
			throw new Exception("TimeSyncInfo is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result=0;
		try {
			
			sql = "update ptpport set indexId=?,portNum=?,workModel=?,portId=?,line=?,lineCpn=?,delayMeca=?,MessageMode=? where id=? ";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, info.getIndexId());
			preparedStatement.setInt(2, info.getPortNum());
			preparedStatement.setInt(3, info.getWorkModel());
			preparedStatement.setInt(4, info.getPortId());
			preparedStatement.setInt(5, info.getLine());
			preparedStatement.setInt(6, info.getLineCpn());
			preparedStatement.setInt(7, info.getDelayMeca());
			preparedStatement.setInt(8, info.getMessageMode());
			preparedStatement.setInt(9, info.getId());
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		}finally{
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		
		return result;
	}
	
	
	
	public int insert(TimeSyncInfo info,Connection connection)throws Exception{
		if (null == info) {
			throw new Exception("TimeSyncInfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		int result = 0;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null; 
		try {
			sql = "insert into timeSync (ptpModel,clockModel,srcclockModel,srcclockId,srcclocktype,srcclockpri1," +
					"srcclockpri2,srcclockLevel,srcclockaccuray,SlaveOnlyModel,inCompensation,inDelay," +
					"outCompensation,outDelay,SynCicle,NoteCicle,TimeInfoIt,SyncFreq,DelayFreq,AnnounceFreq,DelayOver,AnnounceOver,DomainNumbe,siteId) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";		
			preparedStatement = connection.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, info.getPtpModel());
			preparedStatement.setInt(2, info.getClockModel());
			preparedStatement.setInt(3, info.getSrcclockModel());
			preparedStatement.setString(4, info.getSrcclockId());
			preparedStatement.setInt(5, info.getSrcclocktype());
			preparedStatement.setInt(6, info.getSrcclockpri1());
			preparedStatement.setInt(7, info.getSrcclockpri2());
			preparedStatement.setInt(8, info.getSrcclockLevel());
			preparedStatement.setInt(9, info.getSrcclockaccuray());
			preparedStatement.setInt(10, info.getSlaveOnlyModel());
			preparedStatement.setInt(11, info.getInCompensation());
			preparedStatement.setInt(12, info.getInDelay());
			preparedStatement.setInt(13, info.getOutCompensation());
			preparedStatement.setInt(14, info.getOutDelay());
			preparedStatement.setInt(15, info.getSynCicle());
			preparedStatement.setInt(16, info.getNoteCicle());
			preparedStatement.setInt(17, info.getTimeInfoIt());
			preparedStatement.setInt(18, info.getSyncFreq());
			preparedStatement.setInt(19, info.getDelayFreq());
			preparedStatement.setInt(20, info.getAnnounceFreq());
			preparedStatement.setInt(21, info.getDelayOver());
			preparedStatement.setInt(22, info.getAnnounceOver());
			preparedStatement.setInt(23, info.getDomainNumbe());
			preparedStatement.setInt(24, info.getSiteId());
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if(resultSet.next()){
				result = resultSet.getInt(1);
            }
			
			
		} catch (Exception e) {
			throw e;
		}finally{
			if(null != resultSet){
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}
	
	
	public int insertPtpPort(PtpPortinfo info,Connection connection)throws Exception{
		if (null == info) {
			throw new Exception("PtpPortinfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		int result = 0;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null; 
	
		try {
			sql = "insert into ptpport (indexId,portNum,workModel,portId,line,lineCpn,delayMeca,MessageMode,siteId)values(?,?,?,?,?,?,?,?,?)";	
			preparedStatement = connection.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, info.getIndexId());
			preparedStatement.setInt(2, info.getPortNum());
			preparedStatement.setInt(3, info.getWorkModel());
			preparedStatement.setInt(4, info.getPortId());
			preparedStatement.setInt(5, info.getLine());
			preparedStatement.setInt(6, info.getLineCpn());
			preparedStatement.setInt(7, info.getDelayMeca());
			preparedStatement.setInt(8, info.getMessageMode());
			preparedStatement.setInt(9, info.getSiteId());			
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if(resultSet.next()){
				result = resultSet.getInt(1);
            }
			
			
		} catch (Exception e) {
			throw e;
		}finally{
			if(null != resultSet){
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}
	
	
	public List<Integer> queryIndexIds(int siteId, Connection connection) throws Exception
	{
		if (null == connection) 
		{
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
        List<Integer> idList = new ArrayList<Integer>();
		try {
			sql = "select indexId from ptpport where siteId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			resultSet = preparedStatement.executeQuery();
			while(resultSet.next()){
				idList.add(resultSet.getInt("indexId"));
			}

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return idList;
	}
	
	
	
	public void deleteBySiteId(int siteId,Connection connection)throws Exception{
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		String sql1 = null;
		PreparedStatement preparedStatement1 = null;
		try {
			sql = "delete from timesync where siteId=?";		
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);			
			preparedStatement.executeUpdate();
			sql1 = "delete from ptpport where siteId=?";		
			preparedStatement1 = connection.prepareStatement(sql1);
			preparedStatement1.setInt(1, siteId);			
			preparedStatement1.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
			if (preparedStatement1 != null) {
				try {
					preparedStatement1.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement1 = null;
			}
			sql1 = null;
		}
	}
}
