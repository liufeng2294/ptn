package com.nms.db.dao.ptn.path.protect;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.path.protect.LoopProtectInfo;
import com.nms.ui.manager.DateUtil;
import com.nms.ui.manager.ExceptionManage;

public class WrappingDao {
	/**
	 * 插入
	 */
	private final static String SQL_INSERT = "insert into loop_protect(protectType,westSlot,westPort,eastSlot,eastPort,loopNodeNumber," +
			"nodeId,logicId,waittime,delaytime,apsenable,backType,loopId,targetNodeId,westLspId,eastLspId,siteId,name,createUser,createTime,isSingle ,westNodeId,eastNodeId ,activeStatus,loopBusinessId) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	/**
	 * 更新
	 */
	private final static String SQL_UPDATE = "update loop_protect set protectType=?,westSlot=?,westPort=?,eastSlot=?,eastPort=?,loopNodeNumber=?," +
			"nodeId=?,logicId=?,waittime=?,delaytime=?,apsenable=?,backType=?,loopId=?,targetNodeId=?,westLspId=?,eastLspId=?,siteId=?,name=? ,createUser=?,createTime=? ,westNodeId=?,eastNodeId = ? ,activeStatus=?,loopBusinessId=? ,isSingle=? where id =?";

	
	/**
	 * 插入
	 * @param loopProtectInfo
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int insert(LoopProtectInfo loopProtectInfo, Connection connection) throws Exception{
		if (null == loopProtectInfo) {
			throw new Exception("loopProtectInfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = SQL_INSERT;
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, loopProtectInfo.getProtectType());
			preparedStatement.setInt(2, loopProtectInfo.getWestSlot());
			preparedStatement.setInt(3, loopProtectInfo.getWestPort());
			preparedStatement.setInt(4, loopProtectInfo.getEastSlot());
			preparedStatement.setInt(5, loopProtectInfo.getEastPort());
			preparedStatement.setInt(6, loopProtectInfo.getLoopNodeNumber());
			preparedStatement.setInt(7, loopProtectInfo.getNodeId());
			preparedStatement.setInt(8, loopProtectInfo.getLogicId());
			preparedStatement.setInt(9, loopProtectInfo.getWaittime());
			preparedStatement.setInt(10, loopProtectInfo.getDelaytime());
			preparedStatement.setInt(11, loopProtectInfo.getApsenable());
			preparedStatement.setInt(12, loopProtectInfo.getBackType());
			preparedStatement.setInt(13, loopProtectInfo.getLoopId());
			preparedStatement.setInt(14, loopProtectInfo.getTargetNodeId());
			preparedStatement.setInt(15, loopProtectInfo.getWestLspId());
			preparedStatement.setInt(16, loopProtectInfo.getEastLspId());
			preparedStatement.setInt(17, loopProtectInfo.getSiteId());
			preparedStatement.setString(18, loopProtectInfo.getName());
			preparedStatement.setString(19, loopProtectInfo.getCreateUser());
			preparedStatement.setString(20, DateUtil.getDate(DateUtil.FULLTIME));
			preparedStatement.setInt(21, loopProtectInfo.getIsSingle());
			preparedStatement.setString(20, DateUtil.getDate(DateUtil.FULLTIME));
			preparedStatement.setInt(21, loopProtectInfo.getIsSingle());
			preparedStatement.setInt(22, loopProtectInfo.getWestNodeId());
			preparedStatement.setInt(23, loopProtectInfo.getEastNodeId());
			preparedStatement.setInt(24, loopProtectInfo.getActiveStatus());
			preparedStatement.setInt(25, loopProtectInfo.getLoopBusinessId());
			preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}

			sql = null;
		}

		return result;
		
	}
	
	/**
	 * 更新
	 * @param loopProtectInfo
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int update(LoopProtectInfo loopProtectInfo, Connection connection) throws Exception{
		if (null == loopProtectInfo) {
			throw new Exception("loopProtectInfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		ResultSet resultSet = null;
		try {
			sql = SQL_UPDATE;
			preparedStatement = connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, loopProtectInfo.getProtectType());
			preparedStatement.setInt(2, loopProtectInfo.getWestSlot());
			preparedStatement.setInt(3, loopProtectInfo.getWestPort());
			preparedStatement.setInt(4, loopProtectInfo.getEastSlot());
			preparedStatement.setInt(5, loopProtectInfo.getEastPort());
			preparedStatement.setInt(6, loopProtectInfo.getLoopNodeNumber());
			preparedStatement.setInt(7, loopProtectInfo.getNodeId());
			preparedStatement.setInt(8, loopProtectInfo.getLogicId());
			preparedStatement.setInt(9, loopProtectInfo.getWaittime());
			preparedStatement.setInt(10, loopProtectInfo.getDelaytime());
			preparedStatement.setInt(11, loopProtectInfo.getApsenable());
			preparedStatement.setInt(12, loopProtectInfo.getBackType());
			preparedStatement.setInt(13, loopProtectInfo.getLoopId());
			preparedStatement.setInt(14, loopProtectInfo.getTargetNodeId());
			preparedStatement.setInt(15, loopProtectInfo.getWestLspId());
			preparedStatement.setInt(16, loopProtectInfo.getEastLspId());
			preparedStatement.setInt(17, loopProtectInfo.getSiteId());
			preparedStatement.setString(18, loopProtectInfo.getName());
			preparedStatement.setString(19, loopProtectInfo.getCreateUser());
			preparedStatement.setString(20, loopProtectInfo.getCreateTime());
			preparedStatement.setInt(21, loopProtectInfo.getWestNodeId());
			preparedStatement.setInt(22, loopProtectInfo.getEastNodeId());
			preparedStatement.setInt(23, loopProtectInfo.getActiveStatus());
			preparedStatement.setInt(24, loopProtectInfo.getLoopBusinessId());
			preparedStatement.setInt(25, loopProtectInfo.getIsSingle());
			preparedStatement.setInt(26, loopProtectInfo.getId());
			
			
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			while (resultSet.next()) {
				result = resultSet.getInt(1);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				preparedStatement = null;
			}

			sql = null;
		}

		return result;
		
	}
	
	/**
	 * 条件查询
	 * @param loopProtectInfo
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<LoopProtectInfo> queryByCondition(LoopProtectInfo loopProtectInfo,Connection connection) throws Exception{
		List<LoopProtectInfo> loopProtectInfoList = null;
		if (null == loopProtectInfo) {
			throw new Exception("tunnelCondition is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;

		try {
			loopProtectInfoList = new ArrayList<LoopProtectInfo>();
			sql = "select*from loop_protect where 1=1";

			if (loopProtectInfo.getId() > 0) {
				sql += " and id=" + loopProtectInfo.getId();
			}
			if (loopProtectInfo.getSiteId() != 0) {
				sql += " and siteId=" + loopProtectInfo.getSiteId();
			}
			if (loopProtectInfo.getLoopId() != 0) {
				sql += " and loopId=" + loopProtectInfo.getLoopId();
			}
			if (loopProtectInfo.getWestPort() != 0) {
				sql += " and westPort=" + loopProtectInfo.getWestPort();
			}
			if (loopProtectInfo.getEastPort() != 0) {
				sql += " and eastPort=" + loopProtectInfo.getEastPort();
			}
			if (null!=loopProtectInfo.getName()&&!"".equals(loopProtectInfo.getName())) {
				sql += " and name='" + loopProtectInfo.getName()+"'";
			}
			if(loopProtectInfo.getLoopBusinessId()>0){
				sql+=" and loopBusinessId="+loopProtectInfo.getLoopBusinessId();
			}
			preparedStatement = connection.prepareStatement(sql);
			loopProtectInfoList = this.executeQuery_join(preparedStatement);

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return loopProtectInfoList;
	}
	
	/**
	 * 执行查询方法
	 * 
	 * @param preparedStatement
	 * @return
	 * @throws Exception
	 */
	private List<LoopProtectInfo> executeQuery_join(PreparedStatement preparedStatement) throws Exception {

		ResultSet resultSet = null;
		List<LoopProtectInfo> loopProtectInfoList = null;
		LoopProtectInfo loopProtectInfo = null;
		try {
			loopProtectInfoList = new ArrayList<LoopProtectInfo>();
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				loopProtectInfo = new LoopProtectInfo();
				loopProtectInfo.setId(resultSet.getInt("id"));
				loopProtectInfo.setProtectType(resultSet.getInt("protectType"));
				loopProtectInfo.setEastPort(resultSet.getInt("eastPort"));
				loopProtectInfo.setEastSlot(resultSet.getInt("eastSlot"));
				loopProtectInfo.setWestPort(resultSet.getInt("westPort"));
				loopProtectInfo.setWestSlot(resultSet.getInt("westSlot"));
				loopProtectInfo.setNodeId(resultSet.getInt("nodeId"));
				loopProtectInfo.setLoopNodeNumber(resultSet.getInt("loopNodeNumber"));
				loopProtectInfo.setLogicId(resultSet.getInt("logicId"));
				loopProtectInfo.setWaittime(resultSet.getInt("waittime"));
				loopProtectInfo.setDelaytime(resultSet.getInt("delaytime"));
				loopProtectInfo.setApsenable(resultSet.getInt("apsenable"));
				loopProtectInfo.setBackType(resultSet.getInt("backType"));
				loopProtectInfo.setLoopId(resultSet.getInt("loopId"));
				loopProtectInfo.setTargetNodeId(resultSet.getInt("targetNodeId"));
				loopProtectInfo.setWestLspId(resultSet.getInt("westLspId"));
				loopProtectInfo.setEastLspId(resultSet.getInt("eastLspId"));
				loopProtectInfo.setSiteId(resultSet.getInt("siteId"));
				loopProtectInfo.setName(resultSet.getString("name"));
				loopProtectInfo.setCreateUser(resultSet.getString("createUser"));
				loopProtectInfo.setCreateTime(resultSet.getString("createTime"));
				loopProtectInfo.setWestNodeId(resultSet.getInt("westNodeId"));
				loopProtectInfo.setEastNodeId(resultSet.getInt("eastNodeId"));
				loopProtectInfo.setActiveStatus(resultSet.getInt("activeStatus"));
				loopProtectInfo.setIsSingle(resultSet.getInt("isSingle"));
				loopProtectInfo.setLoopBusinessId(resultSet.getInt("loopBusinessId"));
				loopProtectInfoList.add(loopProtectInfo);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			loopProtectInfo = null;
		}
		return loopProtectInfoList;
	}

	/**
	 * 查询所有，根据环id排序
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<LoopProtectInfo> selectAll(Connection connection) throws Exception {
		List<LoopProtectInfo> loopProtectInfoList = null;

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;

		try {
			loopProtectInfoList = new ArrayList<LoopProtectInfo>();
			sql = "select*from loop_protect where isSingle=0 group by loopId ";


			preparedStatement = connection.prepareStatement(sql);
			loopProtectInfoList = this.executeQuery_join(preparedStatement);

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return loopProtectInfoList;
	}

	/**
	 * 删除环保护通过LoopId
	 * @param loopId
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int deleteByLoopId(int loopId,Connection connection) throws Exception {

		if (loopId == 0) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int resultSet = 0;
		try {
			sql = "delete from loop_protect where loopId =?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, loopId);

			resultSet = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return resultSet;
	}

	/**
	 * 更新状态
	 * @param siteId
	 * 			网元ID
	 * @param status
	 * 			状态
	 * @throws SQLException
	 */
	public void updateStatus(int siteId, int status, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			
			sql = "update loop_protect set activeStatus=? where siteId = ?";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, status);
			preparedStatement.setInt(2, siteId);

			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		
	}
	/**
	 * 条件查询
	 * @param loopProtectInfo
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<LoopProtectInfo> queryForLoop(Connection connection) throws Exception{
		List<LoopProtectInfo> loopProtectInfoList = null;
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;

		try {
			loopProtectInfoList = new ArrayList<LoopProtectInfo>();
			sql = "select*from loop_protect order by loopId desc";

		
			preparedStatement = connection.prepareStatement(sql);
			loopProtectInfoList = this.executeQuery_join(preparedStatement);

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return loopProtectInfoList;
	}
	
	/**
	 * 查询名称是否重复
	 * 
	 * @author kk
	 * 
	 * @param
	 * 
	 * @return
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	public int query_name(String afterName, String beforeName, Connection connection) throws Exception {
		if (null == afterName) {
			throw new Exception("afterName is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		List<Object> paramList = new ArrayList<Object>();
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		try {
			sql = "select count(*) as selectcount from loop_protect where name=?";
			paramList.add(afterName);
			if (null != beforeName) {
				sql += " and name!=?";
				paramList.add(beforeName);
			}
			preparedStatement = connection.prepareStatement(sql);
			for (int i = 0; i < paramList.size(); i++) {
				preparedStatement.setObject(i + 1, paramList.get(i));
			}
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				result = resultSet.getInt("selectcount");
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			paramList = null;
			sql = null;
		}

		return result;
	}
}
