package com.nms.model.equipment.port;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.equipment.port.PortInst;
import com.nms.db.bean.equipment.port.PortStm;
import com.nms.db.dao.equipment.port.PortStmDao;
import com.nms.db.enums.EActionType;
import com.nms.db.enums.EServiceType;
import com.nms.model.util.ObjectService;
import com.nms.model.util.Services;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.ExceptionManage;

public class PortStmService extends ObjectService {
	public void setConnection(Connection connection) {
		super.connection = connection;
	}

	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}
	
	private final PortStmDao PORTSTMDAO=new PortStmDao(); 
	
	public void save(PortStm portStm) throws Exception{
		try {
			PORTSTMDAO.insert(portStm, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
	}
	
	public List<PortStm> queryBySiteid(int siteId) throws Exception{
		List<PortStm> portStms = null;
		try {
			portStms = new ArrayList<PortStm>();
			portStms = PORTSTMDAO.quertyBySite(siteId, connection);
			
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return portStms;
	}
	
	public List<PortStm> queryBySiteIdAndPortId(int siteId, int portId) throws Exception{
		List<PortStm> portStms = null;
		try {
			portStms = new ArrayList<PortStm>();
			portStms = PORTSTMDAO.queryBySiteIdAndPortId(siteId, portId, connection);
			
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return portStms;
	}
	
	public List<PortStm> queryByCondition(PortStm portStm) throws Exception{
		List<PortStm> list = null;
		try {
			list = new ArrayList<PortStm>();
			list = PORTSTMDAO.queryByCondition(portStm, connection);
			
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return list;
	}
	
	
	public void update(PortStm portStm) throws Exception{
		PortService portService =null;
		PortInst portInst = null;
		try {
			connection.setAutoCommit(false);
			portInst = new PortInst();
			portInst.setPortId(portStm.getPortid());
			portInst.setIsEnabled_code(portStm.getStatus());
			portInst.setJobStatus(portStm.getJobstatus());
			portService = (PortService) ConstantUtil.serviceFactory.newService(Services.PORT, this.connection);
			portService.update(portInst);
			this.PORTSTMDAO.update(portStm, connection);
			//离线网元数据下载
			super.dateDownLoad(portStm.getSiteid(),portStm.getId(), EServiceType.SDH.getValue(), EActionType.UPDATE.getValue());
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		}finally{
			connection.setAutoCommit(true);
		}
	}
}
