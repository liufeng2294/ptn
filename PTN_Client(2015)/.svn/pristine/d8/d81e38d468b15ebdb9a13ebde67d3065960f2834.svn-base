package com.nms.model.ptn.path.eth;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.nms.db.bean.ptn.Businessid;
import com.nms.db.bean.ptn.SiteRoate;
import com.nms.db.bean.ptn.path.eth.DualInfo;
import com.nms.db.bean.ptn.path.protect.PwProtect;
import com.nms.db.bean.ptn.path.pw.PwInfo;
import com.nms.db.bean.ptn.port.AcPortInfo;
import com.nms.db.dao.ptn.BusinessidDao;
import com.nms.db.dao.ptn.SiteRoateDao;
import com.nms.db.dao.ptn.path.eth.DualDao;
import com.nms.model.equipment.shlef.SiteService;
import com.nms.model.ptn.SiteRoateService;
import com.nms.model.ptn.path.protect.PwProtetcService;
import com.nms.model.ptn.path.pw.PwInfoService;
import com.nms.model.ptn.port.AcInfoService;
import com.nms.model.util.ObjectService;
import com.nms.model.util.Services;
import com.nms.ui.manager.BusinessIdException;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.ExceptionManage;
import com.nms.ui.manager.ResourceUtil;
import com.nms.ui.manager.keys.StringKeysTip;

public class DualInfoService extends ObjectService{
	public void setConnection(Connection connection) {
		super.connection = connection;
	}

	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}
	
	private BusinessidDao businessidDao = new BusinessidDao();
	private DualDao dualDao = new DualDao();
	private final static int ISUSEDSTATUS = 1;
	
	/**
	 * 插入数据库
	 * @param dualInfoList
	 * @return
	 * @throws BusinessIdException
	 */
	public int insert(List<DualInfo> dualInfoList) throws Exception,BusinessIdException{
		if(dualInfoList == null){
			throw new Exception("etreeinfo is null");
		}
		List<Integer> acIdList = new ArrayList<Integer>();
		Set<Integer> acIdSet = new HashSet<Integer>();
		PwInfoService pwService = null;
		AcInfoService acService = null;
		PwProtetcService pwProtetcService = null;
		SiteService siteService = null;
		SiteRoateService siteRoateService = null;
		SiteRoate siteRoate = null;
        int pwProtectId = 0;
		int id = 0;
		try {
		    siteService = (SiteService) ConstantUtil.serviceFactory.newService(Services.SITE, this.connection);
			pwService = (PwInfoService) ConstantUtil.serviceFactory.newService(Services.PwInfo, this.connection);
			acService = (AcInfoService) ConstantUtil.serviceFactory.newService(Services.AcInfo, this.connection);
			pwProtetcService = (PwProtetcService) ConstantUtil.serviceFactory.newService(Services.PWPROTECT, this.connection);
			siteRoateService = (SiteRoateService) ConstantUtil.serviceFactory.newService(Services.SITEROATE, this.connection);
			Businessid rootXCIdInfo = null;
			int serviceId = dualDao.selectMaxServiceId(connection)+1;
			for(DualInfo dualInfo : dualInfoList){//获取目的辅和主节点业务id
				//获取根节点业务id
				if (dualInfo.getRootSite() != 0) {
					
					if(dualInfo.getaXcId() == 0)
					{
						rootXCIdInfo = businessidDao.query(dualInfo.getRootSite(), "eline", connection);
					}else
					{
						rootXCIdInfo=businessidDao.query(dualInfo.getaXcId(), dualInfo.getRootSite(), "eline",connection);
					}
					if (null == rootXCIdInfo) {
						throw new BusinessIdException(siteService.getSiteName(dualInfoList.get(0).getRootSite()) + ResourceUtil.srcStr(StringKeysTip.TIP_ELINEID));
					}
					businessidDao.update(rootXCIdInfo.getId(), ISUSEDSTATUS, connection);
					if(rootXCIdInfo != null){
						dualInfo.setaXcId(rootXCIdInfo.getIdValue());
					}
				}
				if(dualInfo.getBranchMainSite() != 0){//目的主节点
//					Businessid zXcId = null;
//					zXcId = businessidDao.query(dualInfo.getBranchMainSite(), "eline", connection);
//					if(zXcId == null){
//						throw new BusinessIdException(siteService.getSiteName(dualInfo.getBranchMainSite()) + ResourceUtil.srcStr(StringKeysTip.TIP_ELINEID));
//					}
//					businessidDao.update(zXcId.getId(), ISUSEDSTATUS, connection);
//					dualInfo.setzXcId(zXcId.getIdValue());
					if(dualInfo.getzXcId() == 0)
					{
						rootXCIdInfo = businessidDao.query(dualInfo.getBranchMainSite(), "eline", connection);
					}else
					{
						rootXCIdInfo = businessidDao.query(dualInfo.getzXcId(), dualInfo.getBranchMainSite(), "eline",connection);
					}
					if (null == rootXCIdInfo) {
						throw new BusinessIdException(siteService.getSiteName(dualInfo.getBranchMainSite()) + ResourceUtil.srcStr(StringKeysTip.TIP_ELINEID));
					}
					businessidDao.update(rootXCIdInfo.getId(), ISUSEDSTATUS, connection);
					if(rootXCIdInfo != null){
						dualInfo.setzXcId(rootXCIdInfo.getIdValue());
					}
					
				}
				if(dualInfo.getBranchProtectSite() != 0){//目的辅节点
//					Businessid zXcId = null;
//					zXcId = businessidDao.query(dualInfo.getBranchProtectSite(), "eline", connection);
//					if(zXcId == null){
//						throw new BusinessIdException(siteService.getSiteName(dualInfo.getBranchProtectSite()) + ResourceUtil.srcStr(StringKeysTip.TIP_ETREEID));
//					}
//					businessidDao.update(zXcId.getId(), ISUSEDSTATUS, connection);
//					dualInfo.setzXcId(zXcId.getIdValue());
					
					if(dualInfo.getzXcId() == 0)
					{
						rootXCIdInfo = businessidDao.query(dualInfo.getBranchProtectSite(), "eline", connection);
					}else
					{
						rootXCIdInfo = businessidDao.query(dualInfo.getzXcId(), dualInfo.getBranchProtectSite(), "eline",connection);
					}
					if (null == rootXCIdInfo) {
						throw new BusinessIdException(siteService.getSiteName(dualInfo.getBranchProtectSite()) + ResourceUtil.srcStr(StringKeysTip.TIP_ELINEID));
					}
					businessidDao.update(rootXCIdInfo.getId(), ISUSEDSTATUS, connection);
					if(rootXCIdInfo != null){
						dualInfo.setzXcId(rootXCIdInfo.getIdValue());
					}
					
				}
				if(dualInfo.getServiceId() == 0)
				{
					dualInfo.setServiceId(serviceId);
				}
				
				// 被业务使用的acId列表
				if (dualInfo.getaAcId() != 0) {
					acIdSet.add(dualInfo.getaAcId());
				}
				if (dualInfo.getzAcId() != 0) {
					acIdSet.add(dualInfo.getzAcId());
				}
				id = dualDao.insert(connection, dualInfo);
				dualInfo.setId(id);
				pwService.setUser(dualInfo.getPwId(), dualInfo);
				if(dualInfo.getBranchMainSite()>0 || (dualInfo.getIsSingle() == 1 && dualInfo.getPwProtect() != null)){//保存pw保护配置
					dualInfo.getPwProtect().setServiceId(dualInfo.getId());
					pwProtectId = pwProtetcService.insert(dualInfo.getPwProtect());
					dualInfo.getPwProtect().setId(pwProtectId);
					siteRoate = new SiteRoate();
					siteRoate.setSiteId(dualInfo.getPwProtect().getSiteId());
					siteRoate.setType("pw");
					siteRoate.setRoate(-1);
					siteRoate.setTypeId(pwProtectId );
					siteRoateService.insert(siteRoate);
				}
			}
			// 设置ac被使用
			acIdList.addAll(acIdSet);
			List<AcPortInfo> acPortInfoList = acService.select(acIdList);
			for (AcPortInfo acPort : acPortInfoList) {
				acPort.setIsUser(1);
				acService.updateUserType(acPort);
			}
			
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} 
		return 0;
	}

	/**
	 * 查询所有的双归保护业务(每一条可能包含多条业务)
	 * @param label(0:代表网络侧; 1:代表单站测) 判断是查询网络侧还是查询单站侧的
	 */
	public Map<Integer, List<DualInfo>> select(int label,int siteId) throws Exception {
		Map<Integer, List<DualInfo>> dualInfoMap = new HashMap<Integer, List<DualInfo>>();
		List<DualInfo> dualInfoServiceList = null;
		PwProtect pwProtect = null;
		PwProtetcService pwProtetcService = null;
		List<PwProtect> pwProtectList = null;
		try {
			dualInfoServiceList = this.dualDao.queryAll(connection,label,siteId);
			pwProtetcService = (PwProtetcService) ConstantUtil.serviceFactory.newService(Services.PWPROTECT, this.connection);
			for (DualInfo dualInfo : dualInfoServiceList) {
				if(dualInfo.getBranchProtectSite() >0||dualInfo.getBranchMainSite()>0 ||(dualInfo.getBranchMainSite() == 0&&dualInfo.getBranchProtectSite() ==0 && dualInfo.getIsSingle() ==1)){
					pwProtect = new PwProtect();
					pwProtect.setServiceId(dualInfo.getId());
					pwProtectList = pwProtetcService.select(pwProtect);
					if(pwProtectList != null && pwProtectList.size() >0)
					{
						pwProtect = pwProtectList.get(0);
						dualInfo.setPwProtect(pwProtect);
					}
				}
				int serviceId = dualInfo.getServiceId();
				if (dualInfoMap.get(serviceId) == null) {
					List<DualInfo> dualInfoList = new ArrayList<DualInfo>();
					for (DualInfo info : dualInfoServiceList) {
						if (info.getServiceId() == serviceId) {
							dualInfoList.add(info);
						}
					}
					dualInfoMap.put(serviceId, dualInfoList);
				}

			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
//			UiUtil.closeService(pwProtetcService);
			 pwProtect = null;
			 pwProtetcService = null;
			 pwProtectList = null;
			 dualInfoServiceList = null;
		}
		return dualInfoMap;
	}
	
	/**
	 * 查询某一条dual业务(可能包含多条pw)
	 */
	public List<DualInfo> select(DualInfo dualInfo) throws Exception {
		List<DualInfo> dualInfoList = null;
		PwProtect pwProtect = null;
		PwProtetcService pwProtetcService = null;
		try {
			pwProtetcService = (PwProtetcService) ConstantUtil.serviceFactory.newService(Services.PWPROTECT, this.connection);
			dualInfoList = this.dualDao.queryByCondition(dualInfo, connection);
			for(DualInfo info : dualInfoList){//查找对应pw保护
				if(info.getBranchMainSite()>0){
					pwProtect = new PwProtect();
					pwProtect.setServiceId(info.getId());
					pwProtect = pwProtetcService.select(pwProtect).get(0);
					info.setPwProtect(pwProtect);
				}
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return dualInfoList;
	}
	
	/**
	 * 删除双归保护，并且释放ac，pw关联关系
	 * @param dualInfos
	 * @return
	 */
	public int delete(List<DualInfo> dualInfos){
		
		int dualResult = 0;
		PwInfo pwInfo = null;
		List<Integer> acIdlist = null;
		Set<Integer> acIdSet = null;
		List<AcPortInfo> acInfoList = null;
		PwInfoService pwService = null;
		AcInfoService acService = null;
		PwProtetcService pwProtetcService = null;
		SiteRoateDao siteRoateDao = null;
		SiteRoate siteRoate = null;
		
		try {
			acIdSet = new HashSet<Integer>();
			acIdlist = new ArrayList<Integer>();

			pwService = (PwInfoService) ConstantUtil.serviceFactory.newService(Services.PwInfo, this.connection);
			acService = (AcInfoService) ConstantUtil.serviceFactory.newService(Services.AcInfo, this.connection);
			pwProtetcService = (PwProtetcService) ConstantUtil.serviceFactory.newService(Services.PWPROTECT, this.connection);
	
			// 解除与pw和ac引用关系
			for (DualInfo dualInfo : dualInfos) {
				if(dualInfo.getBranchMainSite()>0||(dualInfo.getIsSingle() == 1 && dualInfo.getPwProtect() != null)){
					pwProtetcService.delete(dualInfo.getPwProtect());
					//删除siteRoate
					siteRoate = new SiteRoate();
					siteRoateDao = new SiteRoateDao();
					siteRoate.setTypeId(dualInfo.getPwProtect().getId());
					siteRoate.setType("pw");
					siteRoateDao.delete(siteRoate, connection);
				}
				pwInfo = new PwInfo();
				pwInfo.setPwId(dualInfo.getPwId());
				pwInfo = pwService.selectBypwid_notjoin(pwInfo);
				pwInfo.setRelatedServiceId(0);
				pwInfo.setRelatedServiceType(0);
				pwService.updateRelatedService(pwInfo);
				// 释放ac
				if (dualInfo.getaAcId() != 0) {
					acIdSet.add(dualInfo.getaAcId());
				}
				if (dualInfo.getzAcId() != 0) {
					acIdSet.add(dualInfo.getzAcId());
				}

				// 释放id
				Businessid businessId = new Businessid();
				businessId.setIdStatus(0);
				businessId.setIdValue(dualInfo.getaXcId());
				businessId.setType("eline");
				businessId.setSiteId(dualInfo.getRootSite());
				businessidDao.updateBusinessid(businessId, connection);
				if(dualInfo.getBranchMainSite()>0){
					businessId.setIdValue(dualInfo.getzXcId());
					businessId.setSiteId(dualInfo.getBranchMainSite());
					businessidDao.updateBusinessid(businessId, connection);
				}else{
					businessId.setIdValue(dualInfo.getzXcId());
					businessId.setSiteId(dualInfo.getBranchProtectSite());
					businessidDao.updateBusinessid(businessId, connection);
				}
				dualResult = this.dualDao.delete(connection,dualInfo.getId());
			}
			acIdlist.addAll(acIdSet);
			acInfoList = acService.select(acIdlist);
			for (AcPortInfo info : acInfoList) {
				info.setIsUser(0);
				acService.updateUserType(info);
			}
			
			
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
//			UiUtil.closeService(acService);
//			UiUtil.closeService(pwService);
//			UiUtil.closeService(pwProtetcService);
		}
		return dualResult;
	}
	
	/**
	 * 根据网元id查询
	 * @param siteId
	 * @return
	 */
	public List<DualInfo> selectBySiteId(int siteId){
		List<DualInfo> dualInfos = null;
		try {
			dualInfos = dualDao.queryBySiteId(connection, siteId);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}finally{
			dualDao = null;
		}
		return dualInfos;
	}
	
	/**
	 * 根据网元id,businessId查询
	 * @param siteId
	 * @return
	 */
	public DualInfo selectBySiteIdAndBusinessId(int siteId,int businessId){
		List<DualInfo> dualInfos = null;
		DualInfo info=null;
		try {
			dualInfos = dualDao.queryBySiteIdAndBusinessId(connection, siteId, businessId);
			if(dualInfos!=null&&dualInfos.size()>0){
				info=dualInfos.get(0);
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}finally{
			dualInfos = null;
		}
		return info;
	}
	
	/**
	 * 更新
	 * @param dualInfos
	 * @return
	 * @throws SQLException
	 */
	public int update(List<DualInfo> dualInfos) throws SQLException{
		int result = 0;
		DualDao dualDao = new DualDao();
		PwProtetcService pwProtetcService = null;
		try {
			connection.setAutoCommit(false);
			for(DualInfo dualInfo : dualInfos){
				dualDao.update(connection, dualInfo);
				if(dualInfo.getPwProtect() != null){
					pwProtetcService = (PwProtetcService) ConstantUtil.serviceFactory.newService(Services.PWPROTECT, connection);
					pwProtetcService.update(dualInfo.getPwProtect());
				}
			}
			if(!connection.getAutoCommit())
			{
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e, this.getClass());
		}finally{
				connection.setAutoCommit(true);
		}
		
		return result;
	}

	/**
	 * 判断名字是否重复
	 * 重复 返回true
	 * 不重复 返回false
	 * @throws Exception 
	 * @throws Exception 
	 */
	public boolean nameRepetition(String afterName, String beforeName) throws Exception {
		int result = this.dualDao.query_name(afterName, beforeName, connection);
		if (0 == result) {
			return false;
		} else {
			return true;
		}
	}
	
	public void updateActionStatus(int siteId,int status) throws Exception
	{
		try 
		{
			connection.setAutoCommit(false);
			dualDao.updateStatus(siteId,status,connection);
			if(!connection.getAutoCommit())
			{
				connection.commit();
			}
		} catch (Exception e) 
		{
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		}finally
		{
			connection.setAutoCommit(true);	
		}
	}
	
	public List<DualInfo> selectMainPwAndSiteId(int pwId,int siteId) throws Exception
	{
		return dualDao.queryBySiteIdAndPWId(pwId,siteId,connection);
		
	}
	
	public List<DualInfo> selectMainPwAndSiteId(int mainPwId,int standPwId,int siteId) throws Exception
	{
		return dualDao.queryBySiteIdAndPWId(mainPwId,standPwId,siteId,connection);
		
	}
	/**
	 * 通过acId,siteId查询Dual
	 * @param acId
	 * @return
	 * @throws SQLException 
	 */
	public List<DualInfo> selectByAcIdAndSiteId(int acId,int siteId) throws Exception{
		List<DualInfo> dualInfos = null;
		dualInfos = this.dualDao.queryByAcIdAndSiteIdCondition(acId,siteId, connection);
		return dualInfos;
	}
	
	/**
	 * 	通过pwid查询某一条双归业务
	 * @param pwIdS
	 * @return
	 * @throws Exception 
	 */
	public List<DualInfo> selectByPwIDs(List<Integer> pwIdS) throws Exception{
		List<DualInfo> dualInfos = null;
		dualInfos = this.dualDao.queryBypwIDs(pwIdS, connection);
		return dualInfos;
	}
}
