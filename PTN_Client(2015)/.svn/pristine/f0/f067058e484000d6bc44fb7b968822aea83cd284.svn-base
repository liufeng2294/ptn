package com.nms.model.ptn.clock;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.clock.ClockSource;
import com.nms.db.dao.ptn.clock.FrequencyClockManageDao;
import com.nms.db.enums.EActionType;
import com.nms.db.enums.EServiceType;
import com.nms.model.util.ObjectService;
import com.nms.ui.manager.ExceptionManage;

public class FrequencyClockManageService extends ObjectService {
	public void setConnection(Connection connection) {
		super.connection = connection;
	}

	public void setPtnuser(String prnuser) {
		super.ptnuser = prnuser;
	}

	private FrequencyClockManageDao frequencyClockManageDao = new FrequencyClockManageDao();


	/**
	 *添加数据
	 *
	 * @param clockSource 实体
	 * @return 只要不是0就是插入成功
	 * @throws Exception
	 */
	public int insert(ClockSource clockSource) throws Exception {
		if (null == clockSource) {
			throw new Exception("clockSource is null");
		}
		int information = 0;
		try {
			connection.setAutoCommit(false);
			information = frequencyClockManageDao.insertSystemModel(clockSource, connection);
			information = frequencyClockManageDao.insertExportModel(clockSource, connection);
			//离线网元数据下载
			super.dateDownLoad(clockSource.getSiteId(),information, EServiceType.CLOCKSOURCE.getValue(), EActionType.INSERT.getValue());
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
		return information;
	}

	/**
	 * function:删除相关联数据
	 * 
	 * @param clockSource
	 *            实体
	 * @return
	 * @throws Exception
	 */
	public int delete(List<ClockSource> clockSourceList)throws Exception {
		int information = 0;
		try {
			connection.setAutoCommit(false);
			for(ClockSource clockSource: clockSourceList){
				information = frequencyClockManageDao.delete(clockSource, connection);
				//离线网元数据下载
				super.dateDownLoad(clockSource.getSiteId(),clockSource.getId(), EServiceType.CLOCKSOURCE.getValue(), EActionType.DELETE.getValue(),"",null,clockSource.getPort(),0,null);
			}
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
		return information;
	}

	/**
	 * 查询相关信息
	 * 
	 * @return List<FrequencyInfo_neClock>
	 * @throws Exception
	 */

	public List<ClockSource> select(int id) throws Exception {
		List<ClockSource> frequencyClockManageList=null;
		try {
			frequencyClockManageList=new ArrayList<ClockSource>();
			frequencyClockManageList = frequencyClockManageDao.select(connection,id);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return frequencyClockManageList;
	}
	/**
	 * 条件查询
	 * 
	 * @return List<FrequencyInfo_neClock>
	 * @throws Exception
	 */

	public List<ClockSource> select(ClockSource clockSource) throws Exception {
		List<ClockSource> frequencyClockManageList=null;
		try {
			frequencyClockManageList=new ArrayList<ClockSource>();
			frequencyClockManageList = frequencyClockManageDao.select(clockSource,connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return frequencyClockManageList;
	}

	/**
	 * 删除相关的数据
	 * 
	 * @param ClockSource
	 *            实体
	 * @return int 1:成功，0不成功
	 * @throws Exception
	 */
	public int update(ClockSource clockSource)throws Exception {
		if (null == clockSource) {
			throw new Exception("clockSource is null");
		}
		int isOK = 0;
		try {
			connection.setAutoCommit(false);
			isOK = frequencyClockManageDao.update(clockSource,connection);
			//离线网元数据下载
			if(0!=clockSource.getSiteId()){
				super.dateDownLoad(clockSource.getSiteId(),clockSource.getId(), EServiceType.CLOCKSOURCE.getValue(), EActionType.UPDATE.getValue());
			}
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
		return isOK;
	}

	public void updateActiveStatus(int siteId, int value) {
		try {
			frequencyClockManageDao.updateActiveStatus(siteId,value,connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		
	}

}
