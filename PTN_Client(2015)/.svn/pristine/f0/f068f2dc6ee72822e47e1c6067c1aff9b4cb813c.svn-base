package com.nms.db.dao.ptn.path.pw;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.path.pw.MsPwInfo;
import com.nms.ui.manager.ExceptionManage;

public class MsPwInfoDao {
	
	/**
	 * 新建
	 * @param mspwinfo
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int insert(MsPwInfo mspwinfo, Connection connection) throws Exception {

		if (null == mspwinfo) {
			throw new Exception("pwinfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		try {
			sql = "insert into mspwinfo(siteId,pwId,frontTunnelId,backTunnelId,frontInlabel,frontOutlabel,backInlabel,backOutlabel,mipId) values(?,?,?,?,?,?,?,?,?)";
			preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, mspwinfo.getSiteId());
			preparedStatement.setInt(2, mspwinfo.getPwId());
			preparedStatement.setInt(3, mspwinfo.getFrontTunnelId());
			preparedStatement.setInt(4, mspwinfo.getBackTunnelId());
			preparedStatement.setInt(5, mspwinfo.getFrontInlabel());
			preparedStatement.setInt(6, mspwinfo.getFrontOutlabel());
			preparedStatement.setInt(7, mspwinfo.getBackInlabel());
			preparedStatement.setInt(8, mspwinfo.getBackOutlabel());
			preparedStatement.setInt(9, mspwinfo.getMipId());
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				result = resultSet.getInt(1);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}
	
	/**
	 * 修改
	 * @param mspwinfo
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int update(MsPwInfo mspwinfo, Connection connection) throws Exception {
		if (null == mspwinfo) {
			throw new Exception("mspwinfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;

		try {
			sql = "update mspwinfo set siteId=?,pwId=?,frontTunnelId=?,backTunnelId=?,frontInlabel=?,frontOutlabel=?,backInlabel=?,backOutlabel=?,mipId=?  where id=?";

			preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, mspwinfo.getSiteId());
			preparedStatement.setInt(2, mspwinfo.getPwId());
			preparedStatement.setInt(3, mspwinfo.getFrontTunnelId());
			preparedStatement.setInt(4, mspwinfo.getBackTunnelId());
			preparedStatement.setInt(5, mspwinfo.getFrontInlabel());
			preparedStatement.setInt(6, mspwinfo.getFrontOutlabel());
			preparedStatement.setInt(7, mspwinfo.getBackInlabel());
			preparedStatement.setInt(8, mspwinfo.getBackOutlabel());
			preparedStatement.setInt(9, mspwinfo.getMipId());
			preparedStatement.setInt(10, mspwinfo.getId());
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				result = resultSet.getInt(1);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}
	
	/**
	 * 通过主键删除mspwInfo
	 * 
	 * @param mspwId
	 *            主键
	 * @param connection
	 *            数据库连接
	 * @return 删除的记录数
	 * @throws Exception
	 */
	public int delete(int mspwId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "delete from mspwInfo where id=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, mspwId);

			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}

	/**
	 * 通过条件查询
	 * 
	 * @param pwinfoCondition
	 *            查询条件
	 * @param connection
	 *            数据库连接
	 * @return List<PwInfo>集合
	 * @throws Exception
	 */
	public List<MsPwInfo> queryByCondition(MsPwInfo mspwinfoCondition, Connection connection) throws Exception {

		if (null == mspwinfoCondition) {
			throw new Exception("mspwinfoCondition is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		List<MsPwInfo> list = null;
		try {
			sql = "select*from mspwInfo where 1=1";

			if (mspwinfoCondition.getPwId() > 0) {
				sql += " and pwId=" + mspwinfoCondition.getPwId();
			}
			if (mspwinfoCondition.getSiteId() > 0) {
				sql += " and siteId=" + mspwinfoCondition.getSiteId();
			}
			if (mspwinfoCondition.getFrontTunnelId()> 0) {
				sql += " and frontTunnelId=" + mspwinfoCondition.getFrontTunnelId();
			}
			if (mspwinfoCondition.getBackTunnelId() > 0) {
				sql += " and backTunnelId=" + mspwinfoCondition.getBackTunnelId();
			}
			if (mspwinfoCondition.getFrontInlabel() > 0) {
				sql += " and frontInlabel=" + mspwinfoCondition.getFrontInlabel();
			}
			if (mspwinfoCondition.getFrontOutlabel() > 0) {
				sql += " and frontOutlabel=" + mspwinfoCondition.getFrontOutlabel();
			}
			if (mspwinfoCondition.getBackInlabel() > 0) {
				sql += " and backInlabel=" + mspwinfoCondition.getBackInlabel();
			}
			if (mspwinfoCondition.getBackOutlabel() > 0) {
				sql += " and backOutlabel=" + mspwinfoCondition.getBackOutlabel();
			}
		    sql += " order by id";
			list = this.excuteQuery(connection, sql);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return list;
	}
	
	/**
	 * 通过条件查询
	 * 
	 * @param pwinfoCondition
	 *            查询条件
	 * @param connection
	 *            数据库连接
	 * @return List<PwInfo>集合
	 * @throws Exception
	 */
	public List<MsPwInfo> queryByTunnelIds(List<Integer> tunnelIds, Connection connection) throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		List<MsPwInfo> list = null;
		try {
			String tunnelId = tunnelIds.toString();
			String ids = tunnelId.substring(1, tunnelId.length() - 1);
			sql = "select*from mspwInfo where frontTunnelId in " + "(" + ids + ")"+" or backTunnelId in "+"(" + ids + ")";
			list = this.excuteQuery(connection, sql);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			sql = null;
		}
		return list;
	}
	
	
	/**
	 * 执行查询语句
	 * 
	 * @param connection
	 *            数据库连接
	 * @param sql
	 *            sql语句
	 * @return 查询集合
	 * @throws Exception
	 */
	private List<MsPwInfo> excuteQuery(Connection connection, String sql) throws Exception {
		List<MsPwInfo> mspwinfoList = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		MsPwInfo mspwinfo = null;
		try {
			mspwinfoList = new ArrayList<MsPwInfo>();
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				mspwinfo = new MsPwInfo();
				mspwinfo.setId(resultSet.getInt("id"));
				mspwinfo.setSiteId(resultSet.getInt("siteId"));
				mspwinfo.setPwId(resultSet.getInt("pwId"));
				mspwinfo.setBackInlabel(resultSet.getInt("backInlabel"));
				mspwinfo.setBackOutlabel(resultSet.getInt("backOutlabel"));
				mspwinfo.setBackTunnelId(resultSet.getInt("backTunnelId"));
				mspwinfo.setFrontInlabel(resultSet.getInt("frontInlabel"));
				mspwinfo.setFrontOutlabel(resultSet.getInt("frontOutlabel"));
				mspwinfo.setFrontTunnelId(resultSet.getInt("frontTunnelId"));
				mspwinfo.setMipId(resultSet.getInt("mipId"));
				mspwinfoList.add(mspwinfo);
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			mspwinfo = null;
		}
		return mspwinfoList;
	}
}
