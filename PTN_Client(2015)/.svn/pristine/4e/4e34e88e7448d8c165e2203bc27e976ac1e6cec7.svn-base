package com.nms.model.ptn;

import java.sql.Connection;
import java.util.List;

import com.nms.db.bean.ptn.AclInfo;
import com.nms.db.dao.ptn.AclInfoDao;
import com.nms.model.util.ObjectService;
import com.nms.ui.manager.ExceptionManage;

public class AclService extends ObjectService{
	
	public void setConnection(Connection connection) {
		super.connection = connection;
	}

	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}
	
	private AclInfoDao aclInfoDao = new AclInfoDao();
	
	/**
	 * 新增
	 * @param AclInfo
	 * @throws Exception
	 */
	public int save(AclInfo aclInfo) throws Exception{
		
		if(aclInfo == null){
			throw new Exception("AclInfo is null");
		}
		int result = 0;
		try {
			connection.setAutoCommit(false);
			result = aclInfoDao.insert(aclInfo, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		}finally{
			connection.setAutoCommit(true);
		}
		return result;
	}
	
	/**
	 * 批量创建
	 * @param aclInfos
	 * @return
	 * @throws Exception
	 */
	public int batchSave(List<AclInfo> aclInfos) throws Exception{
		int result = 0;
		try {
			connection.setAutoCommit(false);
			for(AclInfo aclInfo : aclInfos){
				result = aclInfoDao.insert(aclInfo, connection);
				aclInfo.setId(result);
			}
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		}finally{
			connection.setAutoCommit(true);
		}
		return result;
	}

	/**
	 * 查询该网元下所有信息
	 * @param siteId
	 * @return
	 * @throws Exception
	 */
	public List<AclInfo> select(int siteId) throws Exception{
		List<AclInfo> AclInfoList = null;
		if(siteId == 0){
			throw new Exception("siteId is null");
		}
		try {
			connection.setAutoCommit(false);
			AclInfoList = aclInfoDao.queryByCondition(siteId, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		}finally{
			connection.setAutoCommit(true);
		}
		return AclInfoList;
	}
	
	/**
	 * 更新
	 * @param wholeConfigInfo
	 * @throws Exception
	 */
	public void update(AclInfo aclInfo) throws Exception{
		if(aclInfo == null){
			throw new Exception("aclInfo is null");
		}
		try {
			connection.setAutoCommit(false);
			aclInfoDao.update(aclInfo, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		}finally{
			connection.setAutoCommit(true);
		}
	}
	
	/**
	 *删除
	 * @param wholeConfigInfo
	 * @throws Exception
	 */
	public void delete(AclInfo aclInfo) throws Exception{
		if(aclInfo == null){
			throw new Exception("aclInfo is null");
		}
		try {
			connection.setAutoCommit(false);
			aclInfoDao.delete(aclInfo, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		}finally{
			connection.setAutoCommit(true);
		}
	}
	/**
	 * 查询
	 * 
	 * @param oamEthernetInfo
	 * @return
	 * @throws Exception
	 */
	public List<AclInfo> queryByNeID(AclInfo aclInfo) throws Exception {
		if (aclInfo == null) {
			throw new Exception("AclInfo is null");
		}
		List<AclInfo> ccnList = null;
		try {
			ccnList = aclInfoDao.queryOamLinkInfoByCondition(aclInfo, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return ccnList;
	}
	/**
	 *通过siteId删除
	 * @param wholeConfigInfo
	 * @throws Exception
	 */
	public void deleteBySiteId(int siteId) throws Exception{
		if(siteId == 0){
			throw new Exception("siteId is null");
		}
		try {
			connection.setAutoCommit(false);
			aclInfoDao.deleteBySiteId(siteId, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		}finally{
			connection.setAutoCommit(true);
		}
	}
}
