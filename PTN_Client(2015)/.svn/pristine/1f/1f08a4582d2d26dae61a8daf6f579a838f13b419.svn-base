package com.nms.db.dao.ptn.ecn;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.ecn.OSPFAREAInfo;

public class OSPFAREADao {
	// TXC

	/**
	 * 通过ID查询
	 * 
	 * @param NeID
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<OSPFAREAInfo> queryByNeID(String NeID, Connection connection) throws Exception {
		if (null == NeID) {
			throw new Exception("NeID is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<OSPFAREAInfo> oSPFAREAInfoList = null;
		OSPFAREAInfo oSPFAREAInfo = null;
		try {
			sql = "select * from ospf_area where neId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, Integer.valueOf(NeID));//
			resultSet = preparedStatement.executeQuery();
			oSPFAREAInfoList = new ArrayList<OSPFAREAInfo>();
			while (resultSet.next()) {
				oSPFAREAInfo = new OSPFAREAInfo();
				oSPFAREAInfo.setId(resultSet.getString(1));
				oSPFAREAInfo.setNeId(resultSet.getString(2));
				oSPFAREAInfo.setArea_range(resultSet.getString(3));
				oSPFAREAInfo.setType(resultSet.getString(4));
				oSPFAREAInfo.setSummary(resultSet.getInt(5));
				oSPFAREAInfo.setMetric(resultSet.getInt(6));
				oSPFAREAInfo.setStatus(resultSet.getInt(7));
				oSPFAREAInfoList.add(oSPFAREAInfo);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if(null!=resultSet){
				try {
					resultSet.close();
				} catch (Exception e2) {
					throw e2;
				}
				resultSet=null;
			}
			
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
			oSPFAREAInfo = null;
		}
		return oSPFAREAInfoList;
	}
	
	/**
	 * 通过NeID area_range查询
	 * 
	 * @param NeID
	 * @param area_range
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<OSPFAREAInfo> queryByNeIDAndAreaRange(String NeID, String area_range, Connection connection) throws Exception {
		if (null == NeID) {
			throw new Exception("NeID is null");
		}
		if (null == area_range) {
			throw new Exception("area_range is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<OSPFAREAInfo> oSPFAREAInfoList = null;
		OSPFAREAInfo oSPFAREAInfo = null;
		try {
			sql = "select * from ospf_area where neId=? and area_range=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, Integer.valueOf(NeID));//
			preparedStatement.setInt(2, Integer.valueOf(area_range));//
			resultSet = preparedStatement.executeQuery();
			oSPFAREAInfoList = new ArrayList<OSPFAREAInfo>();
			while (resultSet.next()) {
				oSPFAREAInfo = new OSPFAREAInfo();
				oSPFAREAInfo.setId(resultSet.getString(1));
				oSPFAREAInfo.setNeId(resultSet.getString(2));
				oSPFAREAInfo.setArea_range(resultSet.getString(3));
				oSPFAREAInfo.setType(resultSet.getString(4));
				oSPFAREAInfo.setSummary(resultSet.getInt(5));
				oSPFAREAInfo.setMetric(resultSet.getInt(6));
				oSPFAREAInfo.setStatus(resultSet.getInt(7));
				oSPFAREAInfoList.add(oSPFAREAInfo);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if(null!=resultSet){
				try {
					resultSet.close();
				} catch (Exception e2) {
					throw e2;
				}
				resultSet=null;
			}
			
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
			oSPFAREAInfo = null;
		}
		return oSPFAREAInfoList;
	}

	/**
	 * 查询名称是否存在
	 * 
	 * @param NeID
	 * @param area_range
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int queryName(String NeID, String area_range, Connection connection) throws Exception {
		if (null == NeID) {
			throw new Exception("NeID is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int count = 0;
		try {
			sql = "select count(*) from ospf_area where neId=? and area_range=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, NeID);//
			preparedStatement.setString(2, (area_range));//
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				count = resultSet.getInt(1);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if(null!=resultSet){
				try {
					resultSet.close();
				} catch (Exception e2) {
					throw e2;
				}
				resultSet=null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return count;
	}

	/**
	 * 创建
	 * 
	 * @param OSPFAREAInfo
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int insert(OSPFAREAInfo OSPFAREAInfo, Connection connection) throws Exception {
		if (null == OSPFAREAInfo) {
			throw new Exception("OSPFAREAInfo is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		ResultSet resultSet = null;
		try {

			sql = "insert into ospf_area (neId,area_range,type,summary,metric,status) values(?,?,?,?,?,?)";
			preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setString(1, OSPFAREAInfo.getNeId());//
			preparedStatement.setString(2, OSPFAREAInfo.getArea_range());
			preparedStatement.setString(3, OSPFAREAInfo.getType());
			preparedStatement.setInt(4, OSPFAREAInfo.getSummary());
			preparedStatement.setInt(5, OSPFAREAInfo.getMetric());
			preparedStatement.setInt(6, OSPFAREAInfo.getStatus());
			preparedStatement.executeUpdate();

			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				result = resultSet.getInt(1);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			
			if(null!=resultSet){
				try {
					resultSet.close();
				} catch (Exception e2) {
					throw e2;
				}
				resultSet=null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}

	/**
	 * 修改 激活状态
	 * 
	 * @param OSPFAREAInfo
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int updateStatus(OSPFAREAInfo OSPFAREAInfo, Connection connection) throws Exception {
		if (null == OSPFAREAInfo) {
			throw new Exception("OSPFAREAInfo is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		int result = 0;
		String sql="";
		try {
			sql +="update ospf_area set status=? where neId=? ";
			preparedStatement = connection.prepareStatement(sql);			
			preparedStatement.setInt(1, OSPFAREAInfo.getStatus());
			preparedStatement.setInt(2, Integer.valueOf(OSPFAREAInfo.getNeId()));//
		//	preparedStatement.setInt(3, Integer.valueOf(OSPFAREAInfo.getArea_range()));//
			 preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			sql=null;
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
		}
		return result;
	}

	/**
	 * 删除
	 * 
	 * @param id
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int deleteById(String id, Connection connection) throws Exception {
		if (null == id) {
			throw new Exception("id is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		try {

			sql = "delete from ospf_area where id=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, Integer.valueOf(id));
			preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}
	/**
	 * 更新
	 * 
	 * @param OSPFAREAInfo
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int update(OSPFAREAInfo OSPFAREAInfo, Connection connection) throws Exception {
		if (null == OSPFAREAInfo) {
			throw new Exception("OSPFAREAInfo is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		int result = 0;
	//	String sql="";
		int resultSet;
		try {
			String sql ="update ospf_area set type=?,summary=?,metric=?, status=?  where neId=? and area_range=?";
			preparedStatement = connection.prepareStatement(sql);	
		//	if(OSPFAREAInfo.getType()!=null&&!OSPFAREAInfo.getType().equals("")){
				preparedStatement.setString(1, OSPFAREAInfo.getType());
			//}else{
			//	preparedStatement.setString(1,"''");
		//	}
			
			preparedStatement.setInt(2, OSPFAREAInfo.getSummary());
			preparedStatement.setInt(3, OSPFAREAInfo.getMetric());
			preparedStatement.setInt(4, OSPFAREAInfo.getStatus());			
			preparedStatement.setString(5, OSPFAREAInfo.getNeId());//
			preparedStatement.setString(6, OSPFAREAInfo.getArea_range());//
			// preparedStatement.executeUpdate();
			 resultSet = preparedStatement.executeUpdate();
			//	if (resultSet.next()) {
				//	result = resultSet.getInt(1);
			//	}
		} catch (Exception e) {
			throw e;
		} finally {
			//sql=null;
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
		}
		return resultSet;
	}
	/**
	 * 删除
	 * 
	 * @param id
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int delete(OSPFAREAInfo info, Connection connection) throws Exception {
		if (null == info) {
			throw new Exception("info is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		try {

			sql = "delete from ospf_area where neId=? and area_range=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, info.getNeId());//
			preparedStatement.setString(2, info.getArea_range());//
			preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}
}
