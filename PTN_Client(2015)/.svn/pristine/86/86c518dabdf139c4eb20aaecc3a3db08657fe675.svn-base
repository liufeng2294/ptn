package com.nms.db.dao.ptn;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.AclInfo;
import com.nms.ui.manager.ExceptionManage;
/**
 * 
 * @author zk
 *ACL数据库的操作
 */
public class AclInfoDao {
	/**
	 * 修改 AclInfo aclInfo
	 * @param info  AclInfo
	 * @param conn  数据库连接
	 * @return   记录数
	 * @throws Exception
	 */
	public int update(AclInfo aclInfo,Connection connection)throws Exception{
		if (null == aclInfo) {
			throw new Exception("aclInfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}
		
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		
		try {
			sql = "update acl_inst set act=?, direction=?,portNumber=?,vlanId=?,isSourceMac=?" +
					",sourceMac=?,isPurposeMac=?,purposeMac=?,isSourceIp=?,sourceIp=?," +
					"isPurposeIp=?,purposeIp=?,isMatchCos=?,cosValue=?,isMatchDSCP=?," +
					"dscpValue=?,isMatchTOS=?,tosValue=?,isSourcePort=?,sourcePort=?," +
					"isPurposePort=?,purposePort=?,ruleObject=?,treatyType=? where siteid=? and id =?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1,aclInfo.getAct());
			preparedStatement.setInt(2, aclInfo.getDirection());
			preparedStatement.setInt(3, aclInfo.getPortNumber());
			preparedStatement.setInt(4,aclInfo.getVlanId());
			preparedStatement.setInt(5, aclInfo.getIsSourceMac());
			preparedStatement.setString(6,aclInfo.getSourceMac());
			preparedStatement.setInt(7,aclInfo.getIsPurposeMac());
			preparedStatement.setString(8,aclInfo.getPurposeMac());
			preparedStatement.setInt(9,aclInfo.getIsSourceIp());
			preparedStatement.setString(10,aclInfo.getSourceIp());
			preparedStatement.setInt(11,aclInfo.getIsPurposeIp());
			preparedStatement.setString(12,aclInfo.getPurposeIp());
			preparedStatement.setInt(13,aclInfo.getIsMatchCos());
			preparedStatement.setInt(14,aclInfo.getCosValue());
			preparedStatement.setInt(15,aclInfo.getIsMatchDSCP());
			preparedStatement.setInt(16,aclInfo.getDscpValue());
			preparedStatement.setInt(17,aclInfo.getIsMatchTOS());
			preparedStatement.setInt(18,aclInfo.getTosValue());
			preparedStatement.setInt(19,aclInfo.getIsSourcePort());
			preparedStatement.setInt(20,aclInfo.getSourcePort());
			preparedStatement.setInt(21,aclInfo.getIsPurposePort());
			preparedStatement.setInt(22,aclInfo.getPurposePort());
			preparedStatement.setInt(23,aclInfo.getRuleObject());
			preparedStatement.setInt(24,aclInfo.getTreatyType());
			preparedStatement.setInt(25,aclInfo.getSiteId());
			preparedStatement.setInt(26,aclInfo.getId());
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		}finally{
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		
		}
		return result;
	}
	
	/**
	 * 查询全部
	 * @param condition	查询条件
	 * @param connection  数据库连接
	 * @return	List<AclInfo>
	 * @throws Exception
	 */
	public List<AclInfo> queryByCondition(int siteId,Connection connection)throws Exception{

		if(connection == null){
			throw new Exception("Connection is null");
		}
		List<AclInfo> aclInfoList = null;
		String sql = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		AclInfo aclInfo =null;
		
		try{
			aclInfoList = new ArrayList<AclInfo>();
			sql = "select *from acl_inst where siteid=?";
			preparedStatement =  connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			resultSet  = preparedStatement.executeQuery();
			while(resultSet.next()){
				aclInfo = new AclInfo();
				aclInfo.setId(resultSet.getInt("id"));
				aclInfo.setSiteId(resultSet.getInt("siteid"));
				aclInfo.setAct(resultSet.getInt("act"));
				aclInfo.setDirection(resultSet.getInt("direction"));
				aclInfo.setPortNumber(resultSet.getInt("portNumber"));
				aclInfo.setVlanId(resultSet.getInt("vlanId"));
				aclInfo.setIsSourceMac(resultSet.getInt("isSourceMac"));
				aclInfo.setSourceMac(resultSet.getString("sourceMac"));
				aclInfo.setIsPurposeMac(resultSet.getInt("isPurposeMac"));
				aclInfo.setPurposeMac(resultSet.getString("purposeMac"));
				aclInfo.setIsSourceIp(resultSet.getInt("isSourceIp"));
				aclInfo.setSourceIp(resultSet.getString("sourceIp"));
				aclInfo.setIsPurposeIp(resultSet.getInt("isPurposeIp"));
				aclInfo.setPurposeIp(resultSet.getString("purposeIp"));
				aclInfo.setIsMatchCos(resultSet.getInt("isMatchCos"));
				aclInfo.setCosValue(resultSet.getInt("cosValue"));
				aclInfo.setIsMatchDSCP(resultSet.getInt("isMatchDSCP"));
				aclInfo.setDscpValue(resultSet.getInt("dscpValue"));
				aclInfo.setIsMatchTOS(resultSet.getInt("isMatchTOS"));
				aclInfo.setTosValue(resultSet.getInt("tosValue"));
				aclInfo.setIsSourcePort(resultSet.getInt("isSourcePort"));
				aclInfo.setSourcePort(resultSet.getInt("sourcePort"));
				aclInfo.setIsPurposePort(resultSet.getInt("isPurposePort"));
				aclInfo.setPurposePort(resultSet.getInt("purposePort"));
				aclInfo.setRuleObject(resultSet.getInt("ruleObject"));//
				aclInfo.setTreatyType(resultSet.getInt("treatyType"));
				aclInfoList.add(aclInfo);
			}
		}catch(Exception e){
			throw e;
		}finally{
			if(resultSet != null){
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if(preparedStatement != null){
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
			aclInfo = null;
		}
		return aclInfoList;
	}
	/**
	 * 添加 AclInfo
	 * @param info 
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int insert(AclInfo  info,Connection connection)throws Exception{
		if (null == info) {
			throw new Exception("AclInfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		int result = 0;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null; 
		try {
			
			sql = "insert into acl_inst (siteid,act,direction,portNumber,vlanId,isSourceMac" +
					",sourceMac,isPurposeMac,purposeMac,isSourceIp,sourceIp," +
					"isPurposeIp,purposeIp,isMatchCos,cosValue,isMatchDSCP," +
					"dscpValue,isMatchTOS,tosValue,isSourcePort,sourcePort," +
					"isPurposePort,purposePort,ruleObject,treatyType) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
			preparedStatement = connection.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, info.getSiteId());
			preparedStatement.setInt(2, info.getAct());
			preparedStatement.setInt(3, info.getDirection());
			preparedStatement.setInt(4, info.getPortNumber());
			preparedStatement.setInt(5, info.getVlanId());
			preparedStatement.setInt(6, info.getIsSourceMac());
			preparedStatement.setString(7, info.getSourceMac());
			preparedStatement.setInt(8, info.getIsPurposeMac());
			preparedStatement.setString(9, info.getPurposeMac());
			preparedStatement.setInt(10, info.getIsSourceIp());
			preparedStatement.setString(11, info.getSourceIp());
			preparedStatement.setInt(12, info.getIsPurposeIp());
			preparedStatement.setString(13, info.getPurposeIp());
			preparedStatement.setInt(14, info.getIsMatchCos());
			preparedStatement.setInt(15, info.getCosValue());
			preparedStatement.setInt(16, info.getIsMatchDSCP());
			preparedStatement.setInt(17, info.getDscpValue());
			preparedStatement.setInt(18, info.getIsMatchTOS());
			preparedStatement.setInt(19, info.getTosValue());
			preparedStatement.setInt(20, info.getIsSourcePort());
			preparedStatement.setInt(21, info.getSourcePort());
			preparedStatement.setInt(22, info.getIsPurposePort());
			preparedStatement.setInt(23, info.getPurposePort());
			preparedStatement.setInt(24, info.getRuleObject());
			preparedStatement.setInt(25, info.getTreatyType());
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			
			if(resultSet.next()){
				result = resultSet.getInt(1);
            }
		} catch (Exception e) {
			throw e;
		}finally{
			if(null != resultSet){
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}

	public void delete(AclInfo aclInfo, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		
		PreparedStatement preparedStatement = null;
		String sql = null;
		try {
			
			sql = "delete from acl_inst where id= ? and siteId= ? ";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, aclInfo.getId());
			preparedStatement.setInt(2, aclInfo.getSiteId());
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
	}
	
	public List<AclInfo> queryOamLinkInfoByCondition(AclInfo info, Connection conn) throws Exception {
		if (info == null) {
			throw new Exception("AclInfo is null");
		}
		if (conn == null) {
			throw new Exception("conn is null");
		}
		StringBuffer sql = new StringBuffer();
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		AclInfo aclInfo = null;
		List<AclInfo> lists=null;
		
		try {
			lists=new ArrayList<AclInfo>();
			
			sql.append("select * from  acl_inst");
				sql.append(" where siteid = ?");
				sql.append(" and id = ?");
				
			preparedStatement = conn.prepareStatement(sql.toString());
			preparedStatement.setInt(1, info.getSiteId());
			preparedStatement.setInt(2, info.getId());
			
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				aclInfo = new AclInfo();
				aclInfo.setId(resultSet.getInt("id"));
				aclInfo.setSiteId(resultSet.getInt("siteid"));
				aclInfo.setAct(resultSet.getInt("act"));
				aclInfo.setDirection(resultSet.getInt("direction"));
				aclInfo.setPortNumber(resultSet.getInt("portNumber"));
				aclInfo.setVlanId(resultSet.getInt("vlanId"));
				aclInfo.setIsSourceMac(resultSet.getInt("isSourceMac"));
				aclInfo.setSourceMac(resultSet.getString("sourceMac"));
				aclInfo.setIsPurposeMac(resultSet.getInt("isPurposeMac"));
				aclInfo.setPurposeMac(resultSet.getString("purposeMac"));
				aclInfo.setIsSourceIp(resultSet.getInt("isSourceIp"));
				aclInfo.setSourceIp(resultSet.getString("sourceIp"));
				aclInfo.setIsPurposeIp(resultSet.getInt("isPurposeIp"));
				aclInfo.setPurposeIp(resultSet.getString("purposeIp"));
				aclInfo.setIsMatchCos(resultSet.getInt("isMatchCos"));
				aclInfo.setCosValue(resultSet.getInt("cosValue"));
				aclInfo.setIsMatchDSCP(resultSet.getInt("isMatchDSCP"));
				aclInfo.setDscpValue(resultSet.getInt("dscpValue"));
				aclInfo.setIsMatchTOS(resultSet.getInt("isMatchTOS"));
				aclInfo.setTosValue(resultSet.getInt("tosValue"));
				aclInfo.setIsSourcePort(resultSet.getInt("isSourcePort"));
				aclInfo.setSourcePort(resultSet.getInt("sourcePort"));
				aclInfo.setIsPurposePort(resultSet.getInt("isPurposePort"));
				aclInfo.setPurposePort(resultSet.getInt("purposePort"));
				aclInfo.setRuleObject(resultSet.getInt("ruleObject"));
				aclInfo.setTreatyType(resultSet.getInt("treatyType"));
				lists.add(aclInfo);

			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
			aclInfo = null;
		}

		return lists;
	}
	
	/**
	 * 删除所有的ACL 根据网元Id
	 * @param connection
	 * @throws Exception
	 */
	public void deleteAllBySiteId(int siteId,Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		String sql = null;
		try {
			sql = "delete from acl_inst where siteid = ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1,siteId);
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
	}
	/**
	 * 删除所有的ACL
	 * @param connection
	 * @throws Exception
	 */
	public void deleteAll(Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		String sql = null;
		try {
			sql = "delete from acl_inst ";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
	}
	//通过siteId进行删除
	public void deleteBySiteId(int siteId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		
		PreparedStatement preparedStatement = null;
		String sql = null;
		try {
			
			sql = "delete from acl_inst where  siteId= ? ";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
	}
}
