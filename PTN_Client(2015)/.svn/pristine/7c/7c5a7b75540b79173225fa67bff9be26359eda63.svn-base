package com.nms.db.dao.ptn.path.qinq;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.path.qinq.QinqInst;
import com.nms.ui.manager.DateUtil;
import com.nms.ui.manager.ExceptionManage;

public class QinqDao {

	public List<QinqInst> quertyWHNodeBySite(int siteId, Connection connection) {
		String sql = null;
		PreparedStatement preparedStatement = null;
		List<QinqInst> qinqList = null;
		try {
			// 查询出qinqchildinst表中asiteid或者zsiteid等于入参 并且对应的portid不等于0 如果port为0 说明是对端网元的标识
			sql = "SELECT * FROM qinqinst t WHERE (" +
					"qinqId IN (SELECT child.qinqId FROM qinqchildinst child " +
					"WHERE ( child.aSiteId = ? AND child.aPortId != 0 ) OR ( child.zSiteId = ? AND child.zPortId != 0 ))" +
					" ) OR " +
					"( qinqId IN ( SELECT child.qinqId FROM qinqchildinst child " +
					"WHERE ( child.aSiteId = ? AND child.aPortId != 0 AND child.aSiteId != t.aSiteId ) OR ( child.zSiteId = ? AND child.zPortId != 0 AND child.zSiteId != t.zSiteId )))";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			preparedStatement.setInt(2, siteId);
			preparedStatement.setInt(3, siteId);
			preparedStatement.setInt(4, siteId);
			qinqList = this.executeQuery(preparedStatement);

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return qinqList;
	}

	/**
	 * 执行查询方法
	 * 
	 * @param preparedStatement
	 * @return
	 * @throws Exception
	 */
	private List<QinqInst> executeQuery(PreparedStatement preparedStatement) throws Exception {

		ResultSet resultSet = null;
		List<QinqInst> qinqList = null;
		QinqInst qinq = null;
		try {
			qinqList = new ArrayList<QinqInst>();
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				qinq = new QinqInst();
				qinq.setQinqId(resultSet.getInt("qinqId"));
				qinq.setQinqName(resultSet.getString("qinqName"));
				qinq.setTpId(resultSet.getString("tpId"));
				qinq.setaSiteId(resultSet.getInt("aSiteId"));
				qinq.setzSiteId(resultSet.getInt("zSiteId"));
				qinq.setaPortId(resultSet.getInt("aPortId"));
				qinq.setzPortId(resultSet.getInt("zPortId"));
				qinq.setaAcPortId(resultSet.getInt("aAcPortId"));
				qinq.setzAcPortId(resultSet.getInt("zAcPortId"));
				qinq.setAcVlanIdRule(resultSet.getInt("acVlanIdRule"));
				qinq.setMinVlanId(resultSet.getInt("minVlanId"));
				qinq.setMaxVlanId(resultSet.getInt("maxVlanId"));
				qinq.setCreateTime(resultSet.getString("createTime"));
				qinq.setCreateUser(resultSet.getString("createUser"));
				qinq.setVlanId(resultSet.getInt("vlanId"));
				qinq.setQinqStatus(resultSet.getInt("qinqStatus"));
				qinq.setBasedInVlanId(resultSet.getInt("basedInVlanId"));
				qinqList.add(qinq);
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			qinq = null;
		}
		return qinqList;
	}
	
	public int insert(QinqInst qinqInst, Connection connection) throws Exception {
		if (null == qinqInst) {
			throw new Exception("qinqInst is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		ResultSet resultSet = null;

		try {
			sql = "insert into qinqinst(qinqName,tpId,aSiteId,zSiteId,aPortId,zPortId,aAcPortId,zAcPortId," +
					"acVlanIdRule,minVlanId,maxVlanId,createTime,createUser,vlanId,qinqStatus,basedInVlanId) " +
					"values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
			preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setString(1, qinqInst.getQinqName());
			preparedStatement.setString(2, qinqInst.getTpId());
			preparedStatement.setInt(3, qinqInst.getaSiteId());
			preparedStatement.setInt(4, qinqInst.getzSiteId());
			preparedStatement.setInt(5, qinqInst.getaPortId());
			preparedStatement.setInt(6, qinqInst.getzPortId());
			preparedStatement.setInt(7, qinqInst.getaAcPortId());
			preparedStatement.setInt(8, qinqInst.getzAcPortId());
			preparedStatement.setInt(9, qinqInst.getAcVlanIdRule());
			preparedStatement.setInt(10, qinqInst.getMinVlanId());
			preparedStatement.setInt(11, qinqInst.getMaxVlanId());
			preparedStatement.setString(12, DateUtil.getDate(DateUtil.FULLTIME));
			preparedStatement.setString(13, qinqInst.getCreateUser());
			preparedStatement.setInt(14, qinqInst.getVlanId());
			preparedStatement.setInt(15, qinqInst.getQinqStatus());
			preparedStatement.setInt(16, qinqInst.getBasedInVlanId());
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				result = resultSet.getInt(1);
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}

			sql = null;
		}

		return result;
	}

	public List<QinqInst> queryByCondition(QinqInst qinq, Connection connection) throws Exception {
		if (null == qinq) {
			throw new Exception("qinq is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<QinqInst> qinqList = null;
		String sql = null;
		PreparedStatement preparedStatement = null;

		try {
			qinqList = new ArrayList<QinqInst>();
			sql = "select * from qinqinst";
			preparedStatement = connection.prepareStatement(sql);
			qinqList = this.executeQuery_join(preparedStatement);

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return qinqList;
	}
	
	/**
	 * 执行查询方法
	 * 
	 * @param preparedStatement
	 * @return
	 * @throws Exception
	 */
	private List<QinqInst> executeQuery_join(PreparedStatement preparedStatement) throws Exception {

		ResultSet resultSet = null;
		List<QinqInst> qinqList = null;
		QinqInst qinq = null;
		try {
			qinqList = new ArrayList<QinqInst>();
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				qinq = new QinqInst();
				qinq.setQinqId(resultSet.getInt("qinqId"));
				qinq.setQinqName(resultSet.getString("qinqName"));
				qinq.setTpId(resultSet.getString("tpId"));
				qinq.setaSiteId(resultSet.getInt("aSiteId"));
				qinq.setzSiteId(resultSet.getInt("zSiteId"));
				qinq.setaPortId(resultSet.getInt("aPortId"));
				qinq.setzPortId(resultSet.getInt("zPortId"));
				qinq.setaAcPortId(resultSet.getInt("aAcPortId"));
				qinq.setzAcPortId(resultSet.getInt("zAcPortId"));
				qinq.setAcVlanIdRule(resultSet.getInt("acVlanIdRule"));
				qinq.setMinVlanId(resultSet.getInt("minVlanId"));
				qinq.setMaxVlanId(resultSet.getInt("maxVlanId"));
				qinq.setCreateTime(resultSet.getString("createTime"));
				qinq.setCreateUser(resultSet.getString("createUser"));
				qinq.setVlanId(resultSet.getInt("vlanId"));
				qinq.setQinqStatus(resultSet.getInt("qinqStatus"));
				qinq.setBasedInVlanId(resultSet.getInt("basedInVlanId"));
				qinqList.add(qinq);
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			qinq = null;
		}
		return qinqList;
	}

	/**
	 * 批量修改状态
	 * 
	 * @param idList
	 *            id集合
	 * @param beforeStatus
	 *            原状态
	 * @param afterStatus
	 *            修改状态
	 * @param connection
	 *            数据库连接
	 * @throws Exception
	 */
	public void updateStatus(List<Integer> idList, int beforeStatus, int afterStatus, Connection connection) throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		String ids = null;
		PreparedStatement preparedStatement = null;
		try {
			ids = idList.toString();
			sql = "update qinqinst set qinqStatus=? where qinqStatus=? and qinqId in (" + ids.subSequence(1, ids.length() - 1) + ")";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, afterStatus);
			preparedStatement.setInt(2, beforeStatus);

			preparedStatement.executeUpdate();

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
			ids = null;
		}

	}


	/**
	 * 通过主键删除qinq
	 * 
	 * @param qinqId
	 *            主键
	 * @param connection
	 *            数据库连接
	 * @return 删除的记录数
	 * @throws Exception 
	 * @throws Exception
	 */
	public int delete(int qinqId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "delete from qinqinst where qinqId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, qinqId);

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 通过portId和siteId查询qinq
	 * @param siteId
	 * @param portId
	 * @param connection
	 * @return
	 * @throws Exception 
	 * @throws Exception
	 */
	public List<QinqInst> queryByPortIdAndSiteId(int siteId, int portId,Connection connection) throws Exception {
		if (connection == null) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		List<QinqInst> qinqList = null;
		try {
			sql = "select * from qinqinst q where q.qinqId in (select c.qinqId from qinqchildinst c where c.qinqId in ( select lag.qinqId from qinqchildinst lag where (lag.aSiteId=? and lag.aPortId =?) OR (lag.zSiteId=? and lag.zPortId =?)))";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			preparedStatement.setInt(2, portId);
			preparedStatement.setInt(3, siteId);
			preparedStatement.setInt(4, portId);
			qinqList = this.executeQuery(preparedStatement);

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return qinqList;
	}

	public List<QinqInst> selectByPortIdAndSiteIdAndUni(int siteId, int portId,Connection connection) throws Exception {
		if (connection == null) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		List<QinqInst> qinqList = null;
		try {
			sql = "select * from qinqinst q where (q.aAcPortId=? and q.aSiteId=?) or (q.zAcPortId=? and q.zSiteId=?)";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, portId);
			preparedStatement.setInt(2, siteId);
			preparedStatement.setInt(3, portId);
			preparedStatement.setInt(4, siteId);
			qinqList = this.executeQuery(preparedStatement);

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return qinqList;
	}

	public List<QinqInst> queryByCondition_nojoin(QinqInst beforeQinq,
			Connection connection) throws Exception {

		if (null == beforeQinq) {
			throw new Exception("beforeQinq is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<QinqInst> qinqList = null;
		String sql = null;
		PreparedStatement preparedStatement = null;

		try {
			qinqList = new ArrayList<QinqInst>();
			sql = "SELECT * from qinqinst t where 1=1";

			if (beforeQinq.getQinqId() > 0) {
				sql += " and t.qinqId=" + beforeQinq.getQinqId();
			}
			if (beforeQinq.getaSiteId() != 0) {
				sql += " and t.aSiteId=" + beforeQinq.getaSiteId();
			}
			if (beforeQinq.getzSiteId() != 0) {
				sql += " and t.zSiteId=" + beforeQinq.getzSiteId();
			}
			if (beforeQinq.getQinqStatus() != 0) {
				sql += " and t.qinqStatus=" + beforeQinq.getQinqStatus();
			}
			if (beforeQinq.getaPortId() != 0) {
				sql += " and t.aPortId=" + beforeQinq.getaPortId();
			}
			if (beforeQinq.getzPortId() != 0) {
				sql += " and t.zPortId=" + beforeQinq.getzPortId();
			}

			preparedStatement = connection.prepareStatement(sql);
			qinqList = this.executeQuery(preparedStatement);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return qinqList;
	}

	public int update(QinqInst qinqInst, Connection connection) throws Exception {
		if (null == qinqInst) {
			throw new Exception("qinqInst is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		try {
			sql = "update qinqinst set qinqName=?,tpId=?,aSiteId=?,zSiteId=? ,aPortId = ?,zPortId = ?,aAcPortId = ?,zAcPortId = ?," +
					" acVlanIdRule =? , minVlanId = ? , maxVlanId=? , createTime=? , createUser=?,vlanId=?,qinqStatus=?,basedInVlanId=?" +
					" where qinqId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, qinqInst.getQinqName());
			preparedStatement.setString(2, qinqInst.getTpId());
			preparedStatement.setInt(3, qinqInst.getaSiteId());
			preparedStatement.setInt(4, qinqInst.getzSiteId());
			preparedStatement.setInt(5, qinqInst.getaPortId());
			preparedStatement.setInt(6, qinqInst.getzPortId());
			preparedStatement.setInt(7, qinqInst.getaAcPortId());
			preparedStatement.setInt(8, qinqInst.getzAcPortId());
			preparedStatement.setInt(9, qinqInst.getAcVlanIdRule());
			preparedStatement.setInt(10, qinqInst.getMinVlanId());
			preparedStatement.setInt(11, qinqInst.getMaxVlanId());
			preparedStatement.setString(12, qinqInst.getCreateTime());
			preparedStatement.setString(13, qinqInst.getCreateUser());
			preparedStatement.setInt(14, qinqInst.getVlanId());
			preparedStatement.setInt(15, qinqInst.getQinqStatus());
			preparedStatement.setInt(16, qinqInst.getBasedInVlanId());
			preparedStatement.setInt(17, qinqInst.getQinqId());
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	public int query_name(String afterName, String beforeName, Connection connection) throws Exception {
		if (null == afterName) {
			throw new Exception("afterName is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		List<Object> paramList = new ArrayList<Object>();
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		try {
			sql = "select count(*) as selectcount from qinqinst where qinqName=?";
			paramList.add(afterName);
			if (null != beforeName) {
				sql += " and qinqName!=?";
				paramList.add(beforeName);
			}
			preparedStatement = connection.prepareStatement(sql);
			for (int i = 0; i < paramList.size(); i++) {
				preparedStatement.setObject(i + 1, paramList.get(i));
			}
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				result = resultSet.getInt("selectcount");
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			paramList = null;
			sql = null;
		}

		return result;
	}
	
	public List<QinqInst> selectBySiteId(int siteId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		List<QinqInst> qinqList = null;
		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			qinqList = new ArrayList<QinqInst>();
			sql = "SELECT * from qinqinst t where t.aSiteId = "+siteId+" or t.zSiteId = "+siteId;
			preparedStatement = connection.prepareStatement(sql);
			qinqList = this.executeQuery(preparedStatement);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return qinqList;
	}
	
	public QinqInst queryByQinqId(int qinqId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		QinqInst qinq = new QinqInst();
		String sql = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		try {			
			sql = "SELECT * from qinqinst t where t.qinqId = "+qinqId;
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				qinq.setQinqId(resultSet.getInt("qinqId"));
				qinq.setQinqName(resultSet.getString("qinqName"));
				qinq.setTpId(resultSet.getString("tpId"));
				qinq.setaSiteId(resultSet.getInt("aSiteId"));
				qinq.setzSiteId(resultSet.getInt("zSiteId"));
				qinq.setaPortId(resultSet.getInt("aPortId"));
				qinq.setzPortId(resultSet.getInt("zPortId"));
				qinq.setaAcPortId(resultSet.getInt("aAcPortId"));
				qinq.setzAcPortId(resultSet.getInt("zAcPortId"));
				qinq.setAcVlanIdRule(resultSet.getInt("acVlanIdRule"));
				qinq.setMinVlanId(resultSet.getInt("minVlanId"));
				qinq.setMaxVlanId(resultSet.getInt("maxVlanId"));
				qinq.setCreateTime(resultSet.getString("createTime"));
				qinq.setCreateUser(resultSet.getString("createUser"));
				qinq.setVlanId(resultSet.getInt("vlanId"));
				qinq.setQinqStatus(resultSet.getInt("qinqStatus"));
				qinq.setBasedInVlanId(resultSet.getInt("basedInVlanId"));
			
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return qinq;
	}
}
