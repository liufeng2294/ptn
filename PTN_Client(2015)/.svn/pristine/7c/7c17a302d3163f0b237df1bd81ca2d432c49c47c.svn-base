package com.nms.db.dao.ptn.port;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.port.PortLagInfo;
import com.nms.ui.manager.ExceptionManage;

public class PortLagDao {

	/**
	 * 插入Sql
	 */
	private final static String INSERTSQL = "insert into port_lag(siteId,lagId,lagModel ,portMember," + " portStatus,buffer ,mtu ,vlanRelevance, ip, sourceMAC,targetMAC , sourceIP " + ", targetIP,pw,dscp,exportQueue,portLimitation,broadcastBate,broadcastFlux,groupBroadcastBate," + "groupBroadcastFlux,floodBate,isUsed,maxFrameLength,vlanIC,vlanPriority,msgLoop,resumeModel," + "inportLimitation,meangerStatus,sMac,lblNetWrap,lblVlanTpId,lblouterTpid,lblNetVlanMode,statusActive,portId,type,role,ExpMappingLLspInput,ExpMappingLLspOutput,ExpMappingELspInput,ExpMappingELspOutput,mappingVlanpriToColor,mappingPriorityToVlanpri,lagStatus) values(?,?," + "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	/**
	 * 更新Sql
	 */
	private final static String UPDATESQL = "update port_lag set siteId=?,lagId=?,lagModel=? ,portMember=?," + " portStatus=?,buffer=? ,mtu=? ,vlanRelevance=?, ip=?, sourceMAC=?,targetMAC =?, sourceIP=? " + ", targetIP=?,pw=?,dscp=?,exportQueue=?,portLimitation=?,broadcastBate=?,broadcastFlux=?,groupBroadcastBate=?," + "groupBroadcastFlux=?,floodBate=? ,isUsed=? ,maxFrameLength=?,vlanIC=?,vlanPriority=?,msgLoop=?,resumeModel=?," + "inportLimitation=?,meangerStatus=?,sMac=?,lblNetWrap=?,lblVlanTpId=?,lblouterTpid=?,lblNetVlanMode=? ,statusActive=? " + ",portId=? ,type=?,admin=? ,ExpMappingLLspInput=?,ExpMappingLLspOutput=?,ExpMappingELspInput=?,ExpMappingELspOutput=? ,mappingVlanpriToColor=?,mappingPriorityToVlanpri=? ,lagStatus = ? where Id=?";

	/**
	 * 查询Sql
	 */
	private final static String SELECTSQL = "SELECT * FROM port_lag WHERE 1=1";

	/**
	 * 删除Sql
	 */
	private final static String DELETE = "delete from port_lag where id=?";
	private final static String SELECTBYNEID = "select * from port_lag where siteId = ?";

	/**
	 * 新建
	 * @param portLagInfo
	 * 				LAG
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int insert(PortLagInfo portLagInfo, Connection connection) throws Exception {
		if (null == portLagInfo) {
			throw new Exception("portLagInfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		ResultSet resultSet = null;

		try {

			sql = INSERTSQL;
			preparedStatement = connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, portLagInfo.getSiteId());
			preparedStatement.setInt(2, portLagInfo.getLagID());
			preparedStatement.setInt(3, portLagInfo.getLagMode());
			preparedStatement.setString(4, portLagInfo.getPortLagMember());
			preparedStatement.setInt(5, portLagInfo.getPortEnable());
			preparedStatement.setInt(6, portLagInfo.getFlowControl());
			preparedStatement.setInt(7, portLagInfo.getMtu());
			preparedStatement.setInt(8, portLagInfo.getVlanRelating());
			preparedStatement.setInt(9, portLagInfo.getRelatingSet());
			preparedStatement.setInt(10, portLagInfo.getFountainMAC());
			preparedStatement.setInt(11, portLagInfo.getAimMAC());
			preparedStatement.setInt(12, portLagInfo.getFountainIP());
			preparedStatement.setInt(13, portLagInfo.getAimIP());
			preparedStatement.setInt(14, portLagInfo.getPwSet());
			preparedStatement.setInt(15, portLagInfo.getIpDSCPSet());
			preparedStatement.setString(16, portLagInfo.getExportQueue());
			preparedStatement.setInt(17, portLagInfo.getPortLimitation());
			preparedStatement.setInt(18, portLagInfo.getBroadcastBate());
			preparedStatement.setInt(19, portLagInfo.getBroadcastFlux());
			preparedStatement.setInt(20, portLagInfo.getGroupBroadcastBate());
			preparedStatement.setInt(21, portLagInfo.getGroupBroadcastFlux());
			preparedStatement.setInt(22, portLagInfo.getFloodBate());
			preparedStatement.setInt(23, portLagInfo.getIsUsed());
			preparedStatement.setInt(24, portLagInfo.getMaxFrameLength());
			preparedStatement.setInt(25, portLagInfo.getVlanIC());
			preparedStatement.setInt(26, portLagInfo.getVlanPriority());
			preparedStatement.setInt(27, portLagInfo.getMsgLoop());
			preparedStatement.setInt(28, portLagInfo.getResumeModel());
			preparedStatement.setInt(29, portLagInfo.getInportLimitation());
			preparedStatement.setInt(30, portLagInfo.getMeangerStatus());
			preparedStatement.setString(31, portLagInfo.getsMac());
			preparedStatement.setInt(32, portLagInfo.getLblNetWrap());
			preparedStatement.setInt(33, portLagInfo.getLblVlanTpId());
			preparedStatement.setInt(34, portLagInfo.getLblouterTpid());
			preparedStatement.setInt(35, portLagInfo.getLblNetVlanMode());
			preparedStatement.setInt(36, portLagInfo.getStatusActive());
			preparedStatement.setInt(37, portLagInfo.getPortId());
			preparedStatement.setInt(38, portLagInfo.getType());
			preparedStatement.setString(39, portLagInfo.getRole());
			preparedStatement.setInt(40, portLagInfo.getExpMappingLLspInput());
			preparedStatement.setInt(41, portLagInfo.getExpMappingLLspOutput());
			preparedStatement.setInt(42, portLagInfo.getExpMappingELspInput());
			preparedStatement.setInt(43, portLagInfo.getExpMappingELspOutput());
			preparedStatement.setInt(44, portLagInfo.getMappingVlanpriToColor());
			preparedStatement.setInt(45, portLagInfo.getMappingPriorityToVlanpri());
			preparedStatement.setInt(46, portLagInfo.getLagStatus());
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			while (resultSet.next()) {
				result = resultSet.getInt(1);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if(null!=resultSet){
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}

			sql = null;
		}

		return result;
	}

	/**
	 * 修改
	 * @param portLagInfo
	 * 				LAG
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int update(PortLagInfo portLagInfo, Connection connection) throws Exception {
		if (null == portLagInfo) {
			throw new Exception("portLagInfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = UPDATESQL;
			preparedStatement = connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, portLagInfo.getSiteId());
			preparedStatement.setInt(2, portLagInfo.getLagID());
			preparedStatement.setInt(3, portLagInfo.getLagMode());
			preparedStatement.setString(4, portLagInfo.getPortLagMember());
			preparedStatement.setInt(5, portLagInfo.getPortEnable());
			preparedStatement.setInt(6, portLagInfo.getFlowControl());
			preparedStatement.setInt(7, portLagInfo.getMtu());
			preparedStatement.setInt(8, portLagInfo.getVlanRelating());
			preparedStatement.setInt(9, portLagInfo.getRelatingSet());
			preparedStatement.setInt(10, portLagInfo.getFountainMAC());
			preparedStatement.setInt(11, portLagInfo.getAimMAC());
			preparedStatement.setInt(12, portLagInfo.getFountainIP());
			preparedStatement.setInt(13, portLagInfo.getAimIP());
			preparedStatement.setInt(14, portLagInfo.getPwSet());
			preparedStatement.setInt(15, portLagInfo.getIpDSCPSet());
			preparedStatement.setString(16, portLagInfo.getExportQueue());
			preparedStatement.setInt(17, portLagInfo.getPortLimitation());
			preparedStatement.setInt(18, portLagInfo.getBroadcastBate());
			preparedStatement.setInt(19, portLagInfo.getBroadcastFlux());
			preparedStatement.setInt(20, portLagInfo.getGroupBroadcastBate());
			preparedStatement.setInt(21, portLagInfo.getGroupBroadcastFlux());
			preparedStatement.setInt(22, portLagInfo.getFloodBate());
			preparedStatement.setInt(23, portLagInfo.getIsUsed());
			preparedStatement.setInt(24, portLagInfo.getMaxFrameLength());
			preparedStatement.setInt(25, portLagInfo.getVlanIC());
			preparedStatement.setInt(26, portLagInfo.getVlanPriority());
			preparedStatement.setInt(27, portLagInfo.getMsgLoop());
			preparedStatement.setInt(28, portLagInfo.getResumeModel());
			preparedStatement.setInt(29, portLagInfo.getInportLimitation());
			preparedStatement.setInt(30, portLagInfo.getMeangerStatus());
			preparedStatement.setString(31, portLagInfo.getsMac());
			preparedStatement.setInt(32, portLagInfo.getLblNetWrap());
			preparedStatement.setInt(33, portLagInfo.getLblVlanTpId());
			preparedStatement.setInt(34, portLagInfo.getLblouterTpid());
			preparedStatement.setInt(35, portLagInfo.getLblNetVlanMode());
			preparedStatement.setInt(36, portLagInfo.getStatusActive());
			preparedStatement.setInt(37, portLagInfo.getPortId());
			preparedStatement.setInt(38, portLagInfo.getType());
			preparedStatement.setString(39, portLagInfo.getAdmin());
			preparedStatement.setInt(40, portLagInfo.getExpMappingLLspInput());
			preparedStatement.setInt(41, portLagInfo.getExpMappingLLspOutput());
			preparedStatement.setInt(42, portLagInfo.getExpMappingELspInput());
			preparedStatement.setInt(43, portLagInfo.getExpMappingELspOutput());
			preparedStatement.setInt(44, portLagInfo.getMappingVlanpriToColor());
			preparedStatement.setInt(45, portLagInfo.getMappingPriorityToVlanpri());
			preparedStatement.setInt(46, portLagInfo.getLagStatus());
			preparedStatement.setInt(47, portLagInfo.getId());
			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 条件查询
	 * @param portLagInfo
	 * 				LAG
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<PortLagInfo> queryByCondition(PortLagInfo portLagInfo, Connection connection) throws Exception {
		if (null == portLagInfo) {
			throw new Exception("portLagInfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;

		try {

			sql = SELECTSQL;
			if (portLagInfo.getId() > 0) {
				sql += " and Id=" + portLagInfo.getId();
			}
			if (portLagInfo.getSiteId() > 0) {
				sql += " and siteId=" + portLagInfo.getSiteId();
			}
			if (portLagInfo.getLagID() > 0) {
				sql += " and lagId=" + portLagInfo.getLagID();
			}
			if (portLagInfo.getPortId() > 0) {
				sql += " and portId=" + portLagInfo.getPortId();
			}
			if (portLagInfo.getLagStatus() > 0) {
				sql += " and LagStatus=" + portLagInfo.getLagStatus();
			}
			sql += " and type=1";
			return this.excuteQuery(connection, sql);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
	}

	/**
	 * 执行查询语句
	 * 
	 * @param connection
	 *            数据库连接
	 * @param sql
	 *            sql语句
	 * @return 查询集合
	 * @throws Exception
	 */
	private List<PortLagInfo> excuteQuery(Connection connection, String sql) throws Exception {
		List<PortLagInfo> portLagInfoList = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		PortLagInfo portLagInfo = null;
		try {
			portLagInfoList = new ArrayList<PortLagInfo>();
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				portLagInfo = new PortLagInfo();
				portLagInfo.setId(resultSet.getInt("id"));
				portLagInfo.setSiteId(resultSet.getInt("siteId"));
				portLagInfo.setLagID(resultSet.getInt("lagId"));
				portLagInfo.setLagMode(resultSet.getInt("lagModel"));
				portLagInfo.setPortLagMember(resultSet.getString("portMember"));
				portLagInfo.setPortEnable(resultSet.getInt("portStatus"));
				portLagInfo.setFlowControl(resultSet.getInt("buffer"));
				portLagInfo.setMtu(resultSet.getInt("mtu"));
				portLagInfo.setVlanRelating(resultSet.getInt("vlanRelevance"));
				portLagInfo.setRelatingSet(resultSet.getInt("ip"));
				portLagInfo.setFountainMAC(resultSet.getInt("sourceMAC"));
				portLagInfo.setAimMAC(resultSet.getInt("targetMAC"));
				portLagInfo.setFountainIP(resultSet.getInt("sourceIP"));
				portLagInfo.setAimIP(resultSet.getInt("targetIP"));
				portLagInfo.setPwSet(resultSet.getInt("pw"));
				portLagInfo.setIpDSCPSet(resultSet.getInt("dscp"));
				portLagInfo.setExportQueue(resultSet.getString("exportQueue"));
				portLagInfo.setPortLimitation(resultSet.getInt("portLimitation"));
				portLagInfo.setBroadcastBate(resultSet.getInt("broadcastBate"));
				portLagInfo.setBroadcastFlux(resultSet.getInt("broadcastFlux"));
				portLagInfo.setGroupBroadcastBate(resultSet.getInt("groupBroadcastBate"));
				portLagInfo.setGroupBroadcastFlux(resultSet.getInt("groupBroadcastFlux"));
				portLagInfo.setFloodBate(resultSet.getInt("floodBate"));
				portLagInfo.setIsUsed(resultSet.getInt("isUsed"));
				portLagInfo.setMaxFrameLength(resultSet.getInt("maxFrameLength"));
				portLagInfo.setVlanIC(resultSet.getInt("vlanIC"));
				portLagInfo.setVlanPriority(resultSet.getInt("vlanPriority"));
				portLagInfo.setMsgLoop(resultSet.getInt("msgLoop"));
				portLagInfo.setResumeModel(resultSet.getInt("resumeModel"));
				portLagInfo.setInportLimitation(resultSet.getInt("inportLimitation"));
				portLagInfo.setMeangerStatus(resultSet.getInt("meangerStatus"));
				portLagInfo.setsMac(resultSet.getString("sMac"));
				portLagInfo.setLblNetWrap(resultSet.getInt("lblNetWrap"));
				portLagInfo.setLblVlanTpId(resultSet.getInt("lblVlanTpId"));
				portLagInfo.setLblouterTpid(resultSet.getInt("lblouterTpid"));
				portLagInfo.setLblNetVlanMode(resultSet.getInt("lblNetVlanMode"));
				portLagInfo.setStatusActive(resultSet.getInt("statusActive"));
				portLagInfo.setPortId(resultSet.getInt("portId"));
				portLagInfo.setType(resultSet.getInt("type"));
				portLagInfo.setRole(resultSet.getString("role"));
				portLagInfo.setExpMappingLLspInput(resultSet.getInt("expMappingLLspInput"));
				portLagInfo.setExpMappingLLspOutput(resultSet.getInt("expMappingLLspOutput"));
				portLagInfo.setExpMappingELspInput(resultSet.getInt("expMappingELspInput"));
				portLagInfo.setExpMappingELspOutput(resultSet.getInt("expMappingELspOutput"));
				portLagInfo.setMappingVlanpriToColor(resultSet.getInt("MappingVlanpriToColor"));
				portLagInfo.setMappingPriorityToVlanpri(resultSet.getInt("MappingPriorityToVlanpri"));
				portLagInfo.setLagStatus(resultSet.getInt("lagStatus"));
				portLagInfoList.add(portLagInfo);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			portLagInfo = null;
		}

		return portLagInfoList;
	}

	/**
	 * 删除
	 * @param id
	 * 			ID
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int delete(int id, Connection connection) throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}

		PreparedStatement preparedStatement = null;
		int result = 0;

		try {

			preparedStatement = connection.prepareStatement(DELETE);
			preparedStatement.setInt(1, id);

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
		}
		return result;
	}

	/**
	 * 查询网元下的LAG数量
	 * @param NeId
	 * @param connection
	 * @return
	 * @throws SQLException
	 */
	public int selectCountByNeId(int NeId, Connection connection) throws SQLException {
		PreparedStatement preparedStatement = null;
		int result = 0;
		ResultSet resultSet = null;
		try {
			preparedStatement = connection.prepareStatement(SELECTBYNEID);
			preparedStatement.setInt(1, NeId);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				result++;
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally{
			if(null!=resultSet){
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
	}

	/**
	 * 条件查询
	 * @param portLagInfo
	 * 				Lag
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<PortLagInfo> queryLagByCondition(PortLagInfo portLagInfo, Connection connection) throws Exception {
		if (null == portLagInfo) {
			throw new Exception("portLagInfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;

		try {

			sql = SELECTSQL;
			if (portLagInfo.getId() > 0) {
				sql += " and Id=" + portLagInfo.getId();
			}
			if (portLagInfo.getSiteId() > 0) {
				sql += " and siteId=" + portLagInfo.getSiteId();
			}
			if (portLagInfo.getLagID() > 0) {
				sql += " and lagId=" + portLagInfo.getLagID();
			}
			if (portLagInfo.getPortId() > 0) {
				sql += " and portId=" + portLagInfo.getPortId();
			}
			if (portLagInfo.getLagStatus() > 0) {
				sql += " and LagStatus=" + portLagInfo.getLagStatus();
			}
			sql += " and type=" + 1;
			return this.excuteQuery(connection, sql);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			sql = null;
		}
		return null;
	}
	
	/**
	 * 通过网元id删除lag，初始化网元用
	 * @param siteId
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int deleteBysiteId(int siteId, Connection connection) throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}

		PreparedStatement preparedStatement = null;
		int result = 0;
		String sql = "delete from port_lag where siteId=?";
		try {

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
		}
		return result;
	}

	public int updateActiveStatus(int siteId, int value, Connection connection) throws Exception {
		if (0 == siteId) {
			throw new Exception("portLagInfo is 0");
		}

		if (0 == value) {
			throw new Exception("value is 0");
		}
		
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "update port_lag set lagstatus = ? where siteId = ? ";
			preparedStatement = connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, value);
			preparedStatement.setInt(2, siteId);
			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 同步中搜索lag
	 * @param portLagInfo
	 * 				LAG
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<PortLagInfo> selectByConditionForSynchro(PortLagInfo portLagInfo, Connection connection) throws Exception {
		if (null == portLagInfo) {
			throw new Exception("portLagInfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;

		try {

			sql = SELECTSQL;
			if (portLagInfo.getId() > 0) {
				sql += " and Id=" + portLagInfo.getId();
			}
			if (portLagInfo.getSiteId() > 0) {
				sql += " and siteId=" + portLagInfo.getSiteId();
			}
			if (portLagInfo.getLagID() > 0) {
				sql += " and lagId=" + portLagInfo.getLagID();
			}
			if (portLagInfo.getPortId() > 0) {
				sql += " and portId=" + portLagInfo.getPortId();
			}
			sql += " and type=1";
			return this.excuteQuery(connection, sql);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
	}
}
