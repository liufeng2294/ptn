package com.nms.db.dao.ptn.port;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.path.protect.DualProtect;
import com.nms.ui.manager.ExceptionManage;

public class DualProtectDao {
	/**
	 * 查询语句
	 */
	private final String SELECT_SQL = "select * from dualprotect where 1=1 "; 
	
	/**
	 * 修改设备激活状态
	 */
	private final String UPDATEACTIVESTATUS = "update dualprotect set dualStatus = ? where siteid = ?";
	
	/**
	 * 通过条件查询
	 * @param dualProtect   dualProtect类 （条件）
	 * @param connection connection
	 * @return dualProtect集合
	 * @throws Exception 
	 */
	public List<DualProtect> queryByCondition(DualProtect dualProtect,Connection connection) throws Exception {
		if (null == dualProtect) {
			throw new Exception("dualProtect is null");
		}
		if (null == connection) {
			throw new Exception("conection is null");
		}

		PreparedStatement preparedStatement = null;
		StringBuffer stringBuffer = null; // sql语句
		List<Object> paramList = null; // 查询参数集合
		List<DualProtect> dualProtectList = null;
		try {
			paramList = new ArrayList<Object>();
			stringBuffer = new StringBuffer(this.SELECT_SQL);

			// 根据条件拼接sql语句
			if (dualProtect.getId() > 0) {
				stringBuffer.append(" and id=?");
				paramList.add(dualProtect.getId());
			}
			if (dualProtect.getSiteId() > 0) {
				stringBuffer.append(" and siteId=?");
				paramList.add(dualProtect.getSiteId());
			}

			preparedStatement = connection.prepareStatement(stringBuffer.toString());
			// 添加参数
			if (paramList.size() > 0) {
				for (int i = 0; i < paramList.size(); i++) {
					preparedStatement.setObject(i + 1, paramList.get(i));
				}
			}
			dualProtectList = this.executeQuery(preparedStatement);

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			stringBuffer = null; // sql语句
			paramList = null; // 查询参数集合
		}
		return dualProtectList;
	}
	/**
	 * 执行sql语句 返回结果集
	 * 
	 * @param preparedStatement
	 * @return
	 * @throws Exception
	 */
	private List<DualProtect> executeQuery(PreparedStatement preparedStatement) throws Exception {

		if (null == preparedStatement) {
			throw new Exception("preparedStatement is null");
		}
		ResultSet resultSet = null;
		List<DualProtect> dualProtectList = null;
		DualProtect dualProtect = null;
		try {
			dualProtectList = new ArrayList<DualProtect>();
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				dualProtect = new DualProtect();
				dualProtect.setId(resultSet.getInt("id"));
				dualProtect.setProtectType(resultSet.getInt("protectType"));
				dualProtect.setRegainModel(resultSet.getInt("regainModel"));
				dualProtect.setApsEnable(resultSet.getInt("apsEnable"));
				dualProtect.setRole(resultSet.getInt("role"));
				dualProtect.setWaitTime(resultSet.getInt("waitTime"));
				dualProtect.setLagId(resultSet.getInt("lagId"));
				dualProtect.setRotateWay(resultSet.getInt("rotateWay"));
				dualProtect.setDualRelevanceGroupId(resultSet.getInt("dualRelevanceGroupId"));
				dualProtect.setSiteId(resultSet.getInt("siteId"));
				dualProtect.setBusinessId(resultSet.getInt("businessId"));
				dualProtect.setActiveStatus(resultSet.getInt("dualStatus"));
				dualProtectList.add(dualProtect);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if(null!=resultSet){
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			dualProtect = null;
		}
		return dualProtectList;
	}
	
	/**
	 * 添加方法
	 * @param dualProtect 双规保护对象
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int save(DualProtect dualProtect, Connection connection) throws Exception {
		if (null == dualProtect) {
			throw new Exception("dualProtect is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		ResultSet resultSet = null;
		try {
			sql = "insert into dualprotect(protectType,regainModel,apsEnable,waitTime,lagId,rotateWay,dualRelevanceGroupId,role,siteId,businessId,dualStatus) values(?,?,?,?,?,?,?,?,?,?,?)";
			preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, dualProtect.getProtectType());
			preparedStatement.setInt(2, dualProtect.getRegainModel());
			preparedStatement.setInt(3, dualProtect.getApsEnable());
			preparedStatement.setInt(4, dualProtect.getWaitTime());
			preparedStatement.setInt(5, dualProtect.getLagId());
			preparedStatement.setInt(6, dualProtect.getRotateWay());
			preparedStatement.setInt(7, dualProtect.getDualRelevanceGroupId());
			preparedStatement.setInt(8, dualProtect.getRole());
			preparedStatement.setInt(9, dualProtect.getSiteId());
			preparedStatement.setInt(10, dualProtect.getBusinessId());
			preparedStatement.setInt(11, dualProtect.getActiveStatus());
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				result = resultSet.getInt(1);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if(null!=resultSet){
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}
	/**
	 * 修改
	 * @param dualProtect 双规保护对象
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int update(DualProtect dualProtect, Connection connection) throws Exception {
		if (null == dualProtect) {
			throw new Exception("dualProtect is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		try {
			sql = "update dualProtect set protectType=?,regainModel=?,apsEnable=?,waitTime=?,lagId=?,rotateWay=?,dualRelevanceGroupId=?,role=?,siteId=? ,businessId=? ,dualStatus=? where id=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, dualProtect.getProtectType());
			preparedStatement.setInt(2, dualProtect.getRegainModel());
			preparedStatement.setInt(3, dualProtect.getApsEnable());
			preparedStatement.setInt(4, dualProtect.getWaitTime());
			preparedStatement.setInt(5, dualProtect.getLagId());
			preparedStatement.setInt(6, dualProtect.getRotateWay());
			preparedStatement.setInt(7, dualProtect.getDualRelevanceGroupId());
			preparedStatement.setInt(8, dualProtect.getRole());
			preparedStatement.setInt(9, dualProtect.getSiteId());
			preparedStatement.setInt(10, dualProtect.getBusinessId());
			preparedStatement.setInt(11, dualProtect.getActiveStatus());
			preparedStatement.setInt(12, dualProtect.getId());
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}
	/**
	 * 删除方法
	 * @param dualProtect  
	 *                   	双规保护对象
	 * @param connection  
	 * @return
	 * @throws Exception
	 */
	public int delete(DualProtect dualProtect, Connection connection) throws Exception {
		if (null == dualProtect) {
			throw new Exception("dualProtect is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "delete from dualprotect where 1=1 ";
			if(0!=dualProtect.getId()){
				sql += " and id = ?";
			}
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, dualProtect.getId());

			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}
	
	/**
	 * 修改状态（设备是否存在）
	 * @param siteId 
	 * 				网元ID
	 * @param status
	 * 				状态值
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int updateActiveStatus(int siteId, int status,
			Connection connection) throws Exception {
		if (0 == siteId) {
			throw new Exception("siteId is 0");
		}
		if (0 == status) {
			throw new Exception("status is 0");
		}
		if (null == connection) {
			throw new Exception("conection is null");
		}

		PreparedStatement preparedStatement = null;
		int result = 0;
		try {
			preparedStatement = connection.prepareStatement(this.UPDATEACTIVESTATUS);
			preparedStatement.setInt(1, status);
			preparedStatement.setInt(2, siteId);
			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
		
	}
	
	/**
	 * 同步查询
	 * @param dualProtect   dualProtect类 （条件）
	 * @param connection connection
	 * @return dualProtect集合
	 * @throws Exception 
	 */
	public List<DualProtect> queryByConditionForSynchro(DualProtect dualProtect,Connection connection) throws Exception {
		if (null == dualProtect) {
			throw new Exception("dualProtect is null");
		}
		if (null == connection) {
			throw new Exception("conection is null");
		}

		PreparedStatement preparedStatement = null;
		StringBuffer stringBuffer = null; // sql语句
		List<Object> paramList = null; // 查询参数集合
		List<DualProtect> dualProtectList = null;
		try {
			paramList = new ArrayList<Object>();
			stringBuffer = new StringBuffer(this.SELECT_SQL);

			// 根据条件拼接sql语句
			if (dualProtect.getId() > 0) {
				stringBuffer.append(" and id=?");
				paramList.add(dualProtect.getId());
			}
			if (dualProtect.getSiteId() > 0) {
				stringBuffer.append(" and siteId=?");
				paramList.add(dualProtect.getSiteId());
			}

			preparedStatement = connection.prepareStatement(stringBuffer.toString());
			// 添加参数
			if (paramList.size() > 0) {
				for (int i = 0; i < paramList.size(); i++) {
					preparedStatement.setObject(i + 1, paramList.get(i));
				}
			}
			dualProtectList = this.executeQuery(preparedStatement);

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			stringBuffer = null; // sql语句
			paramList = null; // 查询参数集合
		}
		return dualProtectList;
	}
	
}
