package com.nms.model.ptn.clock;

import java.sql.Connection;
import java.util.List;

import com.nms.db.bean.ptn.clock.FrequencyInfo;
import com.nms.db.dao.ptn.clock.ClockFrequDao;
import com.nms.model.util.ObjectService;
import com.nms.ui.manager.ExceptionManage;

public class ClockFrequService extends ObjectService {

	public void setConnection(Connection connection) {
			super.connection = connection;	
	}

	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}
 
	private ClockFrequDao clockDao = new ClockFrequDao();
	/**
	 * 修改 时钟
	 * @param info
	 * @throws Exception
	 */
	public void update(FrequencyInfo info) throws Exception {
		try {
			connection.setAutoCommit(false);
			this.clockDao.update(info, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}

	}
	/**
	 * 根据网元Id 查询 
	 * @param siteId
	 * @return FrequencyInfo List
	 * @throws Exception
	 */
	public List<FrequencyInfo> query(int siteId) throws Exception {
		List<FrequencyInfo> infoList = null;
		try {
			infoList = this.clockDao.queryByCondition(siteId, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return  infoList;
	}
	/**
	 * 添加
	 * @return 
	 */
	public int insert(FrequencyInfo info) throws Exception {

		if (connection == null) {
			System.out.println("connection is null");
		}

		int result = 0;

		try {
			connection.setAutoCommit(false);

			result = this.clockDao.insert(info, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
		return result;
	}
	
	public void delete(int siteId) throws Exception {

		if (connection == null) {
			System.out.println("connection is null");
		}

		try {
			connection.setAutoCommit(false);

			this.clockDao.delete(siteId, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
	}
	
	public static void main(String[] args) {
		
	}
}
