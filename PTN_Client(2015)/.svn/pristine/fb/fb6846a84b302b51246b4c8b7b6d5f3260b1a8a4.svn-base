package com.nms.model.perform;



import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.SqlSession;

import com.nms.db.bean.equipment.shelf.SiteInst;
import com.nms.db.bean.perform.Capability;
import com.nms.db.bean.perform.HisPerformanceInfo;
import com.nms.db.dao.perform.HisPerformanceInfoMapper;
import com.nms.db.enums.EMonitorCycle;
import com.nms.model.equipment.shlef.SiteService;
import com.nms.model.equipment.shlef.SiteService_MB;
import com.nms.model.util.ObjectService_Mybatis;
import com.nms.model.util.Services;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.DateUtil;
import com.nms.ui.manager.ExceptionManage;
import com.nms.ui.manager.UiUtil;
import com.nms.ui.ptn.performance.model.HisPerformanceFilter;


public class HisPerformanceService_Mb extends ObjectService_Mybatis {

    private HisPerformanceInfoMapper historyPerformanceMapper = null;
	
	public HisPerformanceInfoMapper getMapper() {
		return historyPerformanceMapper;
	}
	public void setMapper(HisPerformanceInfoMapper historyPerformanceMapper) {
		this.historyPerformanceMapper = historyPerformanceMapper;
	}
	public void setSqlSession(SqlSession sqlSession) {
		super.sqlSession = sqlSession;
	}
	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}
	
	/**
	 * 查看 历史告警表多少条记录
	 * 返回   result 条
	 * @return
	 * @throws Exception
	 */
	public int selectCount()throws Exception{
		int result=0;
		result=this.historyPerformanceMapper.selectHisPerformanceCount();
		return result;
	}
	
	/**
	 * 根据历史性能数据主键id，删除历史性能数据
	 * 
	 * @param taskId
	 *            主键id
	 * @return
	 * @throws Exception
	 */
	public int delete(int hisId) throws Exception {
		if (hisId == 0) {
			throw new Exception("hisId is null");
		}
		int resultcesId = 0;
		try {
			resultcesId = this.historyPerformanceMapper.deleteById(hisId);
			sqlSession.commit();
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return resultcesId;
	}
	
	/**
	 * 根据历史性能数据主键集合，批量删除
	 * 
	 * @param idList
	 * @return
	 * @throws Exception
	 */
	public int delete(List<Integer> idList) throws Exception {
		int result = 0;
		try {
			if (idList == null || idList.size() == 0) {
				return 0;
			}
			result = this.historyPerformanceMapper.deleteByIds(idList);
			sqlSession.commit();
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return result;
	}
	
	/**
	 * 获取所有历史性能数据
	 * 
	 * @return
	 * @throws Exception
	 */
	public List<HisPerformanceInfo> select() throws Exception {
		List<HisPerformanceInfo> hisInfoList = null;
		try {
			HisPerformanceInfo condition = new HisPerformanceInfo();
			hisInfoList = historyPerformanceMapper.queryByCondition(condition);
			hisInfoList = wrapHisPerformanceInfo(hisInfoList,null);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return hisInfoList;
	}
	
	/**
	 * 封装历史性能对象
	 */
	private List<HisPerformanceInfo> wrapHisPerformanceInfo(List<HisPerformanceInfo> hisInfoList,HisPerformanceFilter filter) throws Exception {
		    List<HisPerformanceInfo> filterHisPerformance = new ArrayList<HisPerformanceInfo>();
			Capability capability = null;
			Map<String, Capability> performancesMap = null;
			String[] filrertypes = null;
			Map<Integer, SiteInst> siteMap = null;
			try {
				if(filter != null){
					filrertypes = filter.getTypeStr().trim().split(",");
				}
		      if (hisInfoList != null) {
				performancesMap = ConstantUtil.capabilityMap;
				siteMap = this.getSiteMap();
				for (HisPerformanceInfo hisInfo : hisInfoList) {
					// 封装历史性能数据
					SiteInst siteInst = siteMap.get(hisInfo.getSiteId());
					if(siteInst != null){
						hisInfo.setSiteName(siteInst.getCellId());
						if (UiUtil.getCodeById(Integer.parseInt(siteInst.getCellEditon())).getCodeName().equals("700+系列")) {
							capability = performancesMap.get(1 + "/" + hisInfo.getPerformanceCode());// 1表示武汉
						} else {
							capability = performancesMap.get(2 + "/" + hisInfo.getPerformanceCode()); // 2表示晨晓
						}
						hisInfo.setCapability(capability);
						if(hisInfo.getMonitor() == EMonitorCycle.MIN15.getValue()){
							hisInfo.setMonitorCycle(EMonitorCycle.MIN15);
						}else{
							hisInfo.setMonitorCycle(EMonitorCycle.HOUR24);
						}
					}
					//根据条件过滤
					if(filter != null){
						if(capability != null){
							for (int i = 0; i < filrertypes.length; i++) {
								if (filrertypes[i].equals(capability.getCapabilitytype())) {
									for (String strType : filter.getCapabilityNameList()) {
										if (filter.getFiterZero() > 0) {
											if (capability.getCapabilitydesc().equalsIgnoreCase(strType)
													&& hisInfo.getMonitorCycle() == filter.getMonitorCycle()
													&& hisInfo.getPerformanceValue() != 0
													&& hisInfo.getObjectName() != null) {
												filterHisPerformance.add(hisInfo);
											}
										} else {
											if (capability.getCapabilitydesc().equalsIgnoreCase(strType)
													&& hisInfo.getMonitorCycle() == filter.getMonitorCycle()
													&& hisInfo.getObjectName() != null) {
												filterHisPerformance.add(hisInfo);
											}
										}
									}
								}
							}
						}
					}else{
						filterHisPerformance.add(hisInfo);
					}
				}
			 }
			} catch (Exception e) {
				ExceptionManage.dispose(e,this.getClass());
			} 
		return filterHisPerformance;
	}
	
	private Map<Integer, SiteInst> getSiteMap() {
		Map<Integer, SiteInst> siteMap = new HashMap<Integer, SiteInst>();
		try {
			SiteService_MB siteService = (SiteService_MB) ConstantUtil.serviceFactory.newService_MB(Services.SITE, this.sqlSession);
			List<SiteInst> siteList = siteService.select();
			if(siteList != null && !siteList.isEmpty()){
				for (SiteInst siteInst : siteList) {
					siteMap.put(siteInst.getSite_Inst_Id(), siteInst);
				}
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return siteMap;
	}
	
	/**
	 * 根据时间来获取部分的历史性能数据
	 * 
	 * @return
	 * @throws Exception
	 */
	public List<HisPerformanceInfo> selectTime(String startTime) throws Exception {
		List<HisPerformanceInfo> hisInfoList = null;
		String endTime = DateUtil.getDate(DateUtil.FULLTIME);
		try {
			hisInfoList = historyPerformanceMapper.queryByConditionTime(startTime,endTime);
			hisInfoList = wrapHisPerformanceInfo(hisInfoList,null);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return hisInfoList;
	}
	
	public int selectCount(HisPerformanceFilter filter, List<Integer> siteIdList) throws SQLException {
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("filter", filter);
		if(siteIdList != null && siteIdList.size()>0){
			map.put("siteIdList", siteIdList);
		}else{
			map.put("siteIdList", null);
		}
		return this.historyPerformanceMapper.selectCount(map);
	}
	
//	/**
//	 * 插入或者修改历史性能数据
//	 * 
//	 * @param HisPerformanceInfo
//	 *            历史性能数据实体
//	 * @return
//	 * @throws Exception
//	 */
//	public int saveOrUpdate(HisPerformanceInfo hisInfo) throws Exception {
//		if (hisInfo == null) {
//			throw new Exception("taskInfo is null");
//		}
//		int resultcesId = 0;
//		try {
//			if (hisInfo.getId() != 0) {
//				resultcesId = this.hisDao.update(hisInfo, connection);
//			} else {
//				resultcesId = this.hisDao.insert(hisInfo, connection);
//			}
//		} catch (Exception e) {
//			ExceptionManage.dispose(e,this.getClass());
//		} finally {
//		}
//		return resultcesId;
//	}
//
//	/**
//	 * 根据历史性能数据主键id，删除历史性能数据
//	 * 
//	 * @param taskId
//	 *            主键id
//	 * @return
//	 * @throws Exception
//	 */
//	public int delete(int hisId) throws Exception {
//		if (hisId == 0) {
//			throw new Exception("hisId is null");
//		}
//		int resultcesId = 0;
//		try {
//			resultcesId = this.hisDao.delete(hisId, connection);
//		} catch (Exception e) {
//			ExceptionManage.dispose(e,this.getClass());
//		}
//		return resultcesId;
//	}
//
//	/**
//	 * 获取所有历史性能数据
//	 * 
//	 * @return
//	 * @throws Exception
//	 */
//	public List<HisPerformanceInfo> select() throws Exception {
//		List<HisPerformanceInfo> hisInfoList = null;
//		try {
//			HisPerformanceInfo condition = new HisPerformanceInfo();
//			hisInfoList = hisDao.queryByCondition(condition, connection);
//			hisInfoList = wrapHisPerformanceInfo(hisInfoList,null);
//		} catch (Exception e) {
//			ExceptionManage.dispose(e,this.getClass());
//		}
//		return hisInfoList;
//	}
//	
//	/**
//	 * 根据时间来获取部分的历史性能数据
//	 * 
//	 * @return
//	 * @throws Exception
//	 */
//	public List<HisPerformanceInfo> selectTime(String time) throws Exception {
//		List<HisPerformanceInfo> hisInfoList = null;
//		try {
//			HisPerformanceInfo condition = new HisPerformanceInfo();
//			condition.setPerformanceEndTime(time);
//			hisInfoList = hisDao.queryByConditionTime(condition, connection);
//			hisInfoList = wrapHisPerformanceInfo(hisInfoList,null);
//		} catch (Exception e) {
//			ExceptionManage.dispose(e,this.getClass());
//		}
//		return hisInfoList;
//	}
//	/**
//	 * 根据查询条件，获取所有历史性能数据
//	 * 
//	 * @return
//	 * @throws Exception
//	 */
//	public List<HisPerformanceInfo> select(HisPerformanceInfo condition) throws Exception {
//		List<HisPerformanceInfo> hisInfoList = null;
//		try {
//			hisInfoList = hisDao.queryByCondition(condition, connection);
//			hisInfoList = wrapHisPerformanceInfo(hisInfoList,null);
//		} catch (Exception e) {
//			ExceptionManage.dispose(e,this.getClass());
//		}
//		return hisInfoList;
//	}
//

//
//	/**
//	 * 根据过滤条件查询历史性能数据
//	 * @return
//	 */
//	public List<HisPerformanceInfo> queryByFilter(HisPerformanceFilter filter) throws Exception {
//		List<HisPerformanceInfo> hisInfoList = null;
//		try {
//			hisInfoList = hisDao.queryByFilter(filter, connection);
//			hisInfoList = wrapHisPerformanceInfo(hisInfoList,filter);
//		} catch (Exception e) {
//			ExceptionManage.dispose(e,this.getClass());
//		}
//		return hisInfoList;
//	}
//
//	/**
//	 * 封装历史性能对象
//	 */
//	private List<HisPerformanceInfo> wrapHisPerformanceInfo(List<HisPerformanceInfo> hisInfoList,HisPerformanceFilter filter) throws Exception {
//		    List<HisPerformanceInfo> filterHisPerformance = new ArrayList<HisPerformanceInfo>();
//			Capability capability = null;
//			Map<String, Capability> performancesMap = null;
//			String[] filrertypes = null;
//			Map<Integer, SiteInst> siteMap = null;
//			try {
//				if(filter != null){
//					filrertypes = filter.getTypeStr().trim().split(",");
//				}
//		      if (hisInfoList != null) {
//				performancesMap = ConstantUtil.capabilityMap;
//				siteMap = this.getSiteMap();
//				for (HisPerformanceInfo hisInfo : hisInfoList) {
//					// 封装历史性能数据
//					SiteInst siteInst = siteMap.get(hisInfo.getSiteId());
//					if(siteInst != null){
//						hisInfo.setSiteName(siteInst.getCellId());
//						if (UiUtil.getCodeById(Integer.parseInt(siteInst.getCellEditon())).getCodeName().equals("700+系列")) {
//							capability = performancesMap.get(1 + "/" + hisInfo.getPerformanceCode());// 1表示武汉
//						} else {
//							capability = performancesMap.get(2 + "/" + hisInfo.getPerformanceCode()); // 2表示晨晓
//						}
//						hisInfo.setCapability(capability);
//						if(hisInfo.getMonitor() == EMonitorCycle.MIN15.getValue()){
//							hisInfo.setMonitorCycle(EMonitorCycle.MIN15);
//						}else{
//							hisInfo.setMonitorCycle(EMonitorCycle.HOUR24);
//						}
//					}
//					//根据条件过滤
//					if(filter != null){
//						if(capability != null){
//							for (int i = 0; i < filrertypes.length; i++) {
//								if (filrertypes[i].equals(capability.getCapabilitytype())) {
//									for (String strType : filter.getCapabilityNameList()) {
//										if (filter.getFiterZero() > 0) {
//											if (capability.getCapabilitydesc().equalsIgnoreCase(strType)
//													&& hisInfo.getMonitorCycle() == filter.getMonitorCycle()
//													&& hisInfo.getPerformanceValue() != 0
//													&& hisInfo.getObjectName() != null) {
//												filterHisPerformance.add(hisInfo);
//											}
//										} else {
//											if (capability.getCapabilitydesc().equalsIgnoreCase(strType)
//													&& hisInfo.getMonitorCycle() == filter.getMonitorCycle()
//													&& hisInfo.getObjectName() != null) {
//												filterHisPerformance.add(hisInfo);
//											}
//										}
//									}
//								}
//							}
//						}
//					}else{
//						filterHisPerformance.add(hisInfo);
//					}
//				}
//			 }
//			} catch (Exception e) {
//				ExceptionManage.dispose(e,this.getClass());
//			} 
//		return filterHisPerformance;
//	}
//	

//	
//	/**
//	 * 性能統計
//	 * 		通過  條件 查詢  性能值
//	 * @param hisInfo
//	 * 		端口，板卡，網元，的 id
//	 * @param code
//	 * 		選擇結束時間的  code  （0-6）
//	 * @param capability
//	 * 		關聯關係   
//	 * 			通過  CapabilityCode
//	 * @param perTask
//	 * 		長期性能任務對象
//	 * 			取得監控週期
//	 * @return
//	 * @throws Exception
//	 */
//	public List<HisPerformanceInfo> selectPerformanceValue(HisPerformanceInfo hisInfo,int code,Capability capability)throws Exception{
//		List<HisPerformanceInfo> hisList =null;
//		try{
//			hisList=this.hisDao.queryByHisPerfromance(hisInfo, code, capability,connection);
//		}catch(Exception e){
//			throw e;
//		}
//		return hisList;
//	}
//	
//	/**
//	 * 条件删除历史性能
//	 * @param currentAlarmInfo
//	 * @return
//	 * @throws Exception
//	 */
//	public int deleteHisPerformance(HisPerformanceInfo hisPerformanceInfo) throws Exception {
//		if (hisPerformanceInfo == null) {
//			throw new Exception("hisPerformanceInfo is null");
//		}
//		int resultcesId = 0;
//		try {
//			resultcesId = this.hisDao.deleteHisAlarmInfo(hisPerformanceInfo, connection);
//		} catch (Exception e) {
//
//			throw e;
//		}
//		return resultcesId;
//	}
//	
//	/**
//	 * 根据时间段来查询历史性能
//	 * @param taskIdList 
//	 * @throws Exception 
//	 */
//	public List<HisPerformanceInfo> selectByTime(String startTime,
//			String endTime, List<Integer> taskIdList,int siteId) throws Exception {
//		List<HisPerformanceInfo> hisInfoList = null;
//		try {
//			hisInfoList = hisDao.queryByTime(startTime, endTime, taskIdList,siteId, connection);
//			wrapHisPerformanceInfo(hisInfoList, null);
//		} catch (Exception e) {
//			throw e;
//		}
//		return hisInfoList;
//	}
//
//	public int selectCount(HisPerformanceFilter filter, List<Integer> siteIdList) throws SQLException {
//		return this.hisDao.selectCount(filter, siteIdList, connection);
//	}
//
//	public List<HisPerformanceInfo> selectByPage(int direction, int id, HisPerformanceFilter filter,
//				List<Integer> siteIdList, int pageCount) {
//		List<HisPerformanceInfo> hisInfoList = new ArrayList<HisPerformanceInfo>();
//		try {
//			hisInfoList = this.hisDao.selectByPage(direction, id, filter, siteIdList, connection, pageCount);
//			this.wrapHisPerformanceInfo(hisInfoList);
//		} catch (Exception e) {
//			ExceptionManage.dispose(e, this.getClass());
//		}
//		return hisInfoList;
//	}
//
//	private void wrapHisPerformanceInfo(List<HisPerformanceInfo> performanceList) {
//		Capability capability = null;
//		Map<String, Capability> performancesMap = null;
//		Map<Integer, SiteInst> siteMap = null;
//		try {
//			performancesMap = ConstantUtil.capabilityMap;
//			siteMap = this.getSiteMap();
//			
//			for (HisPerformanceInfo hisInfo : performanceList) {
//				// 封装历史性能数据
//				SiteInst siteInst = siteMap.get(hisInfo.getSiteId());
//				if(siteInst != null){
//					hisInfo.setSiteName(siteInst.getCellId());
//					if (UiUtil.getCodeById(Integer.parseInt(siteInst.getCellEditon())).getCodeName().equals("700+系列")) {
//						capability = performancesMap.get(1 + "/" + hisInfo.getPerformanceCode());// 1表示武汉
//					} else {
//						capability = performancesMap.get(2 + "/" + hisInfo.getPerformanceCode()); // 2表示晨晓
//					}
//					hisInfo.setCapability(capability);
//					if(hisInfo.getMonitor() == EMonitorCycle.MIN15.getValue()){
//						hisInfo.setMonitorCycle(EMonitorCycle.MIN15);
//					}else{
//						hisInfo.setMonitorCycle(EMonitorCycle.HOUR24);
//					}
//				}
//			}
//		} catch (Exception e) {
//			ExceptionManage.dispose(e,this.getClass());
//		} 
//	}
//
//	private Map<Integer, SiteInst> getSiteMap() {
//		Map<Integer, SiteInst> siteMap = new HashMap<Integer, SiteInst>();
//		try {
//			SiteService siteService = (SiteService) ConstantUtil.serviceFactory.newService(Services.SITE, this.connection);
//			List<SiteInst> siteList = siteService.select();
//			if(siteList != null && !siteList.isEmpty()){
//				for (SiteInst siteInst : siteList) {
//					siteMap.put(siteInst.getSite_Inst_Id(), siteInst);
//				}
//			}
//		} catch (Exception e) {
//			ExceptionManage.dispose(e,this.getClass());
//		}
//		return siteMap;
//	}
//	
//	/**
//	 * 批量插入数据
//	 * @param hisPerList
//	 */
//	public void insertAll(List<HisPerformanceInfo> hisPerList)
//	{
//		try {
//			this.hisDao.insertAlll(hisPerList, connection);
//		} catch (Exception e) {
//			ExceptionManage.dispose(e,this.getClass());
//		}
//	}
	

}
