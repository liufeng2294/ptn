package com.nms.db.dao.ptn;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.EthServiceInfo;

public class EthServiceDao {
	/**
	 * 修改 EthServiceInfoeth ServiceInfo
	 * @param EthServiceInfoe thServiceInfo
	 * @param conn  数据库连接
	 * @return   记录数
	 * @throws Exception
	 */
	public int update(EthServiceInfo ethServiceInfo,Connection connection)throws Exception{
		if (null == ethServiceInfo) {
			throw new Exception("aclInfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}
		
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		
		try {
			sql = "update ethService_inst set vlanId=?, portLine1=?,portLine2=?,portLine3=?,portLine4=?" +
					" where siteId=? and id =?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, ethServiceInfo.getVlanId());
			preparedStatement.setInt(2, ethServiceInfo.getPortLine1());
			preparedStatement.setInt(3, ethServiceInfo.getPortLine2());
			preparedStatement.setInt(4, ethServiceInfo.getPortLine3());
			preparedStatement.setInt(5, ethServiceInfo.getPortLine4());
			preparedStatement.setInt(6, ethServiceInfo.getSiteId());
			preparedStatement.setInt(7, ethServiceInfo.getId());
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		}finally{
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		
		}
		return result;
	}
	
	/**
	 * 查询全部
	 * @param condition	查询条件
	 * @param connection  数据库连接
	 * @return	List<EthServiceInfo>
	 * @throws Exception   EthServiceInfo ethServiceInfo
	 */
	public List<EthServiceInfo> queryByCondition(int siteId,Connection connection)throws Exception{

		if(connection == null){
			throw new Exception("Connection is null");
		}
		List<EthServiceInfo> ethServiceInfoList = null;
		String sql = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		
		try{
			ethServiceInfoList = new ArrayList<EthServiceInfo>();
			sql = "select *from ethService_inst where siteId=? order by vlanId";
			preparedStatement =  connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			resultSet  = preparedStatement.executeQuery();
			
			while(resultSet.next()){
				EthServiceInfo	ethServiceInfo = new EthServiceInfo();
				ethServiceInfo.setId(resultSet.getInt("id"));
				ethServiceInfo.setSiteId(resultSet.getInt("siteId"));
				ethServiceInfo.setVlanId(resultSet.getInt("vlanId"));
				ethServiceInfo.setPortLine1(resultSet.getInt("portLine1"));
				ethServiceInfo.setPortLine2(resultSet.getInt("portLine2"));
				ethServiceInfo.setPortLine3(resultSet.getInt("portLine3"));
				ethServiceInfo.setPortLine4(resultSet.getInt("portLine4"));
				ethServiceInfoList.add(ethServiceInfo);
			}
		}catch(Exception e){
			throw e;
		}finally{
			if(resultSet != null){
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if(preparedStatement != null){
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return ethServiceInfoList;
	}
	
	
	/**
	 * 查询全部
	 * @param condition	查询条件
	 * @param connection  数据库连接
	 * @return	List<EthServiceInfo>
	 * @throws Exception   EthServiceInfo ethServiceInfo
	 */
	public int findAllCount(int siteId,Connection connection)throws Exception{

		if(connection == null){
			throw new Exception("Connection is null");
		}
		String sql = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		
		try{
			sql = "select count(*) as allCount from ethService_inst where siteId=?";
			preparedStatement =  connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			resultSet  = preparedStatement.executeQuery();
			
			if(resultSet.next()){
				return resultSet.getInt("allCount");
			}
		}catch(Exception e){
			throw e;
		}finally{
			if(resultSet != null){
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if(preparedStatement != null){
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return 0;
	}
	/**
	 * 查询全部
	 * @param condition	查询条件
	 * @param connection  数据库连接
	 * @return	List<EthServiceInfo>
	 * @throws Exception   EthServiceInfo ethServiceInfo
	 */
	public boolean queryByCondition(List<Integer> vlans,int siteId,Connection connection)throws Exception{

		if(connection == null){
			throw new Exception("Connection is null");
		}
		String sql = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		String vlan = null;
		try{
			vlan = vlans.toString().substring(1, vlans.toString().length()-1);
			sql = "select *from ethService_inst where siteId=? and vlanId in("+ vlan +" )";
			preparedStatement =  connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			resultSet  = preparedStatement.executeQuery();
			
			if(resultSet.next()){
				return true;
			}
		}catch(Exception e){
			throw e;
		}finally{
			if(resultSet != null){
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if(preparedStatement != null){
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return false;
	}
	/**
	 * 添加 AclInfo
	 * @param info 
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int insert(List<EthServiceInfo> ethServiceInfos,Connection connection)throws Exception{
		if (null == ethServiceInfos) {
			throw new Exception("AclInfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		int result = 0;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null; 
		try {
			connection.setAutoCommit(false); 
			sql = "insert into ethService_inst (siteId,vlanId,portLine1,portLine2,portLine3,portLine4" +
					") values(?,?,?,?,?,?)";
			preparedStatement = connection.prepareStatement(sql);
			for(EthServiceInfo ethInfo : ethServiceInfos)
			{
				preparedStatement.setInt(1, ethInfo.getSiteId());
				preparedStatement.setInt(2, ethInfo.getVlanId());
				preparedStatement.setInt(3, ethInfo.getPortLine1());
				preparedStatement.setInt(4, ethInfo.getPortLine2());
				preparedStatement.setInt(5, ethInfo.getPortLine3());
				preparedStatement.setInt(6, ethInfo.getPortLine4());
				preparedStatement.addBatch();
			}
			preparedStatement.executeBatch();
			
			if(connection.getAutoCommit()!=true)
			{
				connection.setAutoCommit(true);
			}
		} catch (Exception e) {
			throw e;
		}finally{
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			if (connection.getAutoCommit() != true) {
				connection.commit();
			}
			sql = null;
		}
		return result;
	}

	public void delete(EthServiceInfo ethServiceInfo, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		
		PreparedStatement preparedStatement = null;
		String sql = null;
		try {
			sql = "delete from ethService_inst where 1=1";
			if(ethServiceInfo.getId() >0)
			{
				sql += " and id="+ethServiceInfo.getId();
			}
			if(ethServiceInfo.getSiteId() >0)
			{
				sql +=" and siteId="+ethServiceInfo.getSiteId();
			}
			if(ethServiceInfo.getVlanId() >0)
			{
				sql +=" and vlanId="+ethServiceInfo.getVlanId();
			}
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
	}
	
	public List<EthServiceInfo> queryOamLinkInfoByCondition(EthServiceInfo ethServiceInst, Connection conn) throws Exception {
		
		if (ethServiceInst == null) {
			throw new Exception("ethServiceInfo is null");
		}
		if (conn == null) {
			throw new Exception("conn is null");
		}
		StringBuffer sql = new StringBuffer();
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<EthServiceInfo> ethServiceInfoList=null;
		
		try {
			ethServiceInfoList=new ArrayList<EthServiceInfo>();
			
			sql.append("select * from  ethService_inst");
			sql.append(" where siteId = ?");
			sql.append(" and id = ?");
				
			preparedStatement = conn.prepareStatement(sql.toString());
			preparedStatement.setInt(1, ethServiceInst.getSiteId());
			preparedStatement.setInt(2, ethServiceInst.getId());
			
			resultSet = preparedStatement.executeQuery();
			
			while (resultSet.next()) {
			    EthServiceInfo	ethServiceInfo = new EthServiceInfo();
				ethServiceInfo.setId(resultSet.getInt("id"));
				ethServiceInfo.setSiteId(resultSet.getInt("siteId"));
				ethServiceInfo.setVlanId(resultSet.getInt("vlanId"));
				ethServiceInfo.setPortLine1(resultSet.getInt("portLine1"));
				ethServiceInfo.setPortLine2(resultSet.getInt("portLine2"));
				ethServiceInfo.setPortLine3(resultSet.getInt("portLine3"));
				ethServiceInfo.setPortLine4(resultSet.getInt("portLine4"));
				ethServiceInfoList.add(ethServiceInfo);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return ethServiceInfoList;
	}
	
	/**
	 * 删除所有的数据根据网元
	 * @param connection
	 * @throws Exception
	 */
	public void deleteAllBySite(EthServiceInfo ethServiceInfo,Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		String sql = null;
		try {
			sql = "delete from ethService_inst where siteId= ?  ";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, ethServiceInfo.getSiteId());
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
	}
	
	/**
	 * 删除所有的数据
	 * @param connection
	 * @throws Exception
	 */
	public void deleteAll(Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		String sql = null;
		try {
			sql = "delete from ethService_inst";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
	}
	
	public List<Integer> queryBySiteIdAndPortLine(int siteId,String portLine,int num, Connection conn) throws Exception {
		
		if (conn == null) {
			throw new Exception("conn is null");
		}
		String sql = "";
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Integer> vlanIds=null;
		
		try {
			vlanIds = new ArrayList<Integer>();
			sql = "select * from  ethService_inst where siteId="+siteId+" and "+portLine+"!=0" ;
			preparedStatement = conn.prepareStatement(sql.toString());
			
			resultSet = preparedStatement.executeQuery();
			
			while (resultSet.next()) {
				int line = resultSet.getInt(portLine);
				String lineString = Integer.toBinaryString(line);
				if(lineString.length()>=num && lineString.substring(lineString.length()-num,lineString.length()-num+1).equals("1")){
					vlanIds.add(resultSet.getInt("vlanId"));
				}
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return vlanIds;
	}
	/**
	 * 根据网元删除所有的数据
	 * @param connection
	 * @throws Exception
	 */
	public void deleteAllBySiteId(int siteId,Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		String sql = null;
		try {
			sql = "delete from ethService_inst where siteId= ?  ";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
	}
	
}