package com.nms.db.dao.equipment.slot;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.equipment.slot.SlotInst;
import com.nms.ui.manager.ExceptionManage;


public class SlotInstDao {
	/**
	 * 新增slotinst
	 * 
	 * @param slotinst
	 *            实体
	 * @param connection
	 *            数据库连接
	 * @return 插入的记录数
	 * @throws Exception
	 */
	public int insert(SlotInst slotinst, Connection connection) throws Exception {
		
		if (null == slotinst) {
			throw new Exception("slotinst is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "insert into slot_inst(siteId,equipId,cardId,imagePath,slotType,slotx,sloty,bestCardName,number,masterCardAddress,snmpName) values(?,?,?,?,?,?,?,?,?,?,?)";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, slotinst.getSiteId());
			preparedStatement.setInt(2, slotinst.getEquipId());
			preparedStatement.setInt(3, slotinst.getCardId());
			preparedStatement.setString(4, slotinst.getImagePath());
			preparedStatement.setString(5, slotinst.getSlotType());
			preparedStatement.setInt(6, slotinst.getSlotx());
			preparedStatement.setInt(7, slotinst.getSloty());
			preparedStatement.setString(8, slotinst.getBestCardName());
			preparedStatement.setInt(9, slotinst.getNumber());
			preparedStatement.setString(10, slotinst.getMasterCardAddress());
			preparedStatement.setString(11, slotinst.getBestCardName());
			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}

			sql = null;
		}

		return result;
	}

	/**
	 * 修改slotinst
	 * 
	 * @param slotinst
	 *            实体
	 * @param connection
	 *            数据库连接
	 * @return 修改的记录数
	 * @throws Exception
	 */
	public int update(SlotInst slotinst, Connection connection) throws Exception {
		if (null == slotinst) {
			throw new Exception("slotinst is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "update slot_inst set siteId=?,equipId=?,cardId=?,imagePath=? ,slotType= ?, slotx=? ,sloty= ? , bestCardName=? , number=?,masterCardAddress=?,snmpName=? where id=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, slotinst.getSiteId());
			preparedStatement.setInt(2, slotinst.getEquipId());
			preparedStatement.setInt(3, slotinst.getCardId());
			preparedStatement.setString(4, slotinst.getImagePath());
			preparedStatement.setString(5, slotinst.getSlotType());
			preparedStatement.setInt(6, slotinst.getSlotx());
			preparedStatement.setInt(7, slotinst.getSloty());
			preparedStatement.setString(8, slotinst.getBestCardName());
			preparedStatement.setInt(9, slotinst.getNumber());
			preparedStatement.setString(10, slotinst.getMasterCardAddress());
			preparedStatement.setString(11, slotinst.getSnmpName());
			preparedStatement.setInt(12, slotinst.getId());
			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 通过主键删除
	 * @param Slot_Inst_Id
	 *            主键
	 * @param connection
	 *            数据库连接
	 * @return 删除的记录数
	 * @throws Exception
	 */
	public int delete(int id, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "delete from slot_inst where id=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, id);

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	public int deleteBySiteId(int siteId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "delete from slot_inst where siteId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 根据条件查询
	 * 
	 * @param slotinstCondition
	 *            查询条件
	 * @param connection
	 *            数据库连接
	 * @return List<SlotInst> 集合
	 * @throws Exception
	 */
	public List<SlotInst> queryByCondition(SlotInst slotinstCondition, Connection connection) throws Exception {

		if (null == slotinstCondition) {
			throw new Exception("slotinstCondition is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<SlotInst> slotinstList = null;
		String sql = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		SlotInst slotinst = null;

		try {
			slotinstList = new ArrayList<SlotInst>();
			sql = "select id,siteId,equipId , cardId,imagePath	,slotType,slotx ,sloty , bestCardName , number,masterCardAddress,snmpName from slot_inst where 1=1";

			if (slotinstCondition.getId() > 0) {
				sql += " and id=" + slotinstCondition.getId();
			}

			if (slotinstCondition.getSiteId() > 0) {
				sql += " and siteId=" + slotinstCondition.getSiteId();
			}

			if (slotinstCondition.getEquipId() > 0) {
				sql += " and equipId=" + slotinstCondition.getEquipId();
			}

			if (slotinstCondition.getCardId() > 0) {
				sql += " and cardId=" + slotinstCondition.getCardId();
			}
			if (slotinstCondition.getNumber() > 0) {
				sql += " and number=" + slotinstCondition.getNumber();
			}
			if (slotinstCondition.getMasterCardAddress() != null && !slotinstCondition.getMasterCardAddress().equals("")) {
				sql += " and masterCardAddress='" + slotinstCondition.getMasterCardAddress()+"'";
			}
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				slotinst = new SlotInst();
				slotinst.setId(resultSet.getInt("id"));
				slotinst.setSiteId(resultSet.getInt("siteId"));
				slotinst.setEquipId(resultSet.getInt("equipId"));
				slotinst.setCardId(resultSet.getInt("cardId"));
				slotinst.setImagePath(resultSet.getString("imagePath"));
				slotinst.setSlotType(resultSet.getString("slotType"));
				slotinst.setSlotx(resultSet.getInt("slotx"));
				slotinst.setSloty(resultSet.getInt("sloty"));
				slotinst.setBestCardName(resultSet.getString("bestCardName"));
				slotinst.setNumber(resultSet.getInt("number"));
				slotinst.setMasterCardAddress(resultSet.getString("masterCardAddress"));
				slotinst.setSnmpName(resultSet.getString("snmpName"));
				slotinstList.add(slotinst);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
			slotinst = null;
		}

		return slotinstList;

	}
	public List<SlotInst> queryByCondition(Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		List<SlotInst> slotinstList = null;
		String sql = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		SlotInst slotinst = null;
		try {
			slotinstList = new ArrayList<SlotInst>();
			sql = "select c.siteId,s2.CellId, s1.number,s1.masterCardAddress, c.cardName  from Slot_inst s1, Card_inst c, Site_inst s2 where s1.cardId = c.id and c.siteId = s2.site_inst_id";
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				slotinst = new SlotInst();
				slotinst.setSiteId(resultSet.getInt("c.siteId"));
				slotinst.setCellid(resultSet.getString("CellId"));
				slotinst.setNumber(resultSet.getInt("number"));
				slotinst.setCardname(resultSet.getString("cardName"));
				slotinst.setMasterCardAddress(resultSet.getString("masterCardAddress"));
				slotinstList.add(slotinst);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
			slotinst = null;
		}
		return slotinstList;
	}

	/**
	 * 根据端口ID查询槽对象
	 * 
	 * @param portId
	 *            端口id
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public SlotInst queryByPortId(int portId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql=null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		SlotInst slotinst = null;
		try {
			sql="select * from slot_inst s where s.cardid=(select p.cardId FROM port_inst p where p.portid=?)";
			preparedStatement=connection.prepareStatement(sql);
			preparedStatement.setInt(1, portId);
			
			resultSet = preparedStatement.executeQuery();

			if (resultSet.next()) {
				slotinst = new SlotInst();
				slotinst.setId(resultSet.getInt("id"));
				slotinst.setSiteId(resultSet.getInt("siteId"));
				slotinst.setEquipId(resultSet.getInt("equipId"));
				slotinst.setCardId(resultSet.getInt("cardId"));
				slotinst.setImagePath(resultSet.getString("imagePath"));
				slotinst.setSlotType(resultSet.getString("slotType"));
				slotinst.setSlotx(resultSet.getInt("slotx"));
				slotinst.setSloty(resultSet.getInt("sloty"));
				slotinst.setBestCardName(resultSet.getString("bestCardName"));
				slotinst.setNumber(resultSet.getInt("number"));
				slotinst.setMasterCardAddress(resultSet.getString("masterCardAddress"));
				slotinst.setSnmpName(resultSet.getString("snmpName"));
			}
			
		} catch (Exception e) {
			throw e;
		} finally{
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return slotinst;
	}
	
	/**
	 * 修改slotinst
	 * 
	 * @param slotinst
	 *            实体
	 * @param connection
	 *            数据库连接
	 * @return 修改的记录数
	 * @throws Exception
	 */
	public void updateMasterAddress(SlotInst slotinst, Connection connection) throws Exception {
		if (null == slotinst) {
			throw new Exception("slotinst is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;

		try {
			sql = "update slot_inst set masterCardAddress=? where id=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, slotinst.getMasterCardAddress());
			preparedStatement.setInt(2, slotinst.getId());
			preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
	}
	
	public int querryByType(int slotId, int site_Inst_Id, Connection connection) throws Exception{
			
		if (null == connection) {
			throw new Exception("connection is null");
		}
		int result=0;
		String sql = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;

		try {
			sql = "select number from slot_inst where siteId="+site_Inst_Id+" and id="+slotId;
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
			    result=resultSet.getInt("number");				
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		
		}		
		return result;
	}
}
