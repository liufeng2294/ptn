package com.nms.db.dao.alarm;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.alarm.TCAAlarm;
import com.nms.ui.manager.ExceptionManage;
import com.nms.ui.manager.ResourceUtil;
import com.nms.ui.manager.keys.StringKeysObj;

/**
 * TCA告警数据库访问类 数据在current_alarm表。 关联capability得到数据
 * 
 * @author kk
 * 
 */
public class TCAAlarmDao {

	/**
	 * 查询TCA告警 current_alarm表。 关联capability、siteInst得到数据
	 */
	private final String SQL_SELECT = "SELECT s.*,alarm.*,c.* FROM current_alarm alarm , capability c,site_inst s WHERE alarm.siteid=s.site_inst_id AND alarm.capabilityCode=c.capabilityCode AND c.Manufacturer = ( CASE WHEN ( SELECT co.codeValue FROM `code` co WHERE co.id = s.CellEditon ) = '0' THEN 1 ELSE 2 END )";

	/**
	 * 根据条件查询TCA告警。 如果要查询全部。 传入 new TCAAlarm()
	 * 
	 * @param tcaAlarm
	 *            查询条件
	 * @param connection
	 *            数据库连接
	 * @return
	 * @throws Exception
	 */
	public List<TCAAlarm> query(TCAAlarm tcaAlarm, Connection connection) throws Exception {

		if (null == tcaAlarm) {
			throw new Exception("TCAAlarm is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		PreparedStatement preparedStatement = null;
		String sql = null;
		List<Object> paramList = null;
		List<TCAAlarm> tcaAlarmList = null;
		try {
			sql = this.SQL_SELECT;

			// 根据条件拼接SQL语句
			paramList = new ArrayList<Object>();
			if (tcaAlarm.getSiteId() > 0) {
				sql += " AND alarm.siteid=?";
				paramList.add(tcaAlarm.getSiteId());
			}

			if (null != tcaAlarm.getPerformanceType() && !"".equals(tcaAlarm.getPerformanceType())) {
				sql += " AND c.CapabilityType=?";
				paramList.add(tcaAlarm.getPerformanceType());
			}
			
			if (tcaAlarm.getCapabilityCode()>0) {
				sql += " AND alarm.CapabilityCode=?";
				paramList.add(tcaAlarm.getCapabilityCode());
			}
			
			if (null != tcaAlarm.getAlarmSource() && !"".equals(tcaAlarm.getAlarmSource())) {
				sql += " AND alarm.objectname=?";
				paramList.add(tcaAlarm.getAlarmSource());
			}
			
			if (null != tcaAlarm.getCapabilityIdentity() && !"".equals(tcaAlarm.getCapabilityIdentity())) {
				sql += " AND alarm.CapabilityIdentity=?";
				paramList.add(tcaAlarm.getCapabilityIdentity());
			}

			preparedStatement = connection.prepareStatement(sql);
			// 设置参数
			if (paramList.size() > 0) {
				for (int i = 0; i < paramList.size(); i++) {
					preparedStatement.setObject(i + 1, paramList.get(i));
				}
			}
			tcaAlarmList = this.executeQuery(preparedStatement);
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
			paramList = null;
		}
		return tcaAlarmList;
	}

	/**
	 * 执行查询方法
	 * @param preparedStatement
	 * @return
	 * @throws Exception
	 */
	private List<TCAAlarm> executeQuery(PreparedStatement preparedStatement) throws Exception {
		ResultSet resultSet = null;
		List<TCAAlarm> tcaAlarmList = null;
		TCAAlarm tcaAlarm = null;
		try {
			resultSet = preparedStatement.executeQuery();
			tcaAlarmList = new ArrayList<TCAAlarm>();

			while (resultSet.next()) {
				tcaAlarm = new TCAAlarm();
				tcaAlarm.setId(resultSet.getInt("alarm.id"));
				tcaAlarm.setSiteId(resultSet.getInt("alarm.siteId"));
				tcaAlarm.setSiteName(resultSet.getString("s.cellid"));
				tcaAlarm.setAlarmSource(resultSet.getString("alarm.objectname"));
				tcaAlarm.setPerformanceType(resultSet.getString("c.CapabilityType"));
				tcaAlarm.setHappenTime(resultSet.getString("alarm.happenedtime"));
				tcaAlarm.setEndTime(resultSet.getString("alarm.clearedtime"));
				tcaAlarm.setGranularity(this.getGranularity(resultSet.getString("alarm.capabilityIdentity")));
				tcaAlarm.setThreshold(this.getThreshold(resultSet.getString("alarm.capabilityIdentity")));
				if ("en_US".equals(ResourceUtil.language)) {
					tcaAlarm.setRemark(resultSet.getString("c.CapabilityDisp"));
				} else {
					tcaAlarm.setRemark(resultSet.getString("c.CapabilityDesc"));
				}
				tcaAlarmList.add(tcaAlarm);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			tcaAlarm = null;
		}
		return tcaAlarmList;
	}

	/**
	 * 根据perid获取粒度
	 * 
	 * @param perid
	 * @return
	 * @throws Exception
	 */
	private String getGranularity(String perid) throws Exception {

		try {
			if ("1".equals(perid) || "2".equals(perid)) {
				return ResourceUtil.srcStr(StringKeysObj.OBJ_15_MINUTES);
			} else {
				return ResourceUtil.srcStr(StringKeysObj.OBJ_24_HOURS);
			}

		} catch (Exception e) {
			throw e;
		}

	}

	/**
	 * 根据perid获取粒度
	 * 
	 * @param perid
	 * @return
	 * @throws Exception
	 */
	private String getThreshold(String perid) throws Exception {
		try {
			if ("1".equals(perid) || "3".equals(perid)) {
				return ResourceUtil.srcStr(StringKeysObj.UPPER_LIMIT);
			} else {
				return ResourceUtil.srcStr(StringKeysObj.LOWER_LIMIT);
			}

		} catch (Exception e) {
			throw e;
		}
	}

}
