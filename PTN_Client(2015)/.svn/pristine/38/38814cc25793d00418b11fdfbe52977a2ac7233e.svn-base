package com.nms.ui.ptn.business.eline;

import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.client.Client;
import com.nms.db.bean.ptn.oam.OamInfo;
import com.nms.db.bean.ptn.oam.OamMepInfo;
import com.nms.db.bean.ptn.path.eth.ElineInfo;
import com.nms.db.bean.ptn.path.pw.PwInfo;
import com.nms.db.enums.EActiveStatus;
import com.nms.db.enums.EOperationLogType;
import com.nms.db.enums.EServiceType;
import com.nms.model.client.ClientService;
import com.nms.model.client.ClientService_MB;
import com.nms.model.ptn.oam.OamInfoService;
import com.nms.model.ptn.oam.OamInfoService_MB;
import com.nms.model.ptn.path.eth.ElineInfoService_MB;
import com.nms.model.ptn.path.pw.PwInfoService;
import com.nms.model.util.Services;
import com.nms.rmi.ui.util.RmiKeys;
import com.nms.service.impl.util.ResultString;
import com.nms.service.impl.util.SiteUtil;
import com.nms.service.impl.util.WhImplUtil;
import com.nms.ui.filter.impl.EthServiceFilterDialog;
import com.nms.ui.frame.AbstractController;
import com.nms.ui.manager.AddOperateLog;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.DialogBoxUtil;
import com.nms.ui.manager.DispatchUtil;
import com.nms.ui.manager.ExceptionManage;
import com.nms.ui.manager.ListingFilter;
import com.nms.ui.manager.ResourceUtil;
import com.nms.ui.manager.UiUtil;
import com.nms.ui.manager.keys.StringKeysTip;
import com.nms.ui.ptn.basicinfo.dialog.segment.SearchSegmentDialog;
import com.nms.ui.ptn.business.dialog.eline.AddElineDialog;
import com.nms.ui.ptn.systemconfig.dialog.qos.ComparableSort;

/**
 * @author lepan
 */
public class ElineBusinessController extends AbstractController {

	private final ElineBusinessPanel view;
	private ElineInfo elineInfo=null;

	public ElineBusinessController(ElineBusinessPanel view) {
		this.view = view;
	}

	@Override
	public void delete() throws Exception {
		List<ElineInfo> infos = null;
		boolean onlineFlag = false;
		List<Integer> allSiteIds = null;
		List<Integer> siteIds = null;
		try {

			infos = this.view.getAllSelect();
			//判断该eline上是否存在在线网元托管的
			SiteUtil siteUtil = new SiteUtil();
			allSiteIds = new ArrayList<Integer>();
			siteIds = new ArrayList<Integer>();
			for (ElineInfo eline : infos) {
				allSiteIds.add(eline.getaSiteId());
				allSiteIds.add(eline.getzSiteId());
			}
			for(int i=0;i<allSiteIds.size();i++){
				if(1==siteUtil.SiteTypeOnlineUtil(allSiteIds.get(i))){
				   siteIds.add(allSiteIds.get(i));			    		
				}
		     }
			if(siteIds !=null && siteIds.size()!=0){
			   onlineFlag = true;
			}
			if(onlineFlag){
				WhImplUtil wu = new WhImplUtil();
				String str=wu.getNeNames(siteIds);
				DialogBoxUtil.errorDialog(this.view, ResourceUtil.srcStr(StringKeysTip.TIP_NOT_DELETEONLINE)+""+str+ResourceUtil.srcStr(StringKeysTip.TIP_ONLINENOT_DELETEONLINE));
				UiUtil.insertOperationLog(EOperationLogType.ELINEERROR1.getValue());
				return ;
			}
			
			DispatchUtil elineDispatch = new DispatchUtil(RmiKeys.RMI_ELINE);
			String resultStr = elineDispatch.excuteDelete(infos);
			// 添加日志记录
			AddOperateLog.insertOperLog(this.view.getDeleteButton(), EOperationLogType.ELINEDELETE.getValue(), resultStr);
			DialogBoxUtil.succeedDialog(this.view, resultStr);
			this.refresh();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			infos = null;
			allSiteIds =null;
			siteIds =null;
		}
	}

	@Override
	public void openCreateDialog() throws Exception {
		try {

			AddElineDialog addelinedialog = new AddElineDialog(this.view, true, null);
			addelinedialog.setLocation(UiUtil.getWindowWidth(addelinedialog.getWidth()), UiUtil.getWindowHeight(addelinedialog.getHeight()));
			addelinedialog.setVisible(true);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}
	}

	@Override
	public void openUpdateDialog() throws Exception {
		ElineInfo info = null;
		try {
			info = this.view.getSelect();
			if (info == null) {
				DialogBoxUtil.errorDialog(this.view, ResourceUtil.srcStr(StringKeysTip.TIP_SELECT_DATA_ONE));
				UiUtil.insertOperationLog(EOperationLogType.ELINE.getValue());
			} else {
				AddElineDialog addelinedialog = new AddElineDialog(this.view, true, info);
				addelinedialog.setLocation(UiUtil.getWindowWidth(addelinedialog.getWidth()), UiUtil.getWindowHeight(addelinedialog.getHeight()));
				addelinedialog.setVisible(true);
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public void refresh() throws Exception {
		List<ElineInfo> infos = null;
		ElineInfoService_MB elineInfoServiceMB = null;
		ListingFilter filter = null;
		try {
			filter = new ListingFilter();
			elineInfoServiceMB = (ElineInfoService_MB) ConstantUtil.serviceFactory.newService_MB(Services.Eline);
			
			if(null==this.elineInfo){
				this.elineInfo=new ElineInfo();
			}
			
			infos = (List<ElineInfo>) filter.filterList(elineInfoServiceMB.selectByCondition(this.elineInfo));
			this.view.clear();
			if (this.view.getOamTable() != null) {
				this.view.getOamTable().clear();
			}
			if (view.getTopoPanel() != null) {
				view.getTopoPanel().clear();
			}
			if (view.getPortNetworkTablePanel() != null) {
				view.getPortNetworkTablePanel().clear();
			}
			if (view.getClientInfoPanel() != null) {
				view.getClientInfoPanel().clear();
			}
			if (view.getSchematize_panel() != null) {
				view.getSchematize_panel().clear();
			}
			if (view.getPwNetworkTablePanel() != null){
				this.view.getPwNetworkTablePanel().clear();
			}
			this.view.initData(infos);
			this.view.updateUI();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			filter = null;
			UiUtil.closeService_MB(elineInfoServiceMB);
			infos = null;
		}
	}

	@Override
	public void search() throws Exception {
		try {
			new SearchSegmentDialog(this.view);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
		}
	}

	/**
	 * 选中一条记录后，查看详细信息
	 */
	@Override
	public void initDetailInfo() {
		try {
			initTopoPanel();
			this.initPwNetworkTablePanel();
			initOamPanel();
			initAcPanel();
			this.initSchematizePanel();
			initClientInfo();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}
	}

	private void initPwNetworkTablePanel() {
		PwInfoService pwService = null;
		try {
			ElineInfo elineInfo = this.view.getSelect();
			pwService = (PwInfoService) ConstantUtil.serviceFactory.newService(Services.PwInfo);
			PwInfo pw = pwService.selectByPwId(elineInfo.getPwId());
			List<PwInfo> pwList = new ArrayList<PwInfo>();
			pwList.add(pw);
			this.view.getPwNetworkTablePanel().initData(pwList);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			UiUtil.closeService(pwService);
		}
	}

	/**
	 * 列表点击事件（客户信息）
	 */
	private void initClientInfo() {
		ElineInfo elineInfo = null;
		ClientService_MB clientServiceMB = null;
		List<Client> clientList = null;
		try {
			clientServiceMB = (ClientService_MB) ConstantUtil.serviceFactory.newService_MB(Services.CLIENTSERVICE);
			elineInfo = view.getSelect();

			if (0 != elineInfo.getClientId()) {
				clientList = clientServiceMB.select(elineInfo.getClientId());
				this.view.getClientInfoPanel().clear();
				this.view.getClientInfoPanel().initData(clientList);
				this.view.updateUI();
			} else {
				this.view.getClientInfoPanel().clear();
			}

		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			elineInfo = null;
			UiUtil.closeService_MB(clientServiceMB);
			clientList = null;
		}

	}

	/**
	 * 初始化图形化界面数据
	 * 
	 * @author kk
	 * 
	 * @Exception 异常对象
	 */
	private void initSchematizePanel() {
		ElineInfo elineInfo = null;
		try {
			elineInfo = view.getSelect();
			this.view.getSchematize_panel().clear();
			this.view.getSchematize_panel().initData(elineInfo);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			elineInfo = null;
		}
	}

	@SuppressWarnings("unchecked")
	private void initOamPanel() throws Exception {
		OamInfoService_MB oamInfoServiceMB = null;
		ElineInfo elineInfo = null;
		List<OamInfo> oamList = null;
		try {
			elineInfo = this.view.getSelect();
			oamList = new ArrayList<OamInfo>();
			oamInfoServiceMB = (OamInfoService_MB) ConstantUtil.serviceFactory.newService_MB(Services.OamInfo);
			OamInfo oam = new OamInfo();
			OamMepInfo oamMep = new OamMepInfo();
			oamMep.setServiceId(elineInfo.getId());
			oamMep.setObjType(EServiceType.ELINE.toString());
			oam.setOamMep(oamMep);
			oamList = oamInfoServiceMB.queryByServiceId(oam);
			ComparableSort sort = new ComparableSort();
			oamList = (List<OamInfo>) sort.compare(oamList);
			this.view.getOamTable().clear();
			this.view.getOamTable().initData(oamList);
			this.view.updateUI();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			UiUtil.closeService_MB(oamInfoServiceMB);
			elineInfo = null;
			oamList = null;
		}
	}

	private void initTopoPanel() {
		ElineInfo info = null;
		try {
			info = view.getSelect();
			view.getTopoPanel().clear();
			view.getTopoPanel().initData(info);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			info = null;
		}
	}

	/**
	 * 绑定AC列表数据
	 * 
	 * @author kk
	 * 
	 * @param
	 * 
	 * @return
	 * 
	 * @Exception 异常对象
	 */
	private void initAcPanel() {
		ElineInfo elineInfo = null;
		List<Integer> acIdList = null;
		try {
			acIdList = new ArrayList<Integer>();
			elineInfo = view.getSelect();

			acIdList.add(elineInfo.getaAcId());
			acIdList.add(elineInfo.getzAcId());

			view.getPortNetworkTablePanel().clear();
			view.getPortNetworkTablePanel().initData(acIdList);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			elineInfo = null;
			acIdList = null;
		}
	}

	/**
	 * 激活处理事件
	 */
	public void doActive() {
		List<ElineInfo> infos = null;
		String result = null;
		DispatchUtil dispatch = null;
		try {
			infos = this.view.getAllSelect();
			int failCount = 0;
			if (infos != null && infos.size() > 0) {
				dispatch = new DispatchUtil(RmiKeys.RMI_ELINE);
				for (ElineInfo info : infos) {
					info.setActiveStatus(EActiveStatus.ACTIVITY.getValue());
					result = dispatch.excuteUpdate(info);
					if(result == null || !result.contains(ResultString.CONFIG_SUCCESS)){
						failCount++;
					}
				}
				result = ResourceUtil.srcStr(StringKeysTip.TIP_BATCH_CREATE_RESULT);
				result = result.replace("{C}", (infos.size()-failCount) + "");
				result = result.replace("{S}", failCount + "");
			}
			String str = this.getOfflineSiteIdNames(infos);
			if(!str.equals("")){
				result += ","+str+ResultString.NOT_ONLINE_SUCCESS;
			}
			DialogBoxUtil.succeedDialog(this.view, result);
			UiUtil.insertOperationLog(EOperationLogType.ELINEACIVE.getValue(),result);
			this.refresh();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			infos = null;
			dispatch = null;
			result = null;
		}
	}
	
	private String getOfflineSiteIdNames(List<ElineInfo> elineList) throws Exception {
		List<Integer> siteIds = null;
		String str = "";
		try {
			siteIds = new ArrayList<Integer>();
			for (ElineInfo eline : elineList) {
				siteIds.add(eline.getaSiteId());
				siteIds.add(eline.getzSiteId());
			}
			str = new WhImplUtil().getNeNames(siteIds);
		} catch (Exception e) {
			throw e;
		}
		return str;
	}

	/**
	 * 去激活处理事件
	 */
	public void doUnActive() {
		List<ElineInfo> infos = null;
		String result = null;
		DispatchUtil dispatch = null;
		try {
			infos = this.view.getAllSelect();
			int failCount = 0;
			if (infos != null && infos.size() > 0) {
				dispatch = new DispatchUtil(RmiKeys.RMI_ELINE);
				for (ElineInfo info : infos) {
					info.setActiveStatus(EActiveStatus.UNACTIVITY.getValue());
					result = dispatch.excuteUpdate(info);
					if(result == null || !result.contains(ResultString.CONFIG_SUCCESS)){
						failCount++;
					}
				}
				result = ResourceUtil.srcStr(StringKeysTip.TIP_BATCH_CREATE_RESULT);
				result = result.replace("{C}", (infos.size()-failCount) + "");
				result = result.replace("{S}", failCount + "");
			}
			String str = this.getOfflineSiteIdNames(infos);
			if(!str.equals("")){
				result += ","+str+ResultString.NOT_ONLINE_SUCCESS;
			}
			DialogBoxUtil.succeedDialog(this.view, result);
			UiUtil.insertOperationLog(EOperationLogType.ELINEDOACIVE.getValue(),result);
			this.refresh();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			infos = null;
			dispatch = null;
			result = null;
		}
	}

	public void searchElineBusiness() {
//		ElineInfo elineInfo = null;
//		List<ELineObject> elineObject = null;
//		ActionObject actionObject = new ActionObject();
//		actionObject.setElineObjectList(elineObject);
//		try {
//			elineInfo.setPwId(elineObject.get(0).getVpwsId());
//			elineInfo.setaSiteId(elineObject.get(0).getPwIdNNI());
//
//		} catch (Exception e) {
//			ExceptionManage.dispose(e, this.getClass());
//		} finally {
//			elineInfo = null;
//			elineObject = null;
//
//		}
	}

	public void searchOam() throws Exception {
//		ElineInfo elineInfo = null;
//		List<OamInfo> oamList = null;
//		OamInfo oam = null;
//		OamMepInfo oamMep = null;
//		List<ELineObject> elineObject = null;
//		ActionObject actionObject = new ActionObject();
//		actionObject.setElineObjectList(elineObject);
//		try {
//
//			oam.setOamMep(oamMep);
//			elineInfo.setOamList(oamList);
//
//		} catch (Exception e) {
//			ExceptionManage.dispose(e, this.getClass());
//		} finally {
//			elineInfo = null;
//			oamList = null;
//			oam = null;
//			oamMep = null;
//			elineObject = null;
//
//		}
	}

	@Override
	public void openFilterDialog() throws Exception {
		new EthServiceFilterDialog(this.elineInfo);
		this.refresh();
	}

	// 清除过滤
	public void clearFilter() throws Exception {
		this.elineInfo=null;
		this.refresh();
	}

	/**
	 * 复制业务
	 */
	public void copy() {
		List<ElineInfo> elineList = this.view.getAllSelect();
		if (elineList != null && elineList.size() == 1) {
			
		}else{
			DialogBoxUtil.errorDialog(this.view, ResourceUtil.srcStr(StringKeysTip.TIP_SELECT_DATA_ONE));
		}
		
	}
}
