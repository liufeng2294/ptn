package com.nms.ui.ptn.clock.controller;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.List;

import com.nms.db.bean.equipment.port.PortInst;
import com.nms.db.bean.ptn.clock.FrequencyInfo;
import com.nms.db.enums.EOperationLogType;
import com.nms.model.ptn.clock.ClockFrequService;
import com.nms.model.util.Services;
import com.nms.rmi.ui.util.RmiKeys;
import com.nms.service.impl.util.ResultString;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.DialogBoxUtil;
import com.nms.ui.manager.DispatchUtil;
import com.nms.ui.manager.ExceptionManage;
import com.nms.ui.manager.MyActionListener;
import com.nms.ui.manager.ResourceUtil;
import com.nms.ui.manager.UiUtil;
import com.nms.ui.manager.control.PtnButton;
import com.nms.ui.manager.keys.StringKeysTip;
import com.nms.ui.manager.util.ClockUtil;
import com.nms.ui.ptn.clock.view.ArrangeClockDialog;
import com.nms.ui.ptn.clock.view.ClockRorateDialog;
import com.nms.ui.ptn.clock.view.FrequencyPanel;
import com.nms.ui.ptn.clock.view.QLClockDialog;

public class FrequencyPanelController {

	private FrequencyPanel view;
	private FrequencyInfo info = null;

	public FrequencyPanelController(FrequencyPanel view) {
		this.view = view;
		addListention();
		try {
			init();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}
	}

	/**
	 * 初始化界面值
	 */
	private void init() throws Exception {
		ClockFrequService service = null;
		List<FrequencyInfo> infoList = null;
		try {
			service = (ClockFrequService) ConstantUtil.serviceFactory.newService(Services.ClockFrequ);
			infoList = service.query(ConstantUtil.siteId);
			if (infoList != null && infoList.size() > 0) {
				info = infoList.get(0);
			}
			this.view.refresh(info);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			service = null;
		}
	}

	private void addListention() {
		// 设置按钮事件
		this.view.getConfimButton().addActionListener(new MyActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				try {
					String result = null;
					FrequencyInfo info = FrequencyPanelController.this.view.get();
					result = configFrequency(info);
					DialogBoxUtil.succeedDialog(FrequencyPanelController.this.view, result);
					UiUtil.insertOperationLog(EOperationLogType.CLOCKSET.getValue(),result);
				} catch (Exception e) {
					ExceptionManage.dispose(e, this.getClass());
				}
			}

			@Override
			public boolean checking() {
				return true;
			}
		});
		
		this.view.getSyncButton().addActionListener(new MyActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				synchro();
			}

			@Override
			public boolean checking() {
				return true;
			}
			
		});

		// 查询按钮事件
		this.view.getQueryButton().addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				try {
					FrequencyPanelController.this.init();
					DialogBoxUtil.succeedDialog(FrequencyPanelController.this.view, ResourceUtil.srcStr(StringKeysTip.TIP_CONFIG_SUCCESS));
				} catch (Exception e) {
					ExceptionManage.dispose(e, this.getClass());
				}

			}
		});

		// 设置时钟优先级排列
		view.getSetClockPRIList().addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent evt) {
				final ArrangeClockDialog dialog = new ArrangeClockDialog(evt.getActionCommand(), view.getClockPRIMapItems());
				dialog.setSize(new Dimension(500, 520));
				dialog.setLocation(UiUtil.getWindowWidth(dialog.getWidth()), UiUtil.getWindowHeight(dialog.getHeight()));
//				dialog.addWindowListener(new WindowAdapter() {
//					@Override
//					public void windowClosed(WindowEvent e) {
//						dialog.dispose();
//					}
//				});

				dialog.getConfirm().addActionListener(new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent arg0) {
						ClockUtil clockUtil=new ClockUtil();
						if (dialog.validated()) {
							String result = dialog.getInfo(1);
							view.setDefaultClockPRI(result);
							view.initClockPriAndOutSelect(result, view.getDefaultOutSelect(), clockUtil.getClockPRIList(ConstantUtil.siteId), clockUtil.getOutSelectList(ConstantUtil.siteId));
							DialogBoxUtil.succeedDialog(dialog, ResourceUtil.srcStr(StringKeysTip.TIP_CONFIG_SUCCESS));
							dialog.dispose();
						} else {
							DialogBoxUtil.errorDialog(dialog, ResourceUtil.srcStr(StringKeysTip.TIP_NOT_FULL));
						}
					}
				});
				dialog.setVisible(true);
			}

		});

		// 设置输出时钟选择
		view.getSetOutSelectList().addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent evt) {
				final ArrangeClockDialog dialog = new ArrangeClockDialog(evt.getActionCommand(), view.getOutSelectMapItems());
				dialog.setSize(new Dimension(500, 520));
				dialog.setLocation(UiUtil.getWindowWidth(dialog.getWidth()), UiUtil.getWindowHeight(dialog.getHeight()));
//				dialog.addWindowListener(new WindowAdapter() {
//					@Override
//					public void windowClosed(WindowEvent e) {
//						dialog.dispose();
//					}
//				});
				dialog.getConfirm().addActionListener(new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent arg0) {
						ClockUtil clockUtil=new ClockUtil();
						if (dialog.validated()) {
							String result = dialog.getInfo(2);
							view.setDefaultOutSelect(result);
							view.initClockPriAndOutSelect(view.getDefaultClockPRI(), result, clockUtil.getClockPRIList(ConstantUtil.siteId), clockUtil.getOutSelectList(ConstantUtil.siteId));
							DialogBoxUtil.succeedDialog(dialog, ResourceUtil.srcStr(StringKeysTip.TIP_CONFIG_SUCCESS));
							dialog.dispose();
						} else {
							DialogBoxUtil.errorDialog(dialog, ResourceUtil.srcStr(StringKeysTip.TIP_NOT_FULL));
						}
					}
				});
				dialog.setVisible(true);
			}
		});

		// 设置输入源QL值GE1
		view.getSetClockInQLValueList().addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent evt) {
				ClockUtil clockUtil=new ClockUtil();
				final QLClockDialog dialog = new QLClockDialog(evt.getActionCommand());
				dialog.init(view.getDefaultClockInQLValue());
				List<PortInst> portList = clockUtil.getFrequencyPorts(ConstantUtil.siteId);
				
				if (portList.size() == 4) {
					if(ResourceUtil.language.equals("zh_CN")){
						dialog.setSize(new Dimension(400, 350));
					}else{
						dialog.setSize(new Dimension(400, 350));
					}
					
				} else {
					if(ResourceUtil.language.equals("zh_CN")){
						dialog.setSize(new Dimension(450, 500));
					}else{
						dialog.setSize(new Dimension(600, 500));
					}
				}
				
				dialog.setLocation(UiUtil.getWindowWidth(dialog.getWidth()), UiUtil.getWindowHeight(dialog.getHeight()));
//				dialog.addWindowListener(new WindowAdapter() {
//					@Override
//					public void windowClosed(WindowEvent e) {
//						dialog.dispose();
//					}
//				});
				dialog.getConfirm().addActionListener(new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent evt) {
						try {
							view.setDefaultClockInQLValue(dialog.get());
							DialogBoxUtil.succeedDialog(dialog, ResourceUtil.srcStr(StringKeysTip.TIP_CONFIG_SUCCESS));
							dialog.dispose();
						} catch (Exception e) {
							ExceptionManage.dispose(e, this.getClass());
						}
					}
				});

				dialog.getCancel().addActionListener(new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent arg0) {
						dialog.dispose();
					}
				});
				dialog.setVisible(true);
			}
		});

		// 输出源的QL值GE1
		view.getSetClockOutQLValueList().addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent evt) {
				ClockUtil clockUtil=new ClockUtil();
				final QLClockDialog dialog = new QLClockDialog(evt.getActionCommand());
				dialog.init(view.getDefaultClockOutQLValue());
				List<PortInst> portList = clockUtil.getFrequencyPorts(ConstantUtil.siteId);
//				if (portList.size() == 4) {
//					dialog.setSize(new Dimension(400, 350));
//				} else {
//					dialog.setSize(new Dimension(450, 500));
//				}
				if (portList.size() == 4) {
					if(ResourceUtil.language.equals("zh_CN")){
						dialog.setSize(new Dimension(400, 350));
					}else{
						dialog.setSize(new Dimension(400, 350));
					}
					
				} else {
					if(ResourceUtil.language.equals("zh_CN")){
						dialog.setSize(new Dimension(450, 500));
					}else{
						dialog.setSize(new Dimension(600, 500));
					}
				}
				dialog.setLocation(UiUtil.getWindowWidth(dialog.getWidth()), UiUtil.getWindowHeight(dialog.getHeight()));
//				dialog.addWindowListener(new WindowAdapter() {
//					@Override
//					public void windowClosed(WindowEvent e) {
//						dialog.dispose();
//					}
//				});
				dialog.getConfirm().addActionListener(new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent arg0) {
						try {
							view.setDefaultClockOutQLValue(dialog.get());
							DialogBoxUtil.succeedDialog(dialog, ResourceUtil.srcStr(StringKeysTip.TIP_CONFIG_SUCCESS));
							dialog.dispose();
						} catch (Exception e) {
							ExceptionManage.dispose(e, this.getClass());
						}
					}
				});

				dialog.getCancel().addActionListener(new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent arg0) {
						dialog.dispose();
					}
				});
				dialog.setVisible(true);
			}

		});
		// 时钟倒换
		view.getClockRorate().addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				final ClockRorateDialog dialog = new ClockRorateDialog(info);
				UiUtil.showWindow(dialog, 450, 400);
			}
		});
	}

	public void synchro() {
		DispatchUtil frqDispatch = null;
		try {
			
			frqDispatch = new DispatchUtil(RmiKeys.RMI_CLOCKFREQU);
			String result = frqDispatch.synchro(ConstantUtil.siteId);
			DialogBoxUtil.succeedDialog(null, result);
			//添加日志记录
			UiUtil.insertOperationLog(EOperationLogType.SYNCSLOCK.getValue(),result);

			this.init();
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			frqDispatch = null;
		}
	}
	
	private String configFrequency(FrequencyInfo info) throws Exception {
		DispatchUtil service = null;
		String result = null;
		try {
			service = new DispatchUtil(RmiKeys.RMI_CLOCKFREQU);
			if (info.getId() == 0) {
				result = service.excuteInsert(info);
			} else {
				result = service.excuteUpdate(info);
			}
			this.init();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
			throw e;
		} finally {
			service = null;
		}
		return result;
	}

	public FrequencyPanel getView() {
		return view;
	}

	public void setView(FrequencyPanel view) {
		this.view = view;
	}
}
