package com.nms.db.dao.ptn.qos;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.qos.QosRelevance;
import com.nms.ui.manager.ExceptionManage;

/**
 * qos与业务关联数据库处理类
 * 
 * @author kk
 * 
 */
public class QosRelevanceDao {

	/**
	 * insert语句
	 */
	private final String SQL_INSERT = "insert into qosRelevance (objType,objId,siteId,qosGroupId) values (?,?,?,?)";

	/**
	 * update语句，根据objtype、objid、siteid修改qosgroupid。 修改业务关联的qos用。
	 */
	private final String SQL_UPDATE = "update qosRelevance set qosGroupId=? where objtype=? and objid=? and siteId=?";

	/**
	 * delete语句，根据objtype、objid删除，删除业务时用。
	 */
	private final String SQL_DELETE = "delete from qosRelevance where objtype=? and objid=?";

	/**
	 * 查询全部
	 */
	private final String SQL_SELECT = " select id,objtype,objid,siteid,qosGroupid from qosrelevance where 1=1 ";

	/**
	 * 插入
	 * 
	 * @param qosRelevance
	 *            bean对象
	 * @param connection
	 *            数据库连接
	 * @return 执行条数
	 * @throws Exception
	 */
	public int insert(QosRelevance qosRelevance, Connection connection) throws Exception {

		if (null == qosRelevance) {
			throw new Exception("qosrelevance is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		PreparedStatement preparedStatement = null;
		int result = 0;
		try {
			preparedStatement = connection.prepareStatement(this.SQL_INSERT);

			preparedStatement.setString(1, qosRelevance.getObjType());
			preparedStatement.setInt(2, qosRelevance.getObjId());
			preparedStatement.setInt(3, qosRelevance.getSiteId());
			preparedStatement.setInt(4, qosRelevance.getQosGroupId());

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
	}

	/**
	 * 根据objtype、objid、siteid修改groupid
	 * 
	 * @param qosRelevance
	 *            bean
	 * @param connection
	 *            数据库连接
	 * @return 修改成功记录数
	 * @throws Exception
	 */
	public int update(QosRelevance qosRelevance, Connection connection) throws Exception {

		if (null == qosRelevance) {
			throw new Exception("qosrelevance is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		PreparedStatement preparedStatement = null;
		int result = 0;
		try {

			preparedStatement = connection.prepareStatement(this.SQL_UPDATE);
			preparedStatement.setInt(1, qosRelevance.getQosGroupId());
			preparedStatement.setString(2, qosRelevance.getObjType());
			preparedStatement.setInt(3, qosRelevance.getObjId());
			preparedStatement.setInt(4, qosRelevance.getSiteId());

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
	}

	/**
	 * 根据objtype、objid删除记录
	 * 
	 * @param qosRelevance
	 *            bean
	 * @param connection
	 *            数据库连接
	 * @return 删除成功记录数
	 * @throws Exception
	 */
	public int delete(QosRelevance qosRelevance, Connection connection) throws Exception {

		if (null == qosRelevance) {
			throw new Exception("qosrelevance is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		PreparedStatement preparedStatement = null;
		int result = 0;
		try {

			preparedStatement = connection.prepareStatement(this.SQL_DELETE);
			preparedStatement.setString(1, qosRelevance.getObjType());
			preparedStatement.setInt(2, qosRelevance.getObjId());

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
	}

	/**
	 * 查询 当 qosRelevance = null 的时候 查询全部
	 * 
	 * @param qosRelevance
	 *            查询条件 当为null的时候 查询全部
	 * @param connection
	 *            数据库连接
	 * @return 结果集
	 * @throws Exception
	 */
	public List<QosRelevance> queryByCondition(QosRelevance qosRelevance, Connection connection) throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}

		StringBuffer sql = null;
		List<Object> paramList = null;
		PreparedStatement preparedStatement = null;
		List<QosRelevance> qosRelevanceList = null;
		try {
			sql = new StringBuffer(this.SQL_SELECT);

			// 根据条件拼sql语句
			if (null != qosRelevance) {
				paramList = new ArrayList<Object>();

				if (qosRelevance.getId() > 0) {
					sql.append(" and id = ?");
					paramList.add(qosRelevance.getId());
				}

				if (null != qosRelevance.getObjType() && !"".equals(qosRelevance.getObjType())) {
					sql.append(" and objtype = ?");
					paramList.add(qosRelevance.getObjType());
				}

				if (qosRelevance.getObjId() > 0) {
					sql.append(" and objid = ?");
					paramList.add(qosRelevance.getObjId());
				}

				if (qosRelevance.getSiteId() > 0) {
					sql.append(" and siteId = ?");
					paramList.add(qosRelevance.getSiteId());
				}
				
				if (qosRelevance.getQosGroupId() > 0) {
					sql.append(" and QosGroupId = ?");
					paramList.add(qosRelevance.getQosGroupId());
				}
			}

			preparedStatement = connection.prepareStatement(sql.toString());
			if (null != paramList && paramList.size() > 0) {
				for (int i = 1; i <= paramList.size(); i++) {
					preparedStatement.setObject(i, paramList.get(i - 1));
				}
			}
			qosRelevanceList = this.executeQuery(preparedStatement);

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
			paramList = null;
		}
		return qosRelevanceList;
	}

	/**
	 * 执行查询方法，返回结果集
	 * 
	 * @param preparedStatement
	 * @return
	 * @throws Exception
	 */
	private List<QosRelevance> executeQuery(PreparedStatement preparedStatement) throws Exception {

		if (null == preparedStatement) {
			throw new Exception("preparedStatement is null");
		}

		ResultSet resultSet = null;
		QosRelevance qosRelevance = null;
		List<QosRelevance> qosRelevanceList = null;
		try {
			qosRelevanceList = new ArrayList<QosRelevance>();
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				qosRelevance = new QosRelevance();
				qosRelevance.setId(resultSet.getInt("id"));
				qosRelevance.setObjId(resultSet.getInt("objId"));
				qosRelevance.setObjType(resultSet.getString("objtype"));
				qosRelevance.setQosGroupId(resultSet.getInt("qosGroupid"));
				qosRelevance.setSiteId(resultSet.getInt("siteId"));

				qosRelevanceList.add(qosRelevance);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if(null != resultSet){
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			qosRelevance = null;
		}
		return qosRelevanceList;
	}
	
	/**
	 * 查询 当 qosRelevance = null 的时候 查询全部
	 * 
	 * @param qosRelevance
	 *            查询条件 当为null的时候 查询全部
	 * @param connection
	 *            数据库连接
	 * @return 结果集
	 * @throws Exception
	 */
	public List<QosRelevance> queryByConditionFor700Plus(QosRelevance qosRelevance, Connection connection) throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}

		StringBuffer sql = null;
		List<Object> paramList = null;
		PreparedStatement preparedStatement = null;
		List<QosRelevance> qosRelevanceList = null;
		try {
			sql = new StringBuffer("SELECT id, objtype, objid, siteid, qosGroupid FROM qosrelevance q, site_inst s WHERE 1 = 1 AND q.siteId = s.site_inst_id AND s.manufacturer = 0 ");

			// 根据条件拼sql语句
			if (null != qosRelevance) {
				paramList = new ArrayList<Object>();

				if (qosRelevance.getId() > 0) {
					sql.append(" and id = ?");
					paramList.add(qosRelevance.getId());
				}

				if (null != qosRelevance.getObjType() && !"".equals(qosRelevance.getObjType())) {
					sql.append(" and objtype = ?");
					paramList.add(qosRelevance.getObjType());
				}

				if (qosRelevance.getObjId() > 0) {
					sql.append(" and objid = ?");
					paramList.add(qosRelevance.getObjId());
				}

				if (qosRelevance.getSiteId() > 0) {
					sql.append(" and siteId = ?");
					paramList.add(qosRelevance.getSiteId());
				}
				
				if (qosRelevance.getQosGroupId() > 0) {
					sql.append(" and QosGroupId = ?");
					paramList.add(qosRelevance.getQosGroupId());
				}
			}

			preparedStatement = connection.prepareStatement(sql.toString());
			if (null != paramList && paramList.size() > 0) {
				for (int i = 1; i <= paramList.size(); i++) {
					preparedStatement.setObject(i, paramList.get(i - 1));
				}
			}
			qosRelevanceList = this.executeQuery(preparedStatement);
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
			paramList = null;
		}
		return qosRelevanceList;
	}

	public void delete(int siteId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		try {
			String sql = "delete from qosRelevance where siteId="+siteId;;
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.executeUpdate();
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
	}
}
