package com.nms.db.dao.ptn.ecn;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.ecn.CCN;
import com.nms.ui.manager.ExceptionManage;


public class CCNDao {
	private final String SQL_INSERT = "insert into ecn_ccn(neId,ccnName,admin,oper,ip,peer,mtu,portname,status) values(?,?,?,?,?,?,?,?,?)";
	private final String SQL_SELECTBYID = "SELECT * from ecn_ccn WHERE neId = ?";
	private final String SQL_DELETEBYID = "DELETE from ecn_ccn WHERE id = ?";
	private final String SQL_UPDATE = "UPDATE ecn_ccn SET admin = ? , ip = ? , peer = ?, mtu = ?,oper=?,portname=?,status=? WHERE id = ?";
	private final String SQL_SELECTBYIDNAME = "SELECT * from ecn_ccn WHERE neId = ? and ccnName = ?";

	public int insert(CCN ccn, Connection connection) throws Exception {
		if (null == ccn) {
			throw new Exception("ccn is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		int result = 0;
		ResultSet resultSet = null;

		try {

			preparedStatement = connection.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setString(1, ccn.getNeId());
			preparedStatement.setString(2, ccn.getCcnName());
			preparedStatement.setString(3, ccn.getAdmin());
			preparedStatement.setString(4, ccn.getOper());
			preparedStatement.setString(5, ccn.getIp());
			preparedStatement.setString(6, ccn.getPeer());
			preparedStatement.setInt(7, ccn.getMtu());
			preparedStatement.setString(8, ccn.getPortname());
			preparedStatement.setInt(9, ccn.getStatus());
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				result = resultSet.getInt(1);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e2) {
					throw e2;
				}
				resultSet=null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e2) {
					throw e2;
				}
				preparedStatement=null;
			}
		}
		return result;
	}

	public List<CCN> queryByNeID(String NeID, Connection connection) throws Exception {
		if (null == NeID) {
			throw new Exception("NeID is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<CCN> mcnList = null;
		CCN ccn = null;
		try {
			preparedStatement = connection.prepareStatement(SQL_SELECTBYID);
			preparedStatement.setInt(1, Integer.valueOf(NeID));//
			resultSet = preparedStatement.executeQuery();
			mcnList = new ArrayList<CCN>();
			while (resultSet.next()) {
				ccn = new CCN();
				ccn.setId(resultSet.getInt(1));
				ccn.setNeId(resultSet.getString(2));
				ccn.setCcnName(resultSet.getString(3));
				ccn.setAdmin(resultSet.getString(4));
				ccn.setOper(resultSet.getString(5));
				ccn.setIp(resultSet.getString(6));
				ccn.setPeer(resultSet.getString(7));
				ccn.setMtu(resultSet.getInt(8));
				ccn.setPortname(resultSet.getString("portname"));
				ccn.setStatus(resultSet.getInt(10));
				mcnList.add(ccn);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet=null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			ccn = null;
		}
		return mcnList;
	}

	public int deleteById(CCN ccn, Connection connection) throws Exception {
		if (null == ccn) {
			throw new Exception("ccn is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		int result = 0;
		try {
			preparedStatement = connection.prepareStatement(SQL_DELETEBYID);
			preparedStatement.setInt(1, Integer.valueOf(ccn.getId()));
			result=preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
	}

	public int deleteById(int id, Connection connection) throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		int result = 0;
		try {
			preparedStatement = connection.prepareStatement(SQL_DELETEBYID);
			preparedStatement.setInt(1, Integer.valueOf(id));
			result=preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
	}

	public int update(CCN ccn, Connection connection) throws Exception {
		if (null == ccn) {
			throw new Exception("ccn is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			preparedStatement = connection.prepareStatement(SQL_UPDATE);
			preparedStatement.setString(1, ccn.getAdmin());
			preparedStatement.setString(2, ccn.getIp());
			preparedStatement.setString(3, ccn.getPeer());
			preparedStatement.setInt(4, ccn.getMtu());
			preparedStatement.setString(5, ccn.getOper());
			preparedStatement.setString(6, ccn.getPortname());
			preparedStatement.setInt(8, ccn.getId());
			preparedStatement.setInt(7, ccn.getStatus());

			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
	}

	public List<CCN> selectByNeIdAndName(String name, int neId, Connection connection) throws Exception {
		if (null == name) {
			throw new Exception("name is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		List<CCN> ccnList = null;
		CCN ccn = null;
		ResultSet result = null;
		PreparedStatement preparedStatement = null;
		try {
			ccnList=new ArrayList<CCN>();
			preparedStatement = connection.prepareStatement(SQL_SELECTBYIDNAME);
			preparedStatement.setInt(1, neId);
			preparedStatement.setString(2, name);
			result = preparedStatement.executeQuery();

			while (result.next()) {
				ccn = new CCN();
				ccn.setId(result.getInt(1));
				ccn.setNeId(result.getString(2));
				ccn.setCcnName(result.getString(3));
				ccn.setAdmin(result.getString(4));
				ccn.setOper(result.getString(5));
				ccn.setIp(result.getString(6));
				ccn.setPeer(result.getString(7));
				ccn.setMtu(result.getInt(8));
				ccn.setPortname(result.getString("portname"));
				ccn.setMtu(result.getInt("status"));
				ccnList.add(ccn);

			}
		} catch (Exception e) {
			throw e;
		} finally{
			if(null!=result){
				try {
					result.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				result=null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			ccn = null;
		}
		return ccnList;
	}
	/**
	 * -----------新增   sy
	 *   更改激活状态
	 * @param ccn
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int updateStatus(CCN ccn, Connection connection) throws Exception {
		if (null == ccn) {
			throw new Exception("ccn is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		int result = 0;
		String sql="UPDATE ecn_ccn SET status=? WHERE neId=? ";
		try {
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, ccn.getStatus());
	
			//preparedStatement.setString(3, ccn.getCcnName());
			preparedStatement.setString(2, ccn.getNeId());

			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
	}
}
