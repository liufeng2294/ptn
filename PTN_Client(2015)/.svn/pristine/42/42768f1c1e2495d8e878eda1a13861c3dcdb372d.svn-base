package com.nms.model.path;

import java.util.List;

import org.apache.ibatis.session.SqlSession;

import com.nms.db.bean.equipment.port.PortInst;
import com.nms.db.bean.path.Segment;
import com.nms.db.dao.path.SegmentMapper;
import com.nms.model.util.ObjectService_Mybatis;
import com.nms.ui.manager.UiUtil;

public class SegmentService_MB extends ObjectService_Mybatis {
	private SegmentMapper mapper = null;
	
	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}

	public void setSqlSession(SqlSession sqlSession) {
		super.sqlSession = sqlSession;
	}

	/**
	 * 计算两个端口的端口速率是否一样
	 * @param portInst_a 端口A
	 * @param portInst_z 端口Z
	 * @return true 速率相同 false 速率不同
	 * @throws Exception
	 */
	public boolean comparePortSpeed(PortInst portInst_a, PortInst portInst_z) throws Exception {
		if (null == portInst_a && null == portInst_z) {
			throw new Exception("portInst is null");
		}
		boolean flag = false;
		try {
			int speed_a = this.getPortSpeed(portInst_a);
			int speed_z = this.getPortSpeed(portInst_z);
			if (speed_a == speed_z) {
				flag = true;
			}
		} catch (Exception e) {
			throw e;
		}
		return flag;
	}

	/**
	 * 根据端口获取端口速率
	 * @param portInst 端口对象
	 * @return 速率 100 1000 以MB为单位
	 * @throws Exception
	 */
	private int getPortSpeed(PortInst portInst) throws Exception {
		String speed = null;
		int beginIndex = 0;
		int result = 0;
		try {
			// 此字段有值，说明是晨晓的端口
			if (portInst.getPortAttr().getPortSpeed() != 0) {
				// 速率为code名称
				speed = UiUtil.getCodeById(portInst.getPortAttr().getPortSpeed()).getCodeName();
				// 根据速率，取出第一个为int类型的索引 如 自协商1G 索引指向1
				for (int i = 0; i < speed.length(); i++) {
					if (Character.isDigit(speed.charAt(i))) {
						beginIndex = i;
						break;
					}
				}
				// 取出速率单位。 单位放在最后一个字符
				String unit = speed.substring(speed.length() - 1, speed.length());
				// 根据int类型开始索引取出速率
				speed = speed.substring(beginIndex, speed.length() - 1);
				result = Integer.parseInt(speed);
				// 如果单位是G 把速率转换为M 因为武汉速率都为整数。 所以在这里乘以1000而不是1024
				if ("G".equals(unit)) {
					result = result * 1000;
				}
			} else if (portInst.getPortAttr().getWorkModel() != 0) { // 如果此字段有值 说明是武汉端口 武汉端口的速率格式为 100M 1000M 自协商 等
				// 速率为code名称
				speed = UiUtil.getCodeById(portInst.getPortAttr().getWorkModel()).getCodeName();
				// 取出M的索引
				int unitIndex = speed.indexOf('M');
				// 如果M的索引为-1 说明是自协商 需要根据端口类型验证
				// fe=100M ge、fx=1000M xg=10000M
				if (unitIndex == -1) {
					// 取端口类型 fe、ge、fx、xg
					String portType = portInst.getPortName().substring(0, 2);
					if ("fe".equals(portType)) {
						result = 100;
					} else if ("xg".equals(portType)) {
						result = 10000;
					} else if ("ge".equals(portType) || "fx".equals(portType)) {
						result = 1000;
					}
				} else {
					result = Integer.parseInt(speed.substring(0, unitIndex));
				}
			}
		} catch (Exception e) {
			throw e;
		}
		return result;
	}

	/**
	 * 根据siteId和portId去查询
	 * 获取参数时取segmentCondition的aSiteId和aPortId
	 * @param segmentCondition
	 * @return
	 * @throws Exception
	 */
	public List<Segment> selectBySiteIdAndPort(Segment segmentCondition) throws Exception {
		return this.mapper.queryBySiteIdAndPortId(segmentCondition);
	}
	
	/**
	 * 根据网元ID查询
	 * 
	 * @author kk
	 * 
	 * @param
	 * 
	 * @return
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	public List<Segment> selectBySite(int siteId) throws Exception {
		return this.mapper.query_site(siteId);
	}

	public SegmentMapper getMapper() {
		return mapper;
	}

	public void setMapper(SegmentMapper mapper) {
		this.mapper = mapper;
	}
	
	
}
