package com.nms.db.dao.ptn;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.SmartFan;
import com.nms.ui.manager.ExceptionManage;

public class SmartFanDao {

	public void save(SmartFan fan, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		try {
			String sql = "insert into smartfan(siteId,workType,gearLevel) values(?,?,?)";
			preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, fan.getSiteId());
			preparedStatement.setInt(2, fan.getWorkType());
			preparedStatement.setInt(3, fan.getGearLevel());
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
		}
	}

	public void update(SmartFan fan, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;

		try {
			String sql = "update smartfan set workType=?, gearLevel=? where id=?";
			preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, fan.getWorkType());
			preparedStatement.setInt(2, fan.getGearLevel());
			preparedStatement.setInt(3, fan.getId());
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
		}
	}

	public List<SmartFan> selectAll(int siteId, Connection connection) throws Exception {
		if (connection == null) {
			throw new Exception("connection is null");
		}
		List<SmartFan> fanList = new ArrayList<SmartFan>();;
		PreparedStatement preparedStatement = null;
		try {
			String sql = "select * from smartfan m where m.siteId = "+ siteId + " order by m.id desc";
			preparedStatement = connection.prepareStatement(sql);
			fanList = this.excuteQuery(preparedStatement);
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
		}
		return fanList;
	}

	private List<SmartFan> excuteQuery(PreparedStatement preparedStatement) throws Exception {
		List<SmartFan> fanList = new ArrayList<SmartFan>();
		ResultSet resultSet = null;
		try {
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				SmartFan fan = new SmartFan();
				fan.setId(resultSet.getInt("id"));
				fan.setSiteId(resultSet.getInt("siteId"));
				fan.setWorkType(resultSet.getInt("workType"));
				fan.setGearLevel(resultSet.getInt("gearLevel"));
				fanList.add(fan);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
		}
		return fanList;
	}

	public void deleteBySiteId(int siteId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		PreparedStatement preparedStatement = null;
		try {
			String sql = "delete from smartfan where siteId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
	}
}