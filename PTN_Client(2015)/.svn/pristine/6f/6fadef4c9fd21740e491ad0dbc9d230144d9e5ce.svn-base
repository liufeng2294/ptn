package com.nms.model.equipment.slot;

import java.sql.Connection;
import java.util.List;

import com.nms.db.bean.equipment.card.CardInst;
import com.nms.db.bean.equipment.slot.SlotInst;
import com.nms.db.dao.equipment.slot.SlotInstDao;
import com.nms.model.equipment.card.CardService;
import com.nms.model.util.ObjectService;
import com.nms.model.util.Services;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.ExceptionManage;

public class SlotService extends ObjectService {
	public void setConnection(Connection connection) {
		super.connection = connection;
	}

	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}

	private SlotInstDao slotInstDao = new SlotInstDao();

	/**
	 * 新增或修改slotinst对象，通过slotinst.getSlot_Inst_Id()来判断是修改还是新增
	 * 
	 * @param slotinst
	 *            实体
	 * @return 执行成功插入的记录数
	 * @throws Exception
	 */
	public int saveOrUpdate(SlotInst slotinst) throws Exception {

		if (slotinst == null) {
			throw new Exception("slotinst is null");
		}

		int result = 0;
		try {

			if (slotinst.getId() == 0) {
				result = this.slotInstDao.insert(slotinst, connection);
			} else {
				result = this.slotInstDao.update(slotinst, connection);
			}

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return result;
	}

	/**
	 * 通过主键删除
	 * 
	 * @param Slot_Inst_Id
	 *            主键
	 * @return 删除的记录数
	 * @throws Exception
	 */
	public int delete(int id) throws Exception {

		int result = 0;

		try {
			result = slotInstDao.delete(id, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return result;

	}

	/**
	 * 查询全部
	 * 
	 * @return List<SlotInst> 集合
	 * @throws Exception
	 */
	public List<SlotInst> select() throws Exception {
		List<SlotInst> slotinstlist = null;
		try {
			SlotInst slotinst = new SlotInst();
			slotinstlist = slotInstDao.queryByCondition(slotinst, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return slotinstlist;
	}
	/**
	 * 统计查询
	 * 
	 * @return List<SlotInst> 集合
	 * @throws Exception
	 */
	public List<SlotInst> selectbystatistics() throws Exception {
		List<SlotInst> slotinstlist = null;

		try {
			SlotInst slotinst = new SlotInst();
			slotinstlist = slotInstDao.queryByCondition(connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return slotinstlist;
	}

	/**
	 * 根据条件查询
	 * 
	 * @param slotinst
	 *            查询条件
	 * @return List<SlotInst> 集合
	 * @throws Exception
	 */
	public List<SlotInst> select(SlotInst slotinst) throws Exception {
		List<SlotInst> slotinstList = null;
		CardInst cardInst=null;
		CardService cardService=null;
		List<CardInst> cardInstList=null;

		try {
			slotinstList = slotInstDao.queryByCondition(slotinst, connection);
			
			if(slotinst!=null && slotinstList.size()>0){
				cardService=(CardService) ConstantUtil.serviceFactory.newService(Services.CARD, this.connection);
				for(int i = 0 ; i < slotinstList.size() ; i++){
					cardInst=new CardInst();
					cardInst.setSlotId(slotinstList.get(i).getId());
					cardInstList=cardService.select(cardInst);
					
					if(cardInstList!=null && cardInstList.size()==1){
						cardInstList.get(0).setSlotInst(slotinstList.get(i));
						slotinstList.get(i).setCardInst(cardInstList.get(0));
					}else{
						slotinstList.get(i).setCardInst(null);
					}
				}
			}
			
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
//			UiUtil.closeService(cardService);
		}
		return slotinstList;
	}
	
	public SlotInst select(int portId) throws Exception{
		SlotInst slotInst=null;
		try {
			slotInst = this.slotInstDao.queryByPortId(portId, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return slotInst;
	}
	
	public void updateMasterMacAddress(SlotInst slotInst) throws Exception{
		try {
			this.slotInstDao.updateMasterAddress(slotInst, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
	}

	
	public int selectNumber(CardInst cardinst, int siteId) throws Exception{
		// TODO Auto-generated method stub
		int result=0;
		try {
		result = this.slotInstDao.querryByType(cardinst.getSlotId(),siteId,connection);	
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return result;
	}
//	public static void main(String[] args) {
//
//		try {
//			SlotService slotservice = new SlotService();
//			slotservice.setConnection(DBManager.getConnection());
//
//			SlotInst slotinst = new SlotInst();
//			
//			slotinst.setId(4);
//			slotinst.setEquipId(19);
//			
//			System.out.println(slotservice.delete(6));
//
////			System.out.println(portAttrService.select(portAttr).size());
//
//		} catch (Exception e) {
//			ExceptionManage.dispose(e,this.getClass());
//		}
//	}
}
