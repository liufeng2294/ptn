package com.nms.db.dao.ptn.port;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.port.AcPortInfo;
import com.nms.ui.manager.ExceptionManage;

public class AcDao {
	/**
	 * 插入Sql
	 */
	private final String INSERTSQL = "insert into acinfo(siteId,portId,lagId,portModel,operatorVlanId,clientVlanId,managerEnable,exitRule,vlanId,vlancri,vlanpri,horizontalDivision,macAddressLearn,tagAction,jobStatus,acBusinessId,bufType,name,isUser,model,acstatus,macCount,lanId) " + "values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	/**
	 * 更新Sql
	 */
	private final String UPDATESQL = "update acinfo set siteId=?,portId=?,lagId=?,portModel=?,operatorVlanId=?,clientVlanId=?,managerEnable=?,exitRule=?,vlanId=?,vlancri=?,vlanpri=?,horizontalDivision=?,macAddressLearn=?,tagAction=?,jobStatus=?,acBusinessId=?,bufType=?,name=?,isUser=?, model=? , acstatus = ? ,macCount=? ,lanId=? where Id=?";
	/**
	 * 删除Sql
	 */
	private final String DELETESQL = "delete from acinfo where Id=?";

	/**
	 * 查询Sql
	 */
	private final String SELECTSQL = "SELECT * FROM acinfo WHERE 1=1";

	/**
	 * 根据名称查询
	 */
	private final String SELECT_BY_NAME = "select count(id) as account from acinfo where name=? and siteId=?";

	/**
	 * 创建ac
	 * 
	 * @param acPortinfo
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int insert(AcPortInfo acPortinfo, Connection connection) throws Exception {

		if (null == acPortinfo) {
			throw new Exception("acPortinfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		ResultSet resultSet = null;
		try {
			sql = INSERTSQL;
			preparedStatement = connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, acPortinfo.getSiteId());
			preparedStatement.setInt(2, acPortinfo.getPortId());
			preparedStatement.setInt(3, acPortinfo.getLagId());
			preparedStatement.setInt(4, acPortinfo.getPortModel());
			preparedStatement.setString(5, acPortinfo.getOperatorVlanId());
			preparedStatement.setString(6, acPortinfo.getClientVlanId());
			preparedStatement.setInt(7, acPortinfo.getManagerEnable());
			preparedStatement.setInt(8, acPortinfo.getExitRule());
			preparedStatement.setString(9, acPortinfo.getVlanId());
			preparedStatement.setString(10, acPortinfo.getVlancri());
			preparedStatement.setString(11, acPortinfo.getVlanpri());
			preparedStatement.setInt(12, acPortinfo.getHorizontalDivision());
			preparedStatement.setInt(13, acPortinfo.getMacAddressLearn());
			preparedStatement.setInt(14, acPortinfo.getTagAction());
			preparedStatement.setString(15, acPortinfo.getJobStatus());
			preparedStatement.setInt(16, acPortinfo.getAcBusinessId());
			preparedStatement.setInt(17, acPortinfo.getBufType());
			preparedStatement.setString(18, acPortinfo.getName());
			preparedStatement.setInt(19, acPortinfo.getIsUser());
			preparedStatement.setInt(20, acPortinfo.getModel());
			preparedStatement.setInt(21, acPortinfo.getAcStatus());
			preparedStatement.setInt(22, acPortinfo.getMacCount());
			preparedStatement.setInt(23, acPortinfo.getLanId());
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			while (resultSet.next()) {
				result = resultSet.getInt(1);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if(null!=resultSet){
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}

			sql = null;
		}

		return result;
	}

	/**
	 * 更新ac
	 * 
	 * @param acPortInfo
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int update(AcPortInfo acPortinfo, Connection connection) throws Exception {
		if (null == acPortinfo) {
			throw new Exception("acPortInfo is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = UPDATESQL;

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, acPortinfo.getSiteId());
			preparedStatement.setInt(2, acPortinfo.getPortId());
			preparedStatement.setInt(3, acPortinfo.getLagId());
			preparedStatement.setInt(4, acPortinfo.getPortModel());
			preparedStatement.setString(5, acPortinfo.getOperatorVlanId());
			preparedStatement.setString(6, acPortinfo.getClientVlanId());
			preparedStatement.setInt(7, acPortinfo.getManagerEnable());
			preparedStatement.setInt(8, acPortinfo.getExitRule());
			preparedStatement.setString(9, acPortinfo.getVlanId());
			preparedStatement.setString(10, acPortinfo.getVlancri());
			preparedStatement.setString(11, acPortinfo.getVlanpri());
			preparedStatement.setInt(12, acPortinfo.getHorizontalDivision());
			preparedStatement.setInt(13, acPortinfo.getMacAddressLearn());
			preparedStatement.setInt(14, acPortinfo.getTagAction());
			preparedStatement.setString(15, acPortinfo.getJobStatus());
			preparedStatement.setInt(16, acPortinfo.getAcBusinessId());
			preparedStatement.setInt(17, acPortinfo.getBufType());
			preparedStatement.setString(18, acPortinfo.getName());
			preparedStatement.setInt(19, acPortinfo.getIsUser());
			preparedStatement.setInt(20, acPortinfo.getModel());
			preparedStatement.setInt(21, acPortinfo.getAcStatus());
			preparedStatement.setInt(22, acPortinfo.getMacCount());
			preparedStatement.setInt(23, acPortinfo.getLanId());
			preparedStatement.setInt(24, acPortinfo.getId());
			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	public int setUser(int acId, int isused, Connection connection) throws Exception {
		if (acId == 0) {
			throw new Exception("acId is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		try {
			sql = "update acinfo set IsUser = ? where Id=? ";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, isused);
			preparedStatement.setInt(2, acId);
			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 通过主键删除acPortinfo
	 * 
	 * @param id
	 *            主键
	 * @param connection
	 *            数据库连接
	 * @return 删除的记录数
	 * @throws Exception
	 */
	public int delete(int id, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = DELETESQL;
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, id);

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	public int deleteBySiteId(int siteId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "delete from acinfo where siteId=?";
			;
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 批量删除
	 * 
	 * @param acIdList
	 * @param connection
	 * @throws Exception
	 */
	public void delete(List<Integer> acIdList, Connection connection) throws Exception {
		if (null == acIdList) {
			throw new Exception("acidList is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		String acId = null;
		String ids = null;
		PreparedStatement preparedStatement = null;
		try {
			acId = acIdList.toString();
			ids = acId.substring(1, acId.length() - 1);
			sql = "delete  FROM acinfo WHERE Id in " + "(" + ids + ")";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			
			sql = null;
			acId = null;
			ids = null;
			
		}
	}

	/**
	 * 通过条件查询
	 * 
	 * @param elaninfocondition
	 *            查询条件
	 * @param connection
	 *            数据库连接
	 * @return List<ElineInfo>集合
	 * @throws Exception
	 */
	public List<AcPortInfo> queryByCondition(AcPortInfo acPortInfocondition, Connection connection) throws Exception {
		if (null == acPortInfocondition) {
			throw new Exception("acPortInfocondition is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		List<AcPortInfo> list = null;
		try {

			sql = SELECTSQL;
			if (acPortInfocondition.getId() > 0) {
				sql += " and Id=" + acPortInfocondition.getId();
			}
			if (acPortInfocondition.getSiteId() > 0) {
				sql += " and siteId=" + acPortInfocondition.getSiteId();
			}
			if (acPortInfocondition.getPortId() > 0) {
				sql += " and portId=" + acPortInfocondition.getPortId();
			}
			if (acPortInfocondition.getAcBusinessId() > 0) {
				sql += " and AcBusinessId=" + acPortInfocondition.getAcBusinessId();
			}
			if (acPortInfocondition.getLagId() > 0) {
				sql += " and lagid=" + acPortInfocondition.getLagId();
			}
			if (acPortInfocondition.getAcStatus() > 0) {
				sql += " and acStatus=" + acPortInfocondition.getAcStatus();
			}
			// if (acPortInfocondition.getModel() > 0) {
			// sql += " and model=" + acPortInfocondition.getModel();
			// }
			// if (acPortInfocondition.getTagValnId() > 0) {
			// sql += " and TagValnId=" + acPortInfocondition.getTagValnId();
			// }

			list = this.excuteQuery(connection, sql);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return list;
	}

	public List<AcPortInfo> queryAll(Connection connection) throws Exception {

		String sql = null;
		List<AcPortInfo> infoList = null;
		try {
			sql = SELECTSQL;
			infoList = this.excuteQuery(connection, sql);

		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return infoList;
	}

	/**
	 * 通过acIdList批量查询
	 */
	public List<AcPortInfo> queryByAcIdCondition(List<Integer> idList, Connection connection) throws Exception {

		if (null == idList) {
			throw new Exception("acidList is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		List<AcPortInfo> acInfoList = null;
		String sql = null;
		String acId = null;
		String ids = null;
		try {
			acId = idList.toString();
			ids = acId.substring(1, acId.length() - 1);
			acInfoList = new ArrayList<AcPortInfo>();
			sql = "SELECT * FROM acinfo WHERE Id in " + "(" + ids + ")";
			acInfoList = this.excuteQuery(connection, sql);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
			acId = null;
			ids = null;
		}
		return acInfoList;

	}

	/**
	 * 执行查询语句
	 * 
	 * @param connection
	 *            数据库连接
	 * @param sql
	 *            sql语句
	 * @return 查询集合
	 * @throws Exception
	 */
	private List<AcPortInfo> excuteQuery(Connection connection, String sql) throws Exception {
		List<AcPortInfo> acPortInfoList = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		AcPortInfo acPortinfo = null;
		try {
			acPortInfoList = new ArrayList<AcPortInfo>();
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				acPortinfo = new AcPortInfo();
				acPortinfo.setSiteId(resultSet.getInt("SiteId"));
				acPortinfo.setPortId(resultSet.getInt("PortId"));
				acPortinfo.setLagId(resultSet.getInt("LagId"));
				acPortinfo.setPortModel(resultSet.getInt("PortModel"));
				acPortinfo.setOperatorVlanId(resultSet.getString("OperatorVlanId"));
				acPortinfo.setClientVlanId(resultSet.getString("ClientVlanId"));
				acPortinfo.setManagerEnable(resultSet.getInt("ManagerEnable"));
				acPortinfo.setExitRule(resultSet.getInt("ExitRule"));
				acPortinfo.setVlanId(resultSet.getString("VlanId"));
				acPortinfo.setVlancri(resultSet.getString("Vlancri"));
				acPortinfo.setVlanpri(resultSet.getString("Vlanpri"));
				acPortinfo.setHorizontalDivision(resultSet.getInt("HorizontalDivision"));
				acPortinfo.setMacAddressLearn(resultSet.getInt("MacAddressLearn"));
				acPortinfo.setTagAction(resultSet.getInt("TagAction"));
				acPortinfo.setJobStatus(resultSet.getString("JobStatus"));
				acPortinfo.setAcBusinessId(resultSet.getInt("AcBusinessId"));
				acPortinfo.setBufType(resultSet.getInt("BufType"));
				acPortinfo.setName(resultSet.getString("Name"));
				acPortinfo.setIsUser(resultSet.getInt("IsUser"));
				acPortinfo.setId(resultSet.getInt("Id"));
				acPortinfo.setModel(resultSet.getInt("model"));
				acPortinfo.setAcStatus(resultSet.getInt("acStatus"));
				acPortinfo.setMacCount(resultSet.getInt("macCount"));
				acPortinfo.setLanId(resultSet.getInt("lanId"));
				acPortInfoList.add(acPortinfo);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			acPortinfo = null;
		}

		return acPortInfoList;
	}

	/**
	 * 查询名称是否重复
	 * 
	 * @author kk
	 * 
	 * @param
	 * 
	 * @return
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	public int query_nameBySingle(String afterName, String beforeName, Connection connection, Integer siteId) throws Exception {
		if (null == afterName) {
			throw new Exception("afterName is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		List<Object> paramList = new ArrayList<Object>();
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		try {
			sql = this.SELECT_BY_NAME;
			paramList.add(afterName);
			paramList.add(siteId);
			if (null != beforeName) {
				sql += " and name!=?";
				paramList.add(beforeName);
			}
			preparedStatement = connection.prepareStatement(sql);
			for (int i = 0; i < paramList.size(); i++) {
				preparedStatement.setObject(i + 1, paramList.get(i));
			}
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				result = resultSet.getInt("account");
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			paramList = null;
			sql = null;
		}

		return result;
	}

	/**
	 * 根据端口ID和vlanID集合查询
	 * 
	 * @author kk
	 * 
	 * @param flga true表示是端口ID来查,否则就是LAGid来查询
	 * 
	 * @return
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	public List<AcPortInfo> query_vlan(int portId, List<Integer> vlanIdList, Connection connection,boolean flga) throws Exception {

		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			if(flga){
				sql = "SELECT * from acinfo where id IN (select acId from acbuffer b where b.portId=? and b.vlanid in ( ";
			}else{
				sql = "SELECT * from acinfo where id IN (select acId from acbuffer b where lagId=? and b.vlanid in ( ";
			}

			for (int i = 0; i < vlanIdList.size(); i++) {
				sql += "?,";
			}
			sql = sql.substring(0, sql.length() - 1);
			sql += "))";
			
			preparedStatement=connection.prepareStatement(sql);
			preparedStatement.setInt(1, portId);
			for (int i = 0; i < vlanIdList.size(); i++) {
				preparedStatement.setInt(i+2, vlanIdList.get(i));
			}
			
			return this.excuteQuery(preparedStatement);
		} catch (Exception e) {
			throw e;
		} finally{
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
		}

	}
	
	/**
	 * 执行查询语句
	 * 
	 * @param connection
	 *            数据库连接
	 * @param sql
	 *            sql语句
	 * @return 查询集合
	 * @throws Exception
	 */
	private List<AcPortInfo> excuteQuery(PreparedStatement preparedStatement) throws Exception {
		List<AcPortInfo> acPortInfoList = null;
		ResultSet resultSet = null;
		AcPortInfo acPortinfo = null;
		try {
			acPortInfoList = new ArrayList<AcPortInfo>();
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				acPortinfo = new AcPortInfo();
				acPortinfo.setSiteId(resultSet.getInt("SiteId"));
				acPortinfo.setPortId(resultSet.getInt("PortId"));
				acPortinfo.setLagId(resultSet.getInt("LagId"));
				acPortinfo.setPortModel(resultSet.getInt("PortModel"));
				acPortinfo.setOperatorVlanId(resultSet.getString("OperatorVlanId"));
				acPortinfo.setClientVlanId(resultSet.getString("ClientVlanId"));
				acPortinfo.setManagerEnable(resultSet.getInt("ManagerEnable"));
				acPortinfo.setExitRule(resultSet.getInt("ExitRule"));
				acPortinfo.setVlanId(resultSet.getString("VlanId"));
				acPortinfo.setVlancri(resultSet.getString("Vlancri"));
				acPortinfo.setVlanpri(resultSet.getString("Vlanpri"));
				acPortinfo.setHorizontalDivision(resultSet.getInt("HorizontalDivision"));
				acPortinfo.setMacAddressLearn(resultSet.getInt("MacAddressLearn"));
				acPortinfo.setTagAction(resultSet.getInt("TagAction"));
				acPortinfo.setJobStatus(resultSet.getString("JobStatus"));
				acPortinfo.setAcBusinessId(resultSet.getInt("AcBusinessId"));
				acPortinfo.setBufType(resultSet.getInt("BufType"));
				acPortinfo.setName(resultSet.getString("Name"));
				acPortinfo.setIsUser(resultSet.getInt("IsUser"));
				acPortinfo.setId(resultSet.getInt("Id"));
				acPortinfo.setModel(resultSet.getInt("model"));
				acPortinfo.setAcStatus(resultSet.getInt("acStatus"));
				acPortinfo.setMacCount(resultSet.getInt("macCount"));
				acPortInfoList.add(acPortinfo);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			
			acPortinfo = null;
		}

		return acPortInfoList;
	}

	public int updateActiveStatus(int siteId, int value ,Connection connection) throws Exception {
		if (0 == siteId) {
			throw new Exception("siteId is 0");
		}

		if (0 == value) {
			throw new Exception("value is 0");
		}
		
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "update acinfo set acstatus=? where siteId=?";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, value);
			preparedStatement.setInt(2, siteId);
			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}
	
	/**
	 * 通过条件查询
	 * 
	 * @param elaninfocondition
	 *            查询条件
	 * @param connection
	 *            数据库连接
	 * @return List<ElineInfo>集合
	 * @throws Exception
	 */
	public List<AcPortInfo> selectByCondition_synchro(AcPortInfo acPortInfocondition, Connection connection) throws Exception {
		if (null == acPortInfocondition) {
			throw new Exception("acPortInfocondition is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		List<AcPortInfo> list = null;
		try {

			sql = SELECTSQL;
			if (acPortInfocondition.getId() > 0) {
				sql += " and Id=" + acPortInfocondition.getId();
			}
			if (acPortInfocondition.getSiteId() > 0) {
				sql += " and siteId=" + acPortInfocondition.getSiteId();
			}
			if (acPortInfocondition.getPortId() > 0) {
				sql += " and portId=" + acPortInfocondition.getPortId();
			}
			if (acPortInfocondition.getAcBusinessId() > 0) {
				sql += " and AcBusinessId=" + acPortInfocondition.getAcBusinessId();
			}
			if (acPortInfocondition.getLagId() > 0) {
				sql += " and lagid=" + acPortInfocondition.getLagId();
			}
			list = this.excuteQuery(connection, sql);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return list;
	}
	
	
	/**
	 * 通过条件查询
	 * 
	 * @param elaninfocondition
	 *            查询条件
	 * @param connection
	 *            数据库连接
	 * @return List<ElineInfo>集合
	 * @throws Exception
	 */
	public void updateAcState(List<Integer> acIdList, Connection connection) throws Exception {
		if (null == acIdList) {
			throw new Exception("acIdList is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		String	acId = "";
		String ids = "";
		try {
			acId = acIdList.toString();
			ids = acId.substring(1, acId.length() - 1);
			sql = "update acinfo set isUser=? WHERE Id in " + "(" + ids + ")";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, 0);
		    preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
			acId = null;
			ids = null;
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
		}
	}
	
	public List<Integer> selectByPortId(int portId, Connection connection) throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		List<AcPortInfo> list = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Integer> idsList = new ArrayList<Integer>();
		try {

			sql = "select id from acinfo WHERE 1=1";
			if (portId > 0) {
				sql += " and portId=" + portId;
			}
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			while(resultSet.next())
			{
				idsList.add(resultSet.getInt("id"));
			}
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
			if(resultSet != null)
			{
				try {
					resultSet.close();
				} catch (Exception e2) {
					ExceptionManage.dispose(e2, getClass());
				}finally
				{
					resultSet = null;
				}
			}
			if(preparedStatement != null)
			{
				try {
					preparedStatement.close();
				} catch (Exception e2) {
					ExceptionManage.dispose(e2, getClass());
				}finally
				{
					preparedStatement = null;
				}
			}
		}
		return idsList;
	}
	
	
	public int updateLanId(AcPortInfo acInfo, Connection connection) throws Exception {
		if (acInfo == null) {
			throw new Exception("acInfo is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		try {
			sql = "update acinfo set lanId = ? where id=? ";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, acInfo.getLanId());
			preparedStatement.setInt(2, acInfo.getId());
			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

}
