package com.nms.model.equipment.port;

import java.sql.Connection;
import java.util.List;

import com.nms.db.bean.equipment.port.E1Info;
import com.nms.db.bean.equipment.port.PortInst;
import com.nms.db.dao.equipment.port.E1Dao;
import com.nms.db.enums.EActionType;
import com.nms.db.enums.EManufacturer;
import com.nms.db.enums.EServiceType;
import com.nms.model.equipment.shlef.SiteService;
import com.nms.model.util.ObjectService;
import com.nms.model.util.Services;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.ExceptionManage;

public class E1InfoService extends ObjectService {

	public void setConnection(Connection connection) {
		super.connection = connection;
	}

	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}

	private E1Dao e1Dao = new E1Dao();

	
	public int saveOrUpdate(E1Info e1Info) throws Exception {

		if(e1Info == null ) {
			throw new Exception("E1InfoList is null");
		}
		int result = 0;
		try {
			connection.setAutoCommit(false);
			//下发E1
			if(e1Info.getId() > 0) {
				e1Dao.update(e1Info, connection);
			} else {
				result = e1Dao.insert(e1Info, connection);
			}
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		}finally{
			connection.setAutoCommit(true);
		}
		return result;
	}

	
	public E1Info selectByE1Id(Integer e1Id) throws Exception {
		List<E1Info> e1InfoList = null;
		E1Info e1Info = new E1Info();
		e1Info.setId(e1Id);
		
		try {
			e1InfoList = e1Dao.queryByCondition(e1Info, connection);
			if(!e1InfoList.isEmpty()) {
				e1Info = e1Dao.queryByCondition(e1Info, connection).get(0);				
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return e1Info;
	}
	
	public List<E1Info> selectByCondition(E1Info e1Info) throws Exception {
		List<E1Info> e1InfoList = null;		
		try {
			e1InfoList = e1Dao.queryByCondition(e1Info, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return e1InfoList;
	}
	
	/**
	 * 通过网元id查找
	 * @param siteId
	 * @return
	 */
	public List<E1Info> selectBySiteId(int siteId){
		List<E1Info> e1InfoList = null;		
		try {
			e1InfoList = e1Dao.queryBySiteId(siteId, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return e1InfoList;
	}
	public void update(E1Info e1Info) throws Exception{
		PortService portService =null;
		PortInst portInst = null;
		SiteService siteService = null;
		try {
			connection.setAutoCommit(false);
			siteService=(SiteService) ConstantUtil.serviceFactory.newService(Services.SITE, this.connection);
			portInst = new PortInst();
			portInst.setPortId(e1Info.getPortId());
			if(siteService.getManufacturer(e1Info.getSiteId()) == EManufacturer.WUHAN.getValue()){
				portInst.setIsEnabled_code(e1Info.getLegEnable());
			}else{
				portInst.setIsEnabled_code(e1Info.getPortInst().getIsEnabled_code());
			}
			portService = (PortService) ConstantUtil.serviceFactory.newService(Services.PORT, this.connection);
			portService.update(portInst);
			this.e1Dao.update(e1Info, connection);
			//离线网元数据下载
			super.dateDownLoad(e1Info.getSiteId(),e1Info.getId(), EServiceType.PDH.getValue(), EActionType.UPDATE.getValue(), e1Info.getPortId()+"",null,0,0,null);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		}finally{
			connection.setAutoCommit(true);
		}
	}
	
	
	/**
	 * 武汉同步E1后需要绑定E1与端口关系，暂定这种方式，后期协议修改在做相关修改    pc
	 * @param siteId
	 * @throws Exception
	 */
	public void updateE1(int siteId) throws Exception{
		PortService portService =null;
		PortInst portInst = null;
		List<PortInst> portInsts = null;
		List<E1Info> e1Infos = null;
		E1Info e1Info = null;
		SiteService siteService = null;
		try {
			connection.setAutoCommit(false);
			siteService=(SiteService) ConstantUtil.serviceFactory.newService(Services.SITE, this.connection);
			portService = (PortService) ConstantUtil.serviceFactory.newService(Services.PORT, this.connection);
			portInst = new PortInst();
			portInst.setSiteId(siteId);
			portInst.setPortType("e1");
			portInsts = portService.select(portInst);
			e1Infos = selectBySiteId(siteId);
			if(portInsts != null && portInsts.size()>0 && e1Infos!= null && e1Infos.size()>0 && portInsts.size() == e1Infos.size()){
				for (int i = 0; i < portInsts.size(); i++) {
					portInst = portInsts.get(i);
					e1Info = e1Infos.get(i);
					if(siteService.getManufacturer(e1Info.getSiteId()) == EManufacturer.WUHAN.getValue()){
						portInst.setIsEnabled_code(e1Info.getLegEnable());
					}else{
						portInst.setIsEnabled_code(e1Info.getPortInst().getIsEnabled_code());
					}
					portService.update(portInst);
					e1Info.setPortName(portInst.getPortName());
					e1Info.setPortId(portInst.getPortId());
					this.e1Dao.update(e1Info, connection);
				}
			}
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		}finally{
			connection.setAutoCommit(true);
		}
	}
}
