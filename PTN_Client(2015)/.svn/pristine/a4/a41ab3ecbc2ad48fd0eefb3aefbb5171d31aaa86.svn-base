package com.nms.db.dao.ptn.qos;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.qos.QosMappingAttr;
import com.nms.ui.manager.ExceptionManage;

public class QosMappingTemplateDao {
	/**
	 * 查询最大的groupid语句
	 */
	private final String SQL_SELECT_MAXGROUPID = "select max(groupid) as groupid from mappingtemplate";
	/**
	 * 新增qosMappingMode
	 * 
	 * @param qosMappingMode
	 *            插入实体对象
	 * @param connection
	 *            数据库链接
	 * @return 插入记录数
	 * @throws Exception
	 */
	public int insert(QosMappingAttr qosMappingAttr, Connection conn) throws Exception {
		if (qosMappingAttr == null) {
			throw new Exception("code is null");
		}
		if (conn == null) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "insert into mappingtemplate(grade,name,value,model,direction,groupid,mappingtype,color) values(?,?,?,?,?,?,?,?)";
			preparedStatement = conn.prepareStatement(sql);
			preparedStatement.setString(1, qosMappingAttr.getGrade());
			preparedStatement.setString(2, qosMappingAttr.getName());
			preparedStatement.setInt(3, qosMappingAttr.getValue());
			preparedStatement.setInt(4, qosMappingAttr.getModel());
			preparedStatement.setInt(5, qosMappingAttr.getDirection());
			preparedStatement.setInt(6, qosMappingAttr.getGroupid());
			preparedStatement.setInt(7, qosMappingAttr.getMappingType());
			preparedStatement.setInt(8, qosMappingAttr.getColor());
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 删除qosMappingMode
	 * 
	 * @param connection
	 *            数据库链接
	 * @return 删除记录数
	 * @throws Exception
	 * @throws Exception
	 */
	public int delete(int groupid, Connection conn) throws Exception {

		if (null == conn) {
			throw new Exception("connection is null");
		}

		StringBuffer sql = new StringBuffer();
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql.append(" delete from mappingtemplate where groupid = ?");
			
			preparedStatement = conn.prepareStatement(sql.toString());
			preparedStatement.setInt(1, groupid);
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 修改qosMappingMode
	 * 
	 * @param qosMappingMode
	 * 
	 * @param connection
	 *            连接数据库
	 * @return 修改的条数
	 * @throws Exception
	 * @throws Exception
	 */
	public int update(QosMappingAttr qosMappingAttr, Connection conn) throws Exception {
		if (null == conn) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		try {
			sql = "update mappingtemplate set grade=?,name=?,value=?,model=?,direction=?,groupid=?,mappingtype=?,color=?  where id=?";
			preparedStatement = conn.prepareStatement(sql);
			preparedStatement.setString(1, qosMappingAttr.getGrade());
			preparedStatement.setString(2, qosMappingAttr.getName());
			preparedStatement.setInt(3, qosMappingAttr.getValue());
			preparedStatement.setInt(4, qosMappingAttr.getModel());
			preparedStatement.setInt(5, qosMappingAttr.getDirection());
			preparedStatement.setInt(6, qosMappingAttr.getGroupid());
			preparedStatement.setInt(7, qosMappingAttr.getMappingType());
			preparedStatement.setInt(8, qosMappingAttr.getColor());
			preparedStatement.setInt(9, qosMappingAttr.getId());
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}
	
	
	/**
	 * 通过条件查询
	 * 
	 * @param qosMappingMode
	 *            查询条件
	 * @param connection
	 *            数据库连接
	 * @return List<ElineInfo>集合
	 * @throws Exception
	 */
	public List<QosMappingAttr> queryByCondition(QosMappingAttr qosMappingAttr, Connection connection) throws Exception {
		
		List<QosMappingAttr> mappingModes = null;
		if (null == qosMappingAttr) {
			throw new Exception("acPortInfocondition is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		try {

			sql = "select*from mappingtemplate where 1=1 ";
			if (qosMappingAttr.getId() > 0) {
				sql += " and Id=" + qosMappingAttr.getId();
			}
			if (qosMappingAttr.getModel() > 0) {
				sql += " and Model=" + qosMappingAttr.getModel();
			}
			if (qosMappingAttr.getGroupid() > 0) {
				sql += " and groupid=" + qosMappingAttr.getGroupid();
			}
			if (null!=qosMappingAttr.getName()&&!"".equals(qosMappingAttr.getName())) {
				sql += " and name='" + qosMappingAttr.getName()+"'";
			}
			if (qosMappingAttr.getValue() > 0) {
				sql += " and Value=" + qosMappingAttr.getValue();
			}
			if (null!=qosMappingAttr.getGrade()&&!"".equals(qosMappingAttr.getGrade())) {
				sql += " and grade='" + qosMappingAttr.getGrade()+"'";
			}
			if (qosMappingAttr.getColor() > 0) {
				sql += " and Color=" + qosMappingAttr.getColor();
			}
			if (qosMappingAttr.getMappingType() > 0) {
				sql += " and MappingType=" + qosMappingAttr.getMappingType();
			}
			if (qosMappingAttr.getDirection() > 0) {
				sql += " and direction=" + qosMappingAttr.getDirection();
			}
			mappingModes = this.excuteQuery(connection, sql);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return mappingModes;
	}
	
	/**
	 * 执行查询语句
	 * 
	 * @param connection
	 *            数据库连接
	 * @param sql
	 *            sql语句
	 * @return 查询集合
	 * @throws Exception
	 */
	private List<QosMappingAttr> excuteQuery(Connection connection, String sql) throws Exception {
		List<QosMappingAttr>  qosMappingModes= null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		QosMappingAttr qosMappingAttr = null;
		try {
			qosMappingModes = new ArrayList<QosMappingAttr>();
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				qosMappingAttr = new QosMappingAttr();
				qosMappingAttr.setId(resultSet.getInt("Id"));
				qosMappingAttr.setGrade(resultSet.getString("grade"));
				qosMappingAttr.setName(resultSet.getString("name"));
				qosMappingAttr.setValue(resultSet.getInt("value"));
				qosMappingAttr.setModel(resultSet.getInt("model"));
				qosMappingAttr.setDirection(resultSet.getInt("direction"));
				qosMappingAttr.setGroupid(resultSet.getInt("groupid"));
				qosMappingAttr.setMappingType(resultSet.getInt("mappingType"));
				qosMappingAttr.setColor(resultSet.getInt("color"));
				qosMappingModes.add(qosMappingAttr);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			qosMappingAttr = null;
		}

		return qosMappingModes;
	}
	/**
	 * 删除模板
	 * 
	 * @param connection
	 *            数据库链接
	 * @return 删除记录数
	 * @throws Exception
	 * @throws Exception
	 */
	public int deleteBySiteId(int siteId, Connection conn) throws Exception {

		if (null == conn) {
			throw new Exception("connection is null");
		}

		StringBuffer sql = new StringBuffer();
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql.append(" delete from mappingtemplate where siteId = ?");
			
			preparedStatement = conn.prepareStatement(sql.toString());
			preparedStatement.setInt(1, siteId);
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}
	
	/**
	 * 获取最大的groupId 新建用
	 * 
	 * @param connection
	 *            数据库连接
	 * @return 最大的groupid
	 * @throws Exception
	 */
	public int queryMaxGroupId(Connection connection) throws Exception {

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		try {
			preparedStatement = connection.prepareStatement(this.SQL_SELECT_MAXGROUPID);
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				result = resultSet.getInt("groupid");
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if(null!=resultSet){
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}

		return result;
	}
	
	/**
	 * 通过条件查询
	 * 
	 * @param qosMappingMode
	 *            查询条件
	 * @param connection
	 *            数据库连接
	 * @return List<ElineInfo>集合
	 * @throws Exception
	 */
	public List<QosMappingAttr> refresh(QosMappingAttr condition, Connection connection) throws Exception {
		
		List<QosMappingAttr> mappingModes = null;
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		try {
			sql = "select*from mappingtemplate where 1=1 ";
			if(0!=condition.getMappingType()){
				sql += " and mappingType = " +condition.getMappingType();
			}
			sql +=" group by groupid";
			mappingModes = this.excuteQuery(connection, sql);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return mappingModes;
	}
	
	
	/**
	 * 核对数据
	 * 
	 * @param qosMappingMode
	 *            查询条件
	 * @param connection
	 *            数据库连接
	 * @return List<ElineInfo>集合
	 * @throws Exception
	 */
	public List<QosMappingAttr> getExpInfoDate(QosMappingAttr qosMappingAttr, Connection connection) throws Exception {
		
		List<QosMappingAttr> mappingModes = null;
		if (null == qosMappingAttr) {
			throw new Exception("acPortInfocondition is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		try {

			sql = "select*from mappingtemplate where 1=1 ";
			if (qosMappingAttr.getGroupid() > 0) {
				sql += " and groupid=" + qosMappingAttr.getGroupid();
			}
			
			mappingModes = this.excuteQuery(connection, sql);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return mappingModes;
	}

	public int query_name(String afterName, String beforeName,int type,Connection connection) throws Exception {
		if (null == afterName) {
			throw new Exception("afterName is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		List<Object> paramList = new ArrayList<Object>();
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		try {
			sql = " select count(*) as selectcount from mappingtemplate where name=? ";
			paramList.add(afterName);
			if (null != beforeName) {
				sql += " and Name!=?";
				paramList.add(beforeName);
			}
			sql += " and mappingtype = "+type;
			preparedStatement = connection.prepareStatement(sql);
			for (int i = 0; i < paramList.size(); i++) {
				preparedStatement.setObject(i + 1, paramList.get(i));
			}
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				result = resultSet.getInt("selectcount");
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			paramList = null;
			sql = null;
		}

		return result;
	}
}
