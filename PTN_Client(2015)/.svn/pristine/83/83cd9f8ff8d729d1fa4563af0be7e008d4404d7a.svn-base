package com.nms.model.ptn;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.SecondMacStudyInfo;
import com.nms.db.dao.ptn.SecondMacStudyDao;
import com.nms.model.util.ObjectService;
import com.nms.ui.manager.ExceptionManage;
import com.nms.db.bean.ptn.SsMacStudy;

public class SecondMacStudyService extends ObjectService {
	public void setConnection(Connection connection) {
		super.connection = connection;
	}

	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}
	
	private SecondMacStudyDao sMacStudyDao = new SecondMacStudyDao();
	
	/**
	 * 新增
	 * @param AclInfo
	 * @throws Exception
	 */
	public int save(SsMacStudy ssMacStudy) throws Exception{
		
		if(ssMacStudy == null){
			throw new Exception("ssMacStudy is null");
		}
		int result = 0;
		try {
			connection.setAutoCommit(false);
			result = sMacStudyDao.insert(ssMacStudy, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		}finally{
			connection.setAutoCommit(true);
		}
		return result;
	}
	

	public void update(SsMacStudy ssMacStudy) throws Exception {
		if(ssMacStudy == null){	
			throw new Exception("ssMacStudy is null");		  
		}
		try {
			connection.setAutoCommit(false);
			sMacStudyDao.update(ssMacStudy, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		}finally{
			connection.setAutoCommit(true);
		}
	}

	public void delete(SsMacStudy ssMacStudy) throws Exception{
		if(ssMacStudy == null){
			throw new Exception("ssMacStudy is null");
		}
		try {
			connection.setAutoCommit(false);
			sMacStudyDao.delete(ssMacStudy, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		}finally{
			connection.setAutoCommit(true);
		}
	}

	/**
	 * 根据网元id查询对应的二层mac地址
	 * @param siteId
	 * @return
	 * @throws SQLException
	 */
	public List<SsMacStudy> selectBySecondMacStudyInfo(int siteId) throws SQLException {
		List<SsMacStudy> ssMacStudyInfoList = new ArrayList<SsMacStudy>();
		try {
			connection.setAutoCommit(false);
			ssMacStudyInfoList = sMacStudyDao.selectBySecondMacStudyInfo(siteId, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
		return ssMacStudyInfoList;
	}

	
	/**
	 * 查询
	 * 
	 * @param oamEthernetInfo
	 * @return
	 * @throws Exception
	 */
	public List<SsMacStudy> selectBySsMacStudyAddressInfo(SsMacStudy ssMacStudy) throws Exception {
		if (ssMacStudy == null) {
			throw new Exception("ssMacStudy is null");
		}
		List<SsMacStudy> ccnList = null;
		try {
			ccnList = sMacStudyDao.queryMacInfoByCondition(ssMacStudy, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return ccnList;
	}
	
	
	public List<SecondMacStudyInfo> select(int siteId) throws Exception {
		List<SecondMacStudyInfo> suIds = null;
		try {
			suIds = this.sMacStudyDao.select(siteId, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return  suIds;
	}
	/**
	 * 根据网元Id 查询 mac条目数，以此来分配macID
	 * @param siteId
	 * @return FrequencyInfo List
	 * @throws Exception
	 */
	public List<Integer> queryMacId(int siteId) throws Exception {
		List<Integer> macIds = null;
		try {
			macIds = this.sMacStudyDao.queryMacId(siteId, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return  macIds;
	}
	/**
	 * 根据网元Id,portid 查询vlan
	 * @param siteId,portId
	 * @return FrequencyInfo List
	 * @throws Exception
	 */
	public List<Integer> queryVlan(int siteId,int portId) throws Exception {
		List<Integer> Vlans = null;
		try {
			Vlans = this.sMacStudyDao.queryVlan(siteId,portId, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return  Vlans;
	}
	/**
	 * 根据网元Id删除数据
	 */
	public void deleteBySiteId(int siteId) throws Exception{
		if(siteId == 0){
			throw new Exception("siteId is null");
		}
		try {
			connection.setAutoCommit(false);
			sMacStudyDao.deleteBySiteId(siteId, connection);
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		}finally{
			connection.setAutoCommit(true);
		}
	}
	
	/**
	 * 根据网元Id,portid 查询vlan
	 * @param siteId,portId
	 * @return FrequencyInfo List
	 * @throws Exception
	 */
	public int selectPortIdBySiteId(int siteId,int portId) throws Exception {
		int port =0;
		try {
			port = this.sMacStudyDao.queryPortId(siteId,portId, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return  port;
	}
	
}
