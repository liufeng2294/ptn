package com.nms.model.equipment.shlef;

import java.sql.Connection;
import java.util.List;

import com.nms.db.bean.equipment.shelf.EquipInst;
import com.nms.db.bean.equipment.slot.SlotInst;
import com.nms.db.dao.equipment.shelf.EquipInstDao;
import com.nms.db.dao.equipment.slot.SlotInstDao;
import com.nms.model.equipment.slot.SlotService;
import com.nms.model.util.ObjectService;
import com.nms.model.util.Services;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.ExceptionManage;

public class EquipInstService extends ObjectService {

	public void setConnection(Connection connection) {
		super.connection = connection;
	}

	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}

	private EquipInstDao equipInstDao = new EquipInstDao();

	/**
	 * 新增或修改equipinst对象，通过equipinst.getEquip_Inst_Id()来判断是修改还是新增
	 * 
	 * @param equipinst
	 *            实体
	 * @return 执行成功插入的记录数
	 * @throws Exception
	 */
	public int saveOrUpdate(EquipInst equipinst) throws Exception {

		if (equipinst == null) {
			throw new Exception("equipinst is null");
		}

		int result = 0;
		try {

			if (equipinst.getId() == 0) {
				result = this.equipInstDao.insert(equipinst, connection);
			} else {
				result = this.equipInstDao.update(equipinst, connection);
			}

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return result;
	}

	/**
	 * 通过主键删除equipinst
	 * 
	 * @param Equip_Inst_Id
	 *            主键
	 * @return 删除的记录数
	 * @throws Exception
	 */
	public int delete(int id) throws Exception {

		int result = 0;

		try {
			result = equipInstDao.delete(id, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return result;

	}

	/**
	 * 查询全部
	 * 
	 * @return List<EquipInst> 集合
	 * @throws Exception
	 */
	public List<EquipInst> select() throws Exception {
		EquipInst equipInst = null;
		List<EquipInst> equipinstList = null;
		SlotInst slotinst = null;
		SlotInstDao slotinstdao  = null;
		List<SlotInst> slotinstList = null;
		try {
			equipInst = new EquipInst();
			equipinstList = equipInstDao.queryByCondition(equipInst ,connection);
			if (null != equipinstList && equipinstList.size() != 0) {
				for (int i = 0; i < equipinstList.size(); i++) {
					slotinst = new SlotInst();
					slotinstdao = new SlotInstDao();
					slotinst.setEquipId(equipinstList.get(i).getId());

					slotinstList = slotinstdao.queryByCondition(slotinst,connection);
					equipinstList.get(i).setSlotlist(slotinstList);
				}
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally{
			equipInst  = null;
			slotinst = null;
			slotinstdao = null;
			slotinstList = null;
		}
	
		return equipinstList;
	}

	/**
	 * 根据条件查询
	 * 
	 * @param portattr
	 * @return
	 * @throws Exception
	 */
	public List<EquipInst> select(EquipInst equipinst) throws Exception {
		List<EquipInst> equipinstList = null;
		SlotInst slotinst = null;
		List<SlotInst> slotinstList  = null;
		SlotService slotService = null;
		try {
			equipinstList = equipInstDao.queryByCondition(equipinst ,connection);
			if (null != equipinstList && equipinstList.size() != 0) {
				slotService=(SlotService) ConstantUtil.serviceFactory.newService(Services.SLOT, this.connection);
				for (int i = 0; i < equipinstList.size(); i++) {
					slotinst = new SlotInst();
					slotinst.setEquipId(equipinstList.get(i).getId());
					slotinstList = slotService.select(slotinst);
					equipinstList.get(i).setSlotlist(slotinstList);
				}
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally{
			slotinst = null;
			slotinstList = null;
//			UiUtil.closeService(slotService);
		}
	
		return equipinstList;
	}

	public static void main(String[] args) {

	}
}
