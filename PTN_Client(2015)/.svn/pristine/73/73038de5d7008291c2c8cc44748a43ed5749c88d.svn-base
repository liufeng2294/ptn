package com.nms.ui.ptn.ne.tunnel.controller;

import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.oam.OamMepInfo;
import com.nms.db.bean.ptn.path.tunnel.Lsp;
import com.nms.db.bean.ptn.path.tunnel.Tunnel;
import com.nms.db.bean.ptn.qos.QosInfo;
import com.nms.db.enums.EOperationLogType;
import com.nms.model.equipment.port.PortService_MB;
import com.nms.model.ptn.oam.OamInfoService_MB;
import com.nms.model.ptn.path.tunnel.TunnelService_MB;
import com.nms.model.util.Services;
import com.nms.rmi.ui.util.RmiKeys;
import com.nms.service.impl.util.ResultString;
import com.nms.service.impl.util.SiteUtil;
import com.nms.service.impl.util.WhImplUtil;
import com.nms.ui.filter.impl.TunnelNEFilterDialog;
import com.nms.ui.frame.AbstractController;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.DialogBoxUtil;
import com.nms.ui.manager.DispatchUtil;
import com.nms.ui.manager.ExceptionManage;
import com.nms.ui.manager.ResourceUtil;
import com.nms.ui.manager.UiUtil;
import com.nms.ui.manager.control.PtnButton;
import com.nms.ui.manager.keys.StringKeysLbl;
import com.nms.ui.manager.keys.StringKeysObj;
import com.nms.ui.manager.keys.StringKeysTip;
import com.nms.ui.ptn.ne.camporeData.CamporeDataDialog;
import com.nms.ui.ptn.ne.tunnel.view.TunnelAddDialog;
import com.nms.ui.ptn.ne.tunnel.view.TunnelPanel;
import com.nms.ui.ptn.systemconfig.dialog.qos.ComparableSort;

public class TunnelNodeController extends AbstractController {

	private TunnelPanel view;
	private Tunnel filterCondition = null;// tunnel的过滤条件

	public TunnelNodeController(TunnelPanel tunnelPanel) {
		this.setView(tunnelPanel);
	}

	@Override
	public void refresh() throws Exception {
		this.searchAndrefreshdata();
	}

	// 创建
	@Override
	public void openCreateDialog() throws Exception {
		 new TunnelAddDialog(null, view);
	};

	@Override
	public boolean deleteChecking() {
		List<Tunnel> tunnelList = null;
		boolean flag = false;
		List<Integer> siteIds = null;
		try {
			tunnelList = this.getView().getAllSelect();
			for (Tunnel tunnel : tunnelList) {
				if (tunnel.getIsSingle() == 0) {
					flag = true;
					break;
				}
			}
			if (flag) {
				DialogBoxUtil.errorDialog(this.getView(), ResourceUtil.srcStr(StringKeysTip.TIP_DELETE_NODE));
				UiUtil.insertOperationLog(EOperationLogType.SINGTUNNEL1.getValue());//385
				return false;
			}else{
				//判断是否为在线托管网元
				SiteUtil siteUtil = new SiteUtil();
				if(1==siteUtil.SiteTypeOnlineUtil(ConstantUtil.siteId)){
					WhImplUtil wu = new WhImplUtil();
					siteIds = new ArrayList<Integer>();
					siteIds.add(ConstantUtil.siteId);
					String str=wu.getNeNames(siteIds);
					DialogBoxUtil.errorDialog(this.getView(), ResourceUtil.srcStr(StringKeysTip.TIP_NOT_DELETEONLINE)+""+str+ResourceUtil.srcStr(StringKeysTip.TIP_ONLINENOT_DELETEONLINE));
					UiUtil.insertOperationLog(EOperationLogType.DELETEDCTUNNEL.getValue());
					return false;  		    		
					}
			}
			
			// 删除tunnel之前先验证该tunnel是否有按需oam，没有才可删除，否则提示不能删除
			for (Tunnel tunnel : tunnelList) {
				// 如果为true，说明该条tunnel有按需oam，不能删除
				if (checkIsOam(tunnel)) {
					flag = true;
					break;
				}
			}
			if (flag) {
				DialogBoxUtil.errorDialog(this.getView(), ResourceUtil.srcStr(StringKeysTip.TIP_CLEAN_OAM));
				UiUtil.insertOperationLog(EOperationLogType.SINGTUNNEL.getValue());//384
				return false;
			}

			
			flag = true;
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			tunnelList = null;
			siteIds = null;
		}
		return flag;
	}

	private boolean checkIsOam(Tunnel tunnel) {
		OamMepInfo mep = null;
		OamInfoService_MB service = null;
		boolean flag = false;
		try {
			mep = new OamMepInfo();
			mep.setObjId(tunnel.getTunnelId());
			mep.setObjType("TUNNEL_TEST");
			service = (OamInfoService_MB) ConstantUtil.serviceFactory.newService_MB(Services.OamInfo);
			flag = service.queryByObjIdAndType(mep);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			UiUtil.closeService_MB(service);
		}
		return flag;
	}

	// 删除
	@Override
	public void delete() throws Exception {

		List<Tunnel> tunnelList = null;

		DispatchUtil tunnelDispatch = null;
		String resultStr = null;
		try {
			tunnelList = this.getView().getAllSelect();
			tunnelDispatch = new DispatchUtil(RmiKeys.RMI_TUNNEL);
			resultStr = tunnelDispatch.excuteDelete(tunnelList);
			DialogBoxUtil.succeedDialog(this.getView(), resultStr);
			// 添加日志记录
			PtnButton deleteButton = (PtnButton) this.view.getDeleteButton();
			deleteButton.setOperateKey(EOperationLogType.TUNNELDELETE.getValue());
			int operationResult = 0;
			if (ResourceUtil.srcStr(StringKeysTip.TIP_CONFIG_SUCCESS).equals(resultStr)) {
				operationResult = 1;
			} else {
				operationResult = 2;
			}
			deleteButton.setResult(operationResult);
			this.view.getRefreshButton().doClick();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			tunnelDispatch = null;
			resultStr = null;
			tunnelList = null;
		}

	};

	private void searchAndrefreshdata() {
		List<Tunnel> infos = null;
		TunnelService_MB tunnelServiceMB = null;
		try {
			tunnelServiceMB = (TunnelService_MB) ConstantUtil.serviceFactory.newService_MB(Services.Tunnel);
			// 若 filterCondition清空，则进入原有的为过滤的方法
			if (this.filterCondition == null) {
				this.filterCondition=new Tunnel();
			}
			infos=tunnelServiceMB.filterSelectNE(ConstantUtil.siteId,this.filterCondition);
//				infos = tunnelService.selectNodesBySiteId(ConstantUtil.siteId);// 原有的未过滤的查询方法
//			} else {
//				infos = tunnelService.quertyNodeByTunnelCondition(ConstantUtil.siteId, this.filterCondition,false);
//			}
			this.view.clear();
			this.view.getLspPanel().clear();
			this.view.getQosPanel().clear();
			this.view.initData(infos);
			this.view.updateUI();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			infos = null;
			UiUtil.closeService_MB(tunnelServiceMB);
		}
	}

	// 修改
	@Override
	public void openUpdateDialog() throws Exception {
		if (this.getView().getAllSelect().size() == 0) {
			DialogBoxUtil.errorDialog(this.getView(), ResourceUtil.srcStr(StringKeysTip.TIP_SELECT_DATA_ONE));
			UiUtil.insertOperationLog(EOperationLogType.SINGTUNNEL2.getValue());//386
		} else {
			Tunnel tunnel = this.getView().getAllSelect().get(0);
			if (tunnel.getIsSingle() == 0) {
				DialogBoxUtil.errorDialog(this.view, ResourceUtil.srcStr(StringKeysTip.TIP_UPDATE_NODE));
				UiUtil.insertOperationLog(EOperationLogType.SINGTUNNEL3.getValue());//387
				return;
			}
			new TunnelAddDialog(tunnel, this.view);
		}
	}

	/**
	 * 选中一条记录后，查看详细信息
	 */
	@Override
	public void initDetailInfo() {
		try {
			this.initQosInfos();
			this.initLspData();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}
	}

	@SuppressWarnings("unchecked")
	private void initQosInfos() throws Exception {
		List<QosInfo> qosList = null;
		Tunnel tunnel = null;
		try {
			tunnel = this.view.getSelect();
			ComparableSort sort = new ComparableSort();
			qosList = (List<QosInfo>) sort.compare(tunnel.getQosList());
			this.view.getQosPanel().clear();
			this.view.getQosPanel().initData(qosList);
			this.view.updateUI();
		} catch (Exception e) {
			throw e;
		} finally {
			qosList = null;
			tunnel = null;
		}
	}

	private void initLspData() throws Exception {
		try {
			Tunnel tunnel = this.view.getSelect();
			List<Lsp> lspList = this.convertLspData(tunnel);
			this.view.getLspPanel();
			this.view.getLspPanel().initData(lspList);
			this.view.updateUI();

		} catch (Exception e) {
			throw e;
		}
	}

	/**
	 * 转换lsp对象 给lsp所需要的列赋值
	 * 
	 * @param tunnel
	 * @throws Exception
	 */
	private List<Lsp> convertLspData(Tunnel tunnel) throws Exception {
		PortService_MB portServiceMB = null;
		List<Lsp> lspList = null;
		try {
			portServiceMB = (PortService_MB) ConstantUtil.serviceFactory.newService_MB(Services.PORT);
			lspList = new ArrayList<Lsp>();
			for (Lsp lsp : tunnel.getLspParticularList()) {
				if (tunnel.getASiteId() == ConstantUtil.siteId) {
					if (lsp.getASiteId() == tunnel.getASiteId()) {
						lsp.putClientProperty("id", lsp.getId());
						lsp.putClientProperty("lspname", tunnel.getTunnelName() + "/1");
						lsp.putClientProperty("inlabel", lsp.getBackLabelValue());
						lsp.putClientProperty("outlabel", lsp.getFrontLabelValue());
						lsp.putClientProperty("type", ResourceUtil.srcStr(StringKeysObj.LSP_TYPE_JOB));
						lsp.putClientProperty("portname", portServiceMB.getPortname(lsp.getAPortId()));
						lsp.putClientProperty("sitename", lsp.getAoppositeId());
						lsp.putClientProperty("position", tunnel.getPosition() == 1 ? true : false);
						lspList.add(lsp);
						break;
					}
				} else if (tunnel.getZSiteId() == ConstantUtil.siteId) {
					if (lsp.getZSiteId() == tunnel.getZSiteId()) {
						lsp.putClientProperty("id", lsp.getId());
						lsp.putClientProperty("lspname", tunnel.getTunnelName() + "/1");
						lsp.putClientProperty("inlabel", lsp.getFrontLabelValue());
						lsp.putClientProperty("outlabel", lsp.getBackLabelValue());
						lsp.putClientProperty("type", ResourceUtil.srcStr(StringKeysObj.LSP_TYPE_JOB));
						lsp.putClientProperty("portname", portServiceMB.getPortname(lsp.getZPortId()));
						lsp.putClientProperty("sitename", lsp.getZoppositeId());
						lsp.putClientProperty("position", tunnel.getPosition() == 1 ? true : false);
						lspList.add(lsp);
						break;
					}
				} else {
					if (lsp.getZSiteId() == ConstantUtil.siteId) {
						lsp.putClientProperty("id", lsp.getId());
						lsp.putClientProperty("lspname", tunnel.getTunnelName() + "/1");
						lsp.putClientProperty("inlabel", lsp.getFrontLabelValue());
						lsp.putClientProperty("outlabel", lsp.getBackLabelValue());
						lsp.putClientProperty("type", ResourceUtil.srcStr(StringKeysObj.LSP_TYPE_JOB));
						lsp.putClientProperty("portname", portServiceMB.getPortname(lsp.getZPortId()));
						lsp.putClientProperty("sitename", lsp.getZoppositeId());
						lsp.putClientProperty("position", tunnel.getPosition() == 1 ? true : false);
						// if (lsp.getASiteId() != 0) {
						// lsp.putClientProperty("sitename", UiUtil.getSiteName(lsp.getASiteId()));
						// }
						lspList.add(lsp);
					} else if (lsp.getASiteId() == ConstantUtil.siteId) {
						lsp.putClientProperty("id", lsp.getId());
						lsp.putClientProperty("lspname", tunnel.getTunnelName() + "/2");
						lsp.putClientProperty("inlabel", lsp.getBackLabelValue());
						lsp.putClientProperty("outlabel", lsp.getFrontLabelValue());
						lsp.putClientProperty("type", ResourceUtil.srcStr(StringKeysObj.LSP_TYPE_JOB));
						lsp.putClientProperty("portname", portServiceMB.getPortname(lsp.getAPortId()));
						lsp.putClientProperty("sitename", lsp.getAoppositeId());
						lsp.putClientProperty("position", tunnel.getPosition() == 1 ? true : false);
						// if (lsp.getZSiteId() != 0) {
						// lsp.putClientProperty("sitename", UiUtil.getSiteName(lsp.getZSiteId()));
						// }
						lspList.add(lsp);
					}

				}
			}

			// 类型是1:1保护 把保护的lsp信息绑定到列表中
			if (!"0".equals(tunnel.getTunnelType()) && "2".equals(UiUtil.getCodeById(Integer.parseInt(tunnel.getTunnelType())).getCodeValue())) {
				Tunnel protectTunnel = tunnel.getProtectTunnel();

				for (Lsp lsp : protectTunnel.getLspParticularList()) {
					if (lsp.getASiteId() == ConstantUtil.siteId) {
						lsp.putClientProperty("id", lsp.getId());
						lsp.putClientProperty("lspname", tunnel.getTunnelName() + "/2");
						lsp.putClientProperty("inlabel", lsp.getBackLabelValue());
						lsp.putClientProperty("outlabel", lsp.getFrontLabelValue());
						lsp.putClientProperty("type", ResourceUtil.srcStr(StringKeysLbl.LBL_PROTECT));
						lsp.putClientProperty("portname", portServiceMB.getPortname(lsp.getAPortId()));
						lsp.putClientProperty("sitename", lsp.getAoppositeId());
						lsp.putClientProperty("position", protectTunnel.getPosition() == 1 ? true : false);
						// if (lsp.getZSiteId() != 0) {
						// lsp.putClientProperty("sitename", UiUtil.getSiteName(lsp.getZSiteId()));
						// }
						lspList.add(lsp);
						break;
					} else if (lsp.getZSiteId() == ConstantUtil.siteId) {
						lsp.putClientProperty("id", lsp.getId());
						lsp.putClientProperty("lspname", tunnel.getTunnelName() + "/2");
						lsp.putClientProperty("inlabel", lsp.getFrontLabelValue());
						lsp.putClientProperty("outlabel", lsp.getBackLabelValue());
						lsp.putClientProperty("type", ResourceUtil.srcStr(StringKeysLbl.LBL_PROTECT));
						lsp.putClientProperty("portname", portServiceMB.getPortname(lsp.getZPortId()));
						lsp.putClientProperty("sitename", lsp.getZoppositeId());
						lsp.putClientProperty("position", protectTunnel.getPosition() == 1 ? true : false);
						// if (lsp.getASiteId() != 0) {
						// lsp.putClientProperty("sitename", UiUtil.getSiteName(lsp.getASiteId()));
						// }
						lspList.add(lsp);
					}
				}
			}
		} catch (Exception e) {
			throw e;
		} finally {
			UiUtil.closeService_MB(portServiceMB);
		}
		return lspList;
	}

	@Override
	public void synchro() {
		DispatchUtil tunnelDispatch = null;
		try {
			tunnelDispatch = new DispatchUtil(RmiKeys.RMI_TUNNEL);
			String result = tunnelDispatch.synchro(ConstantUtil.siteId);
			DialogBoxUtil.succeedDialog(null, result);
			// 添加日志记录
			PtnButton deleteButton = (PtnButton) this.view.getSynchroButton();
			deleteButton.setOperateKey(EOperationLogType.TUNNELSYNCHRO.getValue());
			deleteButton.setResult(1);
			this.refresh();
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			tunnelDispatch = null;
		}
	}

	public void setView(TunnelPanel view) {
		this.view = view;
	}

	public TunnelPanel getView() {
		return view;
	};

	/**
	 * 对单网元侧的tunnel进行过滤查询 添加tunnel过滤
	 */
	public void openFilterDialog() throws Exception {
//		if (null == this.filterCondition) {
//			this.filterCondition = new Tunnel();// 若filterCondition已经清空 ，重新创建实例，以供下次是用
//		}
//		new AddTunnelFilterDialog(2, this.filterCondition, this.view);
		new TunnelNEFilterDialog(this.filterCondition);
		this.refresh();
	}

	/**
	 * 一致性检测
	 */
	@Override
	public void consistence(){
		List<Tunnel> tunnelEMS = null;
		TunnelService_MB tunnelServiceMB = null;
		DispatchUtil dispatchUtil = null;
		List<Tunnel> tunnelsNE = null;  
		try {
			SiteUtil siteUtil=new SiteUtil();
			if (0 == siteUtil.SiteTypeUtil(ConstantUtil.siteId)) {
				tunnelServiceMB = (TunnelService_MB) ConstantUtil.serviceFactory.newService_MB(Services.Tunnel);
				tunnelEMS = tunnelServiceMB.selectWHNodesBySiteId(ConstantUtil.siteId);
				dispatchUtil = new  DispatchUtil(RmiKeys.RMI_TUNNEL);
				tunnelsNE = (List<Tunnel>) dispatchUtil.consistence(ConstantUtil.siteId);
				CamporeDataDialog camporeDataDialog = new CamporeDataDialog(ResourceUtil.srcStr(StringKeysTip.TIP_TUNNEL_TABLE), tunnelEMS, tunnelsNE, this);
				UiUtil.showWindow(camporeDataDialog, 700, 600);
			}else{
				DialogBoxUtil.errorDialog(this.view, ResultString.QUERY_FAILED);
				UiUtil.insertOperationLog(EOperationLogType.SINGTUNNEL4.getValue());//388
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}finally{
			UiUtil.closeService_MB(tunnelServiceMB);
		}
	}
	
	/**
	 * 清除tunnel过滤
	 */
	public void clearFilter() throws Exception {
		this.filterCondition = null;
		this.refresh();
	}

	public void setFilterCondition(Tunnel filterCondition) {
		this.filterCondition = filterCondition;
	}

	public Tunnel getFilterCondition() {
		return filterCondition;
	}
}
