package com.nms.db.dao.system.loginlog;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.system.loginlog.UserLock;
import com.nms.ui.manager.ExceptionManage;


/**
 * 账户锁定与解锁类
 * 
 * @author songyang
 * 
 */
public class UserLockDao {

	SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	private final int MAX = 1;// 查看账户上次锁定信息

	/**
	 * 查询表user_lock 账户的锁定信息
	 * 
	 * @param userlock
	 * @param connection
	 * @param max
	 *            max=1,查找账户上一次锁定信息,
	 * @return
	 * @throws Exception
	 */
	public List<UserLock> selectLockType(UserLock userlock, Connection connection, int max) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		List<UserLock> userLockList = null;
		ResultSet resultset = null;
		PreparedStatement preparedStatement = null;
		try {
			/**
			 * userlock==null,查看user_lock表中所以信息
			 */
			sql = "select * from ";
			if (userlock.getUser_id() > 0) {
				if (max == this.MAX) {
					sql += " user_lock where 1=1 and user_id=" + userlock.getUser_id() + " order by lockTime DESC limit 0," + max;// 查看是否锁定
					// }else if(max!=this.MAX){
					// sql+=" user_lock u,user-inst i where u.user_id="+userlock.getUser_id()+" and u.user_id=i.user_id";//查看user_id用户的所有锁定信息
				}
			}
			preparedStatement = connection.prepareStatement(sql);
			resultset = preparedStatement.executeQuery();

			userLockList = new ArrayList<UserLock>();
			while (resultset.next()) {
				UserLock userLock = new UserLock();
				userLock.setId(resultset.getInt(1));
				userLock.setUser_id(resultset.getInt(2));
				userLock.setLockTime(resultset.getString(3));
				userLock.setClearTime(resultset.getString(4));
				userLock.setLockType(resultset.getInt(5));
				userLock.setClearType(resultset.getInt(6));
				userLock.setLockUsername(resultset.getString(7));
				userLock.setClearUsername(resultset.getString(8));
				userLockList.add(userLock);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultset != null) {
				try {
					resultset.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultset = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return userLockList;
	}

	/**
	 * 更新user_lock表中信息 解锁修改表中数据
	 * 
	 * @param userlock
	 * @param connection
	 */
	public int updateUserLock(UserLock userlock, Connection connection) throws Exception {
		if (null == userlock) {
			throw new Exception("userlock is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		int result = 0;
		PreparedStatement preparedStatement = null;
		String sql="update user_lock set clearTime=?,clearType=?,clearUsername=?where id=?";
		try {
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, userlock.getClearTime());
			preparedStatement.setInt(2, userlock.getClearType());
			preparedStatement.setString(3, userlock.getClearUsername());
			preparedStatement.setInt(4, userlock.getId());

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
	}

	/**
	 * 新增 表user_lock
	 * 
	 * @param userlock
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int insertUserLock(UserLock userlock, Connection connection) throws Exception {
		if (null == userlock) {
			throw new Exception("userlock is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		int result = 0;
		PreparedStatement preparedStatement = null;
		String sql="insert into user_lock(user_id,lockTime,lockType,lockUsername)values(?,?,?,?)";
		try {
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, userlock.getUser_id());
			preparedStatement.setString(2, userlock.getLockTime());
			preparedStatement.setInt(3, userlock.getLockType());
			preparedStatement.setString(4, userlock.getLockUsername());

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}

		}

		return result;
	}

	/**
	 * 查看（某个用户） userlock 的锁定信息
	 * 
	 * @param userlock
	 * @return
	 * @throws Exception
	 */
	public List<UserLock> selectUserLock(UserLock userlock, Connection connection) throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}
		if (null == userlock) {
			throw new Exception("userlock is null");
		}
		UserLock userLock = null;
		String sql = null;
		List<UserLock> userLockList = null;
		ResultSet resultset = null;
		PreparedStatement preparedStatement = null;
		try {
			sql = "select user_name,lockTime,clearTime,lockType,clearType,lockUsername,clearUsername from user_lock u,user_inst i where u.user_id=i.user_id and u.user_id=?";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, userlock.getUser_id());
			resultset = preparedStatement.executeQuery();

			userLockList = new ArrayList<UserLock>();
			while (resultset.next()) {
				userLock = new UserLock();
				userLock.setUser_name(resultset.getString("user_name"));
				// userLock.setUser_id(resultset.getInt(2));
				userLock.setLockTime(resultset.getString("lockTime"));
				userLock.setClearTime(resultset.getString("clearTime"));
				userLock.setLockType(resultset.getInt("lockType"));
				userLock.setClearType(resultset.getInt("clearType"));
				userLock.setLockUsername(resultset.getString("lockUsername"));
				userLock.setClearUsername(resultset.getString("clearUsername"));
				userLockList.add(userLock);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultset != null) {
				try {
					resultset.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultset = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			userLock = null;
			sql = null;
		}

		return userLockList;
	}

}