package com.nms.db.dao.ptn.clock;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.clock.TimeManageInfo;
import com.nms.ui.manager.ExceptionManage;

public class TimeManageInfoDao {

		/**
		 * @param timeManageInfo
		 *            实体
		 * @param conection
		 *            数据库连接
		 * @return 判断是否插入成功 返回的ID号 只要不是0就是插入成功
		 * @throws Exception
		 * 插入数据
		 */
		public int insert(TimeManageInfo timeManageInfo,Connection conection) throws Exception {
			if (null == timeManageInfo) {
				throw new Exception("TimeManageInfo is null");
			}
			if (null == conection) {
				throw new Exception("connection is null");
			}
			String sql = null;
			PreparedStatement preparedStatement = null;
			ResultSet resultSet = null;
			int result = 0;
			try {
				sql = "insert into timeneptp(siteId,model,ClockType," +
						"clockPrecision,clockVariance," +
						"priorOne,priorTwo," +
						"manufacturerOUI,clockRegion," +
						"clockRegionOne,clockRegionTwoJbox," +
						"clockRegionTwo,clockRegionThreeJbox," +
						"clockRegionThree,clockRegionFourJbox," +
						"clockRegionFour," +
						"clockRegionDelay,followModel," +
						"todsendTime,timeID," + 
						"timeType,ftimeID," +
						"ftimePort,leapNumber," +
						"systemVarianceValue,todState," +
						"zTimeID,zTimeTpye,zTimePrecision," +
						"zTimeVariance,zTimePriorOne,zTimePriorTwo) " +
						"value(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				
				preparedStatement = conection.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
				preparedStatement.setInt(1, timeManageInfo.getSiteId());
				preparedStatement.setInt(2, timeManageInfo.getModel());
				preparedStatement.setInt(3, timeManageInfo.getClockType());
				preparedStatement.setInt(4, timeManageInfo.getClockPrecision());
				preparedStatement.setInt(5, timeManageInfo.getClockVariance());
				preparedStatement.setInt(6, timeManageInfo.getPriorOne());
				preparedStatement.setInt(7, timeManageInfo.getPriorTwo());
				preparedStatement.setInt(8, timeManageInfo.getManufacturerOUI());
				preparedStatement.setInt(9, timeManageInfo.getClockRegion());
				preparedStatement.setInt(10, timeManageInfo.getClockRegionOne());
				preparedStatement.setInt(11, timeManageInfo.getClockRegionTwoJbox());
				preparedStatement.setInt(12, timeManageInfo.getClockRegionTwo());
				preparedStatement.setInt(13, timeManageInfo.getClockRegionThreeJbox());
				preparedStatement.setInt(14, timeManageInfo.getClockRegionThree());
				preparedStatement.setInt(15, timeManageInfo.getClockRegionFourJbox());
				preparedStatement.setInt(16, timeManageInfo.getClockRegionFour());
				preparedStatement.setInt(17, timeManageInfo.getClockRegionDelay());
				preparedStatement.setInt(18, timeManageInfo.getFollowModel());
				preparedStatement.setInt(19, timeManageInfo.getTodsendTime());
				preparedStatement.setString(20, timeManageInfo.getTimeID());
				preparedStatement.setString(21, timeManageInfo.getTimeType());
				preparedStatement.setString(22, timeManageInfo.getFtimeID());
				preparedStatement.setString(23, timeManageInfo.getFtimePort());
				preparedStatement.setString(24, timeManageInfo.getLeapNumber());
				preparedStatement.setString(25, timeManageInfo.getSystemVarianceValue());
				preparedStatement.setString(26, timeManageInfo.getTodState());
				preparedStatement.setString(27, timeManageInfo.getzTimeID());
				preparedStatement.setString(28, timeManageInfo.getzTimeTpye());
				preparedStatement.setString(29, timeManageInfo.getzTimePrecision());
				preparedStatement.setString(30, timeManageInfo.getzTimeVariance());
				preparedStatement.setString(31, timeManageInfo.getzTimePriorOne());
				preparedStatement.setString(32, timeManageInfo.getzTimePriorTwo());
				
				preparedStatement.executeUpdate();
				resultSet = preparedStatement.getGeneratedKeys();
				if (resultSet.next()) {
					result = resultSet.getInt(1);
				}
			} catch (Exception e) {
				throw e;
			} finally {
				sql = null;
				if (resultSet != null) {
					try {
						resultSet.close();
					} catch (Exception e) {
						ExceptionManage.dispose(e,this.getClass());
					}
					resultSet = null;
				}
				if (preparedStatement != null) {
					try {
						preparedStatement.close();
					} catch (Exception e) {
						ExceptionManage.dispose(e,this.getClass());
					}
					preparedStatement = null;
				}
			}
			return result;
		}
	/**
	 * 
	 * @param timeManageInfo 实体
	 * @param connection 数据库连接
	 * @return 1删除成功，0不成功；
	 * @throws Exception
	 * function:通过关联网元表主键 来删除数据
	 */
		public int delete(TimeManageInfo timeManageInfo,Connection connection) throws Exception {
			if (null == timeManageInfo) {
				throw new Exception("timeManageInfo is null");
			}
			if (connection == null) {
				throw new Exception("connection is null");
			}
			String sql = null;
			PreparedStatement preparedStatement = null;
			int result=0;
			try {
				sql = "delete from timeneptp where siteId=?";
	            
				preparedStatement = connection.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
				preparedStatement.setInt(1, timeManageInfo.getSiteId());
				
				result = preparedStatement.executeUpdate();
			} catch (Exception e) {
				throw e;
			}finally{
				sql=null;
				if(preparedStatement!=null){
					try {
						preparedStatement.close();
					} catch (Exception e) {
						ExceptionManage.dispose(e,this.getClass());
					}
					preparedStatement=null;
				}
			}
			return result;
		}
		/**
		 * function: 查找单个的网元时钟的状态和属性
		 * @param conn 数据库连接
		 * @return 所有网元时钟的状态和属性 集合
		 * @throws Exception
		 */
	public TimeManageInfo select(Connection conn,int id) throws Exception{
		if(conn==null){
			throw new Exception("connection is null");
		}
		String sql=null;
		PreparedStatement pre=null;
		ResultSet ste=null;
		TimeManageInfo timeManageInfo=null;
		try {
			sql="select * from timeneptp where siteId=?";
			pre=conn.prepareStatement(sql);
			pre.setInt(1, id);
			ste=pre.executeQuery();
			
			while(ste.next()){
				timeManageInfo=new TimeManageInfo();
				timeManageInfo.setId(ste.getInt("id"));
				timeManageInfo.setSiteId(ste.getInt("siteId"));
				timeManageInfo.setModel(ste.getInt("model"));
				timeManageInfo.setClockType(ste.getInt("ClockType"));
				timeManageInfo.setClockPrecision(ste.getInt("clockPrecision"));
				timeManageInfo.setClockVariance(ste.getInt("clockVariance"));
				timeManageInfo.setPriorOne(ste.getInt("priorOne"));
				timeManageInfo.setPriorTwo(ste.getInt("priorTwo"));
				timeManageInfo.setManufacturerOUI(ste.getInt("manufacturerOUI"));
				timeManageInfo.setClockRegion(ste.getInt("clockRegion"));
				timeManageInfo.setClockRegionOne(ste.getInt("clockRegionOne"));
				timeManageInfo.setClockRegionTwoJbox(ste.getInt("clockRegionTwoJbox"));
				timeManageInfo.setClockRegionTwo(ste.getInt("clockRegionTwo"));
				timeManageInfo.setClockRegionThreeJbox(ste.getInt("clockRegionThreeJbox"));
				timeManageInfo.setClockRegionThree(ste.getInt("clockRegionThree"));
				timeManageInfo.setClockRegionFourJbox(ste.getInt("clockRegionFourJbox"));
				timeManageInfo.setClockRegionFour(ste.getInt("clockRegionFour"));
				timeManageInfo.setClockRegionDelay(ste.getInt("clockRegionDelay"));
				timeManageInfo.setFollowModel(ste.getInt("followModel"));
				timeManageInfo.setTodsendTime(ste.getInt("todsendTime"));
				timeManageInfo.setTimeID(ste.getString("timeID"));
				timeManageInfo.setTimeType(ste.getString("timeType"));
				timeManageInfo.setFtimeID(ste.getString("ftimeID"));
				timeManageInfo.setFtimePort(ste.getString("ftimePort"));
				timeManageInfo.setLeapNumber(ste.getString("leapNumber"));
				timeManageInfo.setSystemVarianceValue(ste.getString("systemVarianceValue"));
				timeManageInfo.setTodState(ste.getString("todState"));
				timeManageInfo.setzTimeID(ste.getString("zTimeID"));
				timeManageInfo.setzTimeTpye(ste.getString("zTimeTpye"));
				timeManageInfo.setzTimePrecision(ste.getString("zTimePrecision"));
				timeManageInfo.setzTimeVariance(ste.getString("zTimeVariance"));
				timeManageInfo.setzTimePriorOne(ste.getString("zTimePriorOne"));
				timeManageInfo.setzTimePriorTwo(ste.getString("zTimePriorTwo"));
			}
		} catch (Exception e) {
			throw e;
		}finally{
			sql=null;
			if (ste != null) {
				try {
					ste.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				ste = null;
			}
			if (pre != null) {
				try {
					pre.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				pre = null;
			}
		}
		return timeManageInfo;
		}
		/**
		 * 
		 * @param timeManageInfo 实体
		 * @param conn 数据库连接
		 * @return 1成功，0不成功
		 * @throws Exception
		 * function:根新数据
		 */
	public int update(TimeManageInfo timeManageInfo,Connection conn)throws Exception{
		if(timeManageInfo==null){
			throw new Exception("timeManageInfo is null");
		}
		if(conn==null){
			throw new Exception("conn is null");
		}
		StringBuffer sql=null;;
		PreparedStatement pre=null;
		int result=0;
		try {
			sql=new StringBuffer();

			sql.append("update timeneptp set model=?, ClockType=?," +
					   "clockPrecision=?,clockVariance=?,priorOne=?,");
		    sql.append("priorTwo=?,manufacturerOUI=?," +
		    		   "clockRegion=?,clockRegionOne=?,clockRegionTwoJbox=?," +
		    		   "clockRegionTwo=?,clockRegionThreeJbox=?," +
		    		   "clockRegionThree=?,clockRegionFourJbox=?,");
		    sql.append("clockRegionFour=?,clockRegionDelay=?," +
		    		   "followModel=?,todsendTime=?,timeID=?,timeType=?," +
		    		    "ftimeID=?,ftimePort=?,leapNumber=?," +
		    		    "systemVarianceValue=?,todState=?,zTimeID=?,zTimeTpye=?," +
		    		    "zTimePrecision=?,zTimeVariance=?," +
		    		    "zTimePriorOne=?,zTimePriorTwo=? where siteId=?");
		    
		    pre=conn.prepareStatement(sql.toString());
		    pre.setInt(1, timeManageInfo.getModel());
		    pre.setInt(2, timeManageInfo.getClockType());
		    pre.setInt(3, timeManageInfo.getClockPrecision());
		    pre.setInt(4, timeManageInfo.getClockVariance());
		    pre.setInt(5, timeManageInfo.getPriorOne());
		    pre.setInt(6, timeManageInfo.getPriorTwo());
		    pre.setInt(7, timeManageInfo.getManufacturerOUI());
		    pre.setInt(8, timeManageInfo.getClockRegion());
		    pre.setInt(9, timeManageInfo.getClockRegionOne());
		    pre.setInt(10,  timeManageInfo.getClockRegionThreeJbox());
		    pre.setInt(11,  timeManageInfo.getClockRegionTwo());
		    pre.setInt(12, timeManageInfo.getClockRegionThreeJbox());
		    pre.setInt(13, timeManageInfo.getClockRegionThree());
		    pre.setInt(14, timeManageInfo.getClockRegionFourJbox());
		    pre.setInt(15, timeManageInfo.getClockRegionFour());
		    pre.setInt(16, timeManageInfo.getClockRegionDelay());
		    pre.setInt(17, timeManageInfo.getFollowModel());
		    pre.setInt(18, timeManageInfo.getTodsendTime());
		    pre.setString(19, timeManageInfo.getTimeID());
		    pre.setString(20, timeManageInfo.getTimeType());
		    pre.setString(21, timeManageInfo.getFtimeID());
		    pre.setString(22, timeManageInfo.getFtimePort());
		    pre.setString(23, timeManageInfo.getLeapNumber());
		    pre.setString(24, timeManageInfo.getSystemVarianceValue());
		    pre.setString(25, timeManageInfo.getTodState());
		    pre.setString(26, timeManageInfo.getzTimeID());
		    pre.setString(27, timeManageInfo.getzTimeTpye());
		    pre.setString(28, timeManageInfo.getzTimePrecision());
		    pre.setString(29, timeManageInfo.getzTimeVariance());
		    pre.setString(30, timeManageInfo.getzTimePriorOne());
		    pre.setString(31, timeManageInfo.getzTimePriorTwo());
		    pre.setInt(32, timeManageInfo.getSiteId());
		    
		    result=pre.executeUpdate();
		    
		} catch (Exception e) {
			throw e;
		}finally{
			sql=null;
			if (pre != null) {
				try {
					pre.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				pre = null;
			}
		}
		return result;
	}
		public List<TimeManageInfo> select(Connection connection,
				TimeManageInfo condition) throws Exception {

			if(connection==null){
				throw new Exception("connection is null");
			}
			String sql=null;
			PreparedStatement pre=null;
			ResultSet ste=null;
			TimeManageInfo timeManageInfo=null;
			List<TimeManageInfo> timeManageInfoList = null;
			try {
				timeManageInfoList = new ArrayList<TimeManageInfo>();
				sql="select * from timeneptp where 1=1 ";
				if(0!=condition.getId()){
					sql += " and id = "+condition.getId();
				}
				pre=connection.prepareStatement(sql);
				ste=pre.executeQuery();
				
				while(ste.next()){
					timeManageInfo=new TimeManageInfo();
					timeManageInfo.setId(ste.getInt("id"));
					timeManageInfo.setSiteId(ste.getInt("siteId"));
					timeManageInfo.setModel(ste.getInt("model"));
					timeManageInfo.setClockType(ste.getInt("ClockType"));
					timeManageInfo.setClockPrecision(ste.getInt("clockPrecision"));
					timeManageInfo.setClockVariance(ste.getInt("clockVariance"));
					timeManageInfo.setPriorOne(ste.getInt("priorOne"));
					timeManageInfo.setPriorTwo(ste.getInt("priorTwo"));
					timeManageInfo.setManufacturerOUI(ste.getInt("manufacturerOUI"));
					timeManageInfo.setClockRegion(ste.getInt("clockRegion"));
					timeManageInfo.setClockRegionOne(ste.getInt("clockRegionOne"));
					timeManageInfo.setClockRegionTwoJbox(ste.getInt("clockRegionTwoJbox"));
					timeManageInfo.setClockRegionTwo(ste.getInt("clockRegionTwo"));
					timeManageInfo.setClockRegionThreeJbox(ste.getInt("clockRegionThreeJbox"));
					timeManageInfo.setClockRegionThree(ste.getInt("clockRegionThree"));
					timeManageInfo.setClockRegionFourJbox(ste.getInt("clockRegionFourJbox"));
					timeManageInfo.setClockRegionFour(ste.getInt("clockRegionFour"));
					timeManageInfo.setClockRegionDelay(ste.getInt("clockRegionDelay"));
					timeManageInfo.setFollowModel(ste.getInt("followModel"));
					timeManageInfo.setTodsendTime(ste.getInt("todsendTime"));
					timeManageInfo.setTimeID(ste.getString("timeID"));
					timeManageInfo.setTimeType(ste.getString("timeType"));
					timeManageInfo.setFtimeID(ste.getString("ftimeID"));
					timeManageInfo.setFtimePort(ste.getString("ftimePort"));
					timeManageInfo.setLeapNumber(ste.getString("leapNumber"));
					timeManageInfo.setSystemVarianceValue(ste.getString("systemVarianceValue"));
					timeManageInfo.setTodState(ste.getString("todState"));
					timeManageInfo.setzTimeID(ste.getString("zTimeID"));
					timeManageInfo.setzTimeTpye(ste.getString("zTimeTpye"));
					timeManageInfo.setzTimePrecision(ste.getString("zTimePrecision"));
					timeManageInfo.setzTimeVariance(ste.getString("zTimeVariance"));
					timeManageInfo.setzTimePriorOne(ste.getString("zTimePriorOne"));
					timeManageInfo.setzTimePriorTwo(ste.getString("zTimePriorTwo"));
					timeManageInfoList.add(timeManageInfo);
				}
			} catch (Exception e) {
				throw e;
			}finally{
				sql=null;
				if (ste != null) {
					try {
						ste.close();
					} catch (Exception e) {
						ExceptionManage.dispose(e,this.getClass());
					}
					ste = null;
				}
				if (pre != null) {
					try {
						pre.close();
					} catch (Exception e) {
						ExceptionManage.dispose(e,this.getClass());
					}
					pre = null;
				}
			}
			return timeManageInfoList;
		}
}
