package com.nms.db.dao.ptn.clock;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.clock.ClockSource;
import com.nms.ui.manager.ExceptionManage;
import com.nms.ui.manager.UiUtil;

public class FrequencyClockManageDao {
	/**添加数据
	 * @param ClockSource
	 *            实体
	 * @param conection
	 *            数据库连接
	 * @return 判断是否插入成功 返回的ID号 只要不是0就是插入成功
	 * @throws Exception
	 * 插入数据
	 */
	public int insertSystemModel(ClockSource clockSource,Connection conection) throws Exception {
		if (null == clockSource) {
			throw new Exception("clockSource is null");
		}
		if (null == conection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		try {
			sql = "insert into frequencymanageclock(siteId,port," +
					                      "clockType,systemPriorLevel,"+
					                       "exportPriorLevel,physicsState," +
					                       "logicState,receiveSSMValue," +
					                       "receiveSSMRealityValue,SSMSend," +
					                       "selectQuelityLevel,DNUGroup,recoverModel,externalOrder," +
					                       "manageState,jobState) value(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

			preparedStatement = conection.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, clockSource.getSiteId());
			preparedStatement.setInt(2, clockSource.getPort());
			preparedStatement.setInt(3, UiUtil.getCodeByValue("clockType", "0").getId());
			preparedStatement.setString(4, clockSource.getSystemPriorLevel());
			preparedStatement.setString(5, clockSource.getExportPriorLevel());
			preparedStatement.setString(6, clockSource.getPhysicsState());
			preparedStatement.setString(7, clockSource.getLogicState());
			preparedStatement.setInt(8, clockSource.getReceiveSSMValue());
			preparedStatement.setInt(9, clockSource.getReceiveSSMRealityValue());
			preparedStatement.setInt(10, clockSource.getSSMSend());
			preparedStatement.setString(11, clockSource.getSelectQuelityLevel());
			preparedStatement.setString(12, clockSource.getDNUGroup());
			preparedStatement.setInt(13, clockSource.getRecoverModel());
			preparedStatement.setString(14, clockSource.getExternalOrder());
			preparedStatement.setString(15, clockSource.getManageState());
			preparedStatement.setString(16, clockSource.getJobState());

			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				result = resultSet.getInt(1);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
	}
	
	/**添加数据
	 * @param ClockSource
	 *            实体
	 * @param conection
	 *            数据库连接
	 * @return 判断是否插入成功 返回的ID号 只要不是0就是插入成功
	 * @throws Exception
	 * 插入数据
	 */
	public int insertExportModel(ClockSource clockSource,Connection conection) throws Exception {
		if (null == clockSource) {
			throw new Exception("clockSource is null");
		}
		if (null == conection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		try {
			sql = "insert into frequencymanageclock(siteId,port," +
					                      "clockType,systemPriorLevel,"+
					                       "exportPriorLevel,physicsState," +
					                       "logicState,receiveSSMValue," +
					                       "receiveSSMRealityValue,SSMSend," +
					                       "selectQuelityLevel,DNUGroup,recoverModel,externalOrder," +
					                       "manageState,jobState) value(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

			preparedStatement = conection.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, clockSource.getSiteId());
			preparedStatement.setInt(2, clockSource.getPort());
			preparedStatement.setInt(3, UiUtil.getCodeByValue("clockType", "1").getId());
			preparedStatement.setString(4, clockSource.getSystemPriorLevel());
			preparedStatement.setString(5, clockSource.getExportPriorLevel());
			preparedStatement.setString(6, clockSource.getPhysicsState());
			preparedStatement.setString(7, clockSource.getLogicState());
			preparedStatement.setInt(8, clockSource.getReceiveSSMValue());
			preparedStatement.setInt(9, clockSource.getReceiveSSMRealityValue());
			preparedStatement.setInt(10, clockSource.getSSMSend());
			preparedStatement.setString(11, clockSource.getSelectQuelityLevel());
			preparedStatement.setString(12, clockSource.getDNUGroup());
			preparedStatement.setInt(13, clockSource.getRecoverModel());
			preparedStatement.setString(14, "lock");
			preparedStatement.setString(15, clockSource.getManageState());
			preparedStatement.setString(16, clockSource.getJobState());

			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				result = resultSet.getInt(1);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
		}
		return result;
	}
/**
 * 
 * @param clockSource 实体
 * @param connection 数据库连接
 * @return 1删除成功，0不成功；
 * @throws Exception
 * function:通过关联网元表主键 来删除数据
 */
	public int delete(ClockSource clockSource ,Connection connection) throws Exception {
		if (connection == null) {
			throw new Exception("connection is null");
		}
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result=0;
		try {
			sql = "delete from frequencymanageclock where 1=1";
			if(0!=clockSource.getSiteId()){
				sql += " and siteId = " + clockSource.getSiteId();
			}
			if(0!=clockSource.getPort()){
				sql += " and port = " + clockSource.getPort();
			}
            
			preparedStatement = connection.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		}finally{
			sql=null;
			if(preparedStatement!=null){
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement=null;
			}
		}
		return result;
	}
	/**
	 * function: 查找所有的所有网元时钟的状态和属性
	 * @param conn 数据库连接
	 * @return 所有网元时钟的状态和属性 集合
	 * @throws Exception
	 */
public List<ClockSource> select(Connection conn,int id) throws Exception{
	if(conn==null){
		throw new Exception("connection is null");
	}
	String sql=null;
	PreparedStatement pre=null;
	ResultSet ste=null;
	ClockSource clockSource=null;
	List<ClockSource> frequencyClockManageList=null;
	 
	try {
		frequencyClockManageList=new ArrayList<ClockSource>();
		sql="select * from frequencymanageclock where siteId=?";
		
		pre=conn.prepareStatement(sql);
		pre.setInt(1, id);
		ste=pre.executeQuery();
		while(ste.next()){
			clockSource=new ClockSource();
			clockSource.setId(ste.getInt("id"));
			clockSource.setSiteId(ste.getInt("siteId"));
			clockSource.setPort(ste.getInt("port"));
			clockSource.setClockType(ste.getInt("clockType"));
			clockSource.setSystemPriorLevel(ste.getString("systemPriorLevel"));
			clockSource.setExportPriorLevel(ste.getString("exportPriorLevel"));
			clockSource.setPhysicsState(ste.getString("physicsState"));
			clockSource.setLogicState(ste.getString("logicState"));
			clockSource.setReceiveSSMValue(ste.getInt("receiveSSMValue"));
			clockSource.setReceiveSSMRealityValue(ste.getInt("receiveSSMRealityValue"));
			clockSource.setSSMSend(ste.getInt("SSMSend"));
			clockSource.setSelectQuelityLevel(ste.getString("selectQuelityLevel"));
			clockSource.setDNUGroup(ste.getString("DNUGroup"));
			clockSource.setRecoverModel(ste.getInt("recoverModel"));
			clockSource.setExternalOrder(ste.getString("externalOrder"));
			clockSource.setManageState(ste.getString("manageState"));
			clockSource.setJobState(ste.getString("jobState"));
			frequencyClockManageList.add(clockSource);
		}
		
	} catch (Exception e) {
		throw e;
	}finally{
		sql=null;
		if (ste != null) {
			try {
				ste.close();
			} catch (Exception e) {
				ExceptionManage.dispose(e,this.getClass());
			}
			ste = null;
		}
		if (pre != null) {
			try {
				pre.close();
			} catch (Exception e) {
				ExceptionManage.dispose(e,this.getClass());
			}
			pre = null;
		}
	}
	return frequencyClockManageList;
	}
	/**
	 * 更新
	 * @param clockSource 实体
	 * @param conn 数据库连接
	 * @return 1成功，0不成功
	 * @throws Exception
	 * function:根新数据
	 */
	public int update(ClockSource clockSource,Connection conn)throws Exception{
		if(clockSource==null){
			throw new Exception("clockSource is null");
		}
		if(conn==null){
			throw new Exception("conn is null");
		}
		String sql=null;;
		PreparedStatement pre=null;
		int result=0;
		try {
			sql = "update frequencymanageclock set port=?,clockType=?,systemPriorLevel=?,receiveSSMValue=?,SSMSend=?,"
					+ "DNUGroup=?,recoverModel=?, manageState=?,jobState=? ,receiveSSMRealityValue=? ,logicState =?,PhysicsState=? ,externalOrder=? where 1=1 ";
			if(0!=clockSource.getSiteId()){
				sql += " and siteId = " + clockSource.getSiteId();
			}
			if(0!=clockSource.getPort()){
				sql += " and port = " + clockSource.getPort();
			}
			if(0!=clockSource.getClockType()){
				sql +=" and clockType="+clockSource.getClockType();
			}
		    pre=conn.prepareStatement(sql.toString());
		    pre.setInt(1, clockSource.getPort());
		    pre.setInt(2, clockSource.getClockType());
		    pre.setString(3, clockSource.getSystemPriorLevel());
		    pre.setInt(4, clockSource.getReceiveSSMValue());
		    pre.setInt(5, clockSource.getSSMSend());
		    pre.setString(6, clockSource.getDNUGroup());
		    pre.setInt(7, clockSource.getRecoverModel());
//		    pre.setInt(8, clockSource.getActiveStatus());
		    pre.setString(8, clockSource.getManageState());
		    pre.setString(9, clockSource.getJobState());
		    pre.setInt(10, clockSource.getReceiveSSMRealityValue());
		    pre.setString(11, clockSource.getLogicState());
		    pre.setString(12, clockSource.getPhysicsState());
		    pre.setString(13, clockSource.getExternalOrder());
		    
		    result=pre.executeUpdate();
		    
		} catch (Exception e) {
			throw e;
		}finally{
			sql=null;
			if (pre != null) {
				try {
					pre.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				pre = null;
			}
		}
		return result;
	}
	public int updateActiveStatus(int siteId, int activeStatus, Connection connection) throws Exception {
		if(0==siteId){
			throw new Exception("siteId is null");
		}
		if(0==activeStatus){
			throw new Exception("activeStatus is null");
		}
		String sql=null;;
		PreparedStatement pre=null;
		int result=0;
		try {
			
			sql = "update frequencymanageclock set activeStatus=? where siteid=?";
		    pre=connection.prepareStatement(sql.toString());
		    pre.setInt(1, activeStatus);
		    pre.setInt(2, siteId);
		    result=pre.executeUpdate();
		    
		} catch (Exception e) {
			throw e;
		}finally{
			sql=null;
			if (pre != null) {
				try {
					pre.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				pre = null;
			}
		}
		return result;
		
	}
	/**
	 * function: 条件查询
	 * @param conn 数据库连接
	 * @return 
	 * @throws Exception
	 */
	public List<ClockSource> select(ClockSource clockSourceSearch,Connection conn) throws Exception{
		if(conn==null){
			throw new Exception("connection is null");
		}
		String sql=null;
		PreparedStatement pre=null;
		ResultSet ste=null;
		ClockSource clockSource=null;
		List<ClockSource> frequencyClockManageList=null;
		 
		try {
			frequencyClockManageList=new ArrayList<ClockSource>();
			sql="select * from frequencymanageclock where 1=1 ";
			if(0!=clockSourceSearch.getSiteId()){
				sql += " and siteId = "+clockSourceSearch.getSiteId();
			}
			if(0!=clockSourceSearch.getPort()){
				sql += " and port = "+clockSourceSearch.getPort();
			}
			if(0!=clockSourceSearch.getId()){
				sql += " and id ="+clockSourceSearch.getId();
			}
			pre=conn.prepareStatement(sql);
			
			ste=pre.executeQuery();
			while(ste.next()){
				clockSource=new ClockSource();
				clockSource.setId(ste.getInt("id"));
				clockSource.setSiteId(ste.getInt("siteId"));
				clockSource.setPort(ste.getInt("port"));
				clockSource.setClockType(ste.getInt("clockType"));
				clockSource.setSystemPriorLevel(ste.getString("systemPriorLevel"));
				clockSource.setExportPriorLevel(ste.getString("exportPriorLevel"));
				clockSource.setPhysicsState(ste.getString("physicsState"));
				clockSource.setLogicState(ste.getString("logicState"));
				clockSource.setReceiveSSMValue(ste.getInt("receiveSSMValue"));
				clockSource.setReceiveSSMRealityValue(ste.getInt("receiveSSMRealityValue"));
				clockSource.setSSMSend(ste.getInt("SSMSend"));
				clockSource.setSelectQuelityLevel(ste.getString("selectQuelityLevel"));
				clockSource.setDNUGroup(ste.getString("DNUGroup"));
				clockSource.setRecoverModel(ste.getInt("recoverModel"));
				clockSource.setExternalOrder(ste.getString("externalOrder"));
				clockSource.setManageState(ste.getString("manageState"));
				clockSource.setJobState(ste.getString("jobState"));
				frequencyClockManageList.add(clockSource);
			}
			
		} catch (Exception e) {
			throw e;
		}finally{
			sql=null;
			if (ste != null) {
				try {
					ste.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				ste = null;
			}
			if (pre != null) {
				try {
					pre.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				pre = null;
			}
		}
		return frequencyClockManageList;
		}
}
