package com.nms.model.ptn.path.tunnel;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.SqlSession;

import com.nms.db.bean.ptn.Businessid;
import com.nms.db.bean.ptn.oam.OamInfo;
import com.nms.db.bean.ptn.oam.OamMepInfo;
import com.nms.db.bean.ptn.oam.OamMipInfo;
import com.nms.db.bean.ptn.path.tunnel.Lsp;
import com.nms.db.bean.ptn.path.tunnel.Tunnel;
import com.nms.db.dao.ptn.LabelInfoDao;
import com.nms.db.dao.ptn.path.tunnel.LspinfoMapper;
import com.nms.db.dao.ptn.path.tunnel.TunnelMapper;
import com.nms.db.enums.EServiceType;
import com.nms.db.enums.OamTypeEnum;
import com.nms.model.equipment.shlef.SiteService_MB;
import com.nms.model.ptn.BusinessidService_MB;
import com.nms.model.ptn.oam.OamInfoService_MB;
import com.nms.model.ptn.qos.QosInfoService_MB;
import com.nms.model.util.LabelManage;
import com.nms.model.util.ObjectService_Mybatis;
import com.nms.model.util.Services;
import com.nms.ui.manager.BusinessIdException;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.ExceptionManage;
import com.nms.ui.manager.ResourceUtil;
import com.nms.ui.manager.UiUtil;
import com.nms.ui.manager.keys.StringKeysTip;

public class TunnelService_MB extends ObjectService_Mybatis {
	public void setSqlSession(SqlSession sqlSession) {
		super.sqlSession = sqlSession;
	}

	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}

	private TunnelMapper tunnelMapper;

	/**
	 * 过滤查询tunnel ， tunnel列表中用到
	 * 
	 * @param tunnelFilter
	 * @return
	 * @throws Exception
	 */
	public List<Tunnel> filterSelect(Tunnel tunnelFilter) throws Exception {
		List<Tunnel> tunnelList = null;
		return tunnelList;
	}

	/**
	 * 根据条件查询 不关联其他表
	 * 
	 * @param tunnel
	 * @return
	 * @throws Exception
	 */
	public List<Tunnel> select_nojoin(Tunnel tunnel) throws Exception {
		List<Tunnel> tunnels = null;
		return tunnels;
	}

	/**
	 * 通过主键id查询
	 * 
	 * @param tunnelID
	 * @return
	 */
	public Tunnel selectByID(Integer tunnelID) {
		Tunnel tunnel = null;
		tunnel = tunnelMapper.selectByPrimaryKey(tunnelID);
		return tunnel;
	}

	/**
	 * 新建tunnel
	 * 
	 * @param tunnel
	 * @return
	 */
	public int save(Tunnel tunnel) {

//		if (tunnel == null) {
//			throw new Exception("tunnel is null");
//		}
//
//		Lsp lspParticular = null;
//		LspDao lspParticularDao = null;
//		BusinessidService_MB businessidServiceMB = null;
//		OamInfoService_MB oamInfoServiceMB = null;
//		// ProtectInfoService pInfoService = null;
//		Businessid businessid_tunnel = null;
//
//		List<Lsp> lspparticularlist = null;
//		Map<Integer, Integer> siteServicemap = null;
		int tunnelId = 0;
//		int isSingle = -1;
//		int protectTunnelId = 0;
//		QosRelevanceService_MB qosRelevanceServiceMB = null;
//		List<QosRelevance> qosRelevanceList = null;
//		SiteService_MB siteServiceMB = null;
//		try {
//			sqlSession.commit(false);
//			siteServiceMB = (SiteService_MB) ConstantUtil.serviceFactory.newService_MB(Services.SITE, this.sqlSession);
//			businessidServiceMB = (BusinessidService_MB) ConstantUtil.serviceFactory.newService_MB(Services.BUSINESSID, this.sqlSession);
//			oamInfoServiceMB = (OamInfoService_MB) ConstantUtil.serviceFactory.newService_MB(Services.OamInfo, this.sqlSession);
//			siteServicemap = new HashMap<Integer, Integer>();// 用于保存网元，以及对应的ServiceId
//
//			tunnelId = tunnelMapper.insert(tunnel);
//
//			tunnel.setTunnelId(tunnelId);
//			isSingle = tunnel.getIsSingle();
//
//			lspParticularDao = new LspDao();
//			lspparticularlist = tunnel.getLspParticularList();
//			if (lspparticularlist != null && lspparticularlist.size() > 0) {
//				for (int j = 0; j < lspparticularlist.size(); j++) {
//					lspParticular = lspparticularlist.get(j);
//					lspParticular.setTunnelId(tunnelId);
//
//					// 配置标签
//					this.getLabel(lspParticular, isSingle);
//
//					/* 如果j>0说明有多条leg，就有xc存在 xc的上条数据的z设备id应该等于的二条数据的a设备id */
//					if (j > 0) {
//						lspParticular.setAtunnelbusinessid(businessid_tunnel.getIdValue());
//					} else {
//						// 数据中存在a网元时，配置a端的设备id
//						if (lspParticular.getAPortId() > 0) {
//							/** 获取A端的tunnel业务id */
//							businessid_tunnel = this.setbusinessId(lspParticular, siteServicemap, businessidService, "a");
//						}
//					}
//					// 数据中存在Z网元时，配置Z端的设备id
//					if (lspParticular.getZPortId() > 0) {
//						/** 获取Z端的tunnel业务id */
//						businessid_tunnel = this.setbusinessId(lspParticular, siteServicemap, businessidService, "z");
//					}
//
//					lspParticularDao.insert(lspParticular, connection);
//				}
//
//			}
//
//			for (OamInfo oamInfo : tunnel.getOamList()) {
//				if (oamInfo.getOamType() == OamTypeEnum.AMEP || oamInfo.getOamType() == OamTypeEnum.ZMEP) {
//					oamInfo.getOamMep().setServiceId(tunnelId);
//					oamInfo.getOamMep().setObjId(siteServicemap.get(oamInfo.getOamMep().getSiteId()));
//
//					// 如果tunnel的类型是保护，并且是晨晓的设备⾿就去修改保护tunnel oam的objid
//					if (tunnel.getProtectTunnelId() > 0 && siteService.getManufacturer(oamInfo.getOamMep().getSiteId()) == EManufacturer.CHENXIAO.getValue()) {
//						oamInfoService.update_mep_objid(siteServicemap.get(oamInfo.getOamMep().getSiteId()), oamInfo.getOamMep().getSiteId(), tunnel.getProtectTunnelId(), EServiceType.TUNNEL.toString(), connection);
//					}
//				} else if (oamInfo.getOamType() == OamTypeEnum.MIP) {
//					oamInfo.getOamMip().setServiceId(tunnelId);
//					oamInfo.getOamMip().setObjId(siteServicemap.get(oamInfo.getOamMip().getSiteId()));
//				} else if (oamInfo.getOamType() == OamTypeEnum.MEP) {
//					oamInfo.getOamMep().setServiceId(tunnelId);
//				}
//				oamInfoService.saveOrUpdate(oamInfo);
//			}
//
//			qosRelevanceService = (QosRelevanceService) ConstantUtil.serviceFactory.newService(Services.QOSRELEVANCE, this.connection);
//			qosRelevanceList = qosRelevanceService.getList(tunnel);
//			qosRelevanceService.save(qosRelevanceList);
//
//			// 保存保护tunnel
//			if (null != tunnel.getProtectTunnel()) {
//				tunnel.getProtectTunnel().setTunnelName(tunnel.getTunnelName() + "_protect");
//				tunnel.getProtectTunnel().setTunnelStatus(tunnel.getTunnelStatus());
//				protectTunnelId = this.savaProtect(tunnel.getProtectTunnel());
//				tunnel.setProtectTunnelId(protectTunnelId);
//				tunnelDao.update(tunnel, connection);
//			}
//
//			// 离线网元数据下载
//			if (0 != tunnel.getASiteId()) {
//				super.dateDownLoad(tunnel.getASiteId(), tunnelId, EServiceType.TUNNEL.getValue(), EActionType.INSERT.getValue(), tunnel.getLspParticularList().get(0).getAtunnelbusinessid() + "", null, tunnel.getAPortId(), 0, null);
//			}
//			if (0 != tunnel.getZSiteId()) {
//				super.dateDownLoad(tunnel.getZSiteId(), tunnelId, EServiceType.TUNNEL.getValue(), EActionType.INSERT.getValue(), tunnel.getLspParticularList().get(0).getZtunnelbusinessid() + "", null, tunnel.getZPortId(), 0, null);
//			}
//			sqlSession.commit();
//		} catch (BusinessIdException e) {
//			sqlSession.rollback();
//			throw e;
//		} catch (Exception e) {
//			sqlSession.rollback();
//			ExceptionManage.dispose(e, this.getClass());
//		} finally {
//			sqlSession.commit(true);
//		}
		return tunnelId;

	}

	/**
	 * 获取label
	 * 
	 * @param lsp
	 *            lsp对象
	 * @return
	 * @throws Exception
	 */
	public void getLabel(Lsp lsp, int isSingle) throws Exception {
//		if (null == lsp) {
//			throw new Exception("lsp is null");
//		}
//		LabelInfoService_MB labelInfoServiceMB = null;
//		SiteService_MB siteServiceMB = null;
//		try {
//			String type = "";
//			int manufacturerA = 0;
//			int manufacturerZ = 0;
//			int label = 0;
//			LabelInfoMapper labelInfoMapper = sqlSession.getMapper(LabelInfoMapper.class);
//			labelInfoServiceMB = (LabelInfoService_MB) ConstantUtil.serviceFactory.newService_MB(Services.LABELINFO, this.sqlSession);
//			// 判断isSingle为0，则代表网络侧，1，则代表单站侧
//			siteServiceMB = (SiteService_MB) ConstantUtil.serviceFactory.newService_MB(Services.SITE, this.sqlSession);
//			// 等于1是晨晓设备,入标签网元唯一
//			manufacturerA = siteServiceMB.getManufacturer(lsp.getASiteId());
//			manufacturerZ = siteServiceMB.getManufacturer(lsp.getZSiteId());
//			if (isSingle == 0) {
//				// 没有填写标签值说明是批量创建Tunnel，自动分配前向标签
//				if (lsp.getFrontLabelValue() == 0) {
//					List<Integer> labelList = labelInfoMapper.quertyLabelListBySite(lsp.getASiteId(), lsp.getZSiteId(), new ArrayList<Integer>(), "TUNNEL", connection, manufacturerA, manufacturerZ);
//					if (labelList.size() == 0) {
//						label = this.initLabel(lsp.getASiteId(), lsp.getZSiteId(), labelInfoMapper, connection, manufacturerA, manufacturerZ);
//					} else {
//						label = labelList.get(0);
//					}
//					lsp.setFrontLabelValue(label);
//				}
//				// 将前向标签插入labelInfo表中
//				if (manufacturerZ == 1) {
//					type = "CX";
//				} else {
//					type = "TUNNEL";
//				}
//				labelInfoMapper.insertNewLabel(lsp.getFrontLabelValue(), lsp.getZSiteId(), type, connection);
//				labelInfoMapper.updateStatusBatch(lsp.getFrontLabelValue(), lsp.getZSiteId(), 0, type, connection);
//				// 没有填写标签值说明是批量创建Tunnel，自动分配后向标签
//				if (lsp.getBackLabelValue() == 0) {
//					List<Integer> labelList = labelInfoMapper.quertyLabelListBySite(lsp.getASiteId(), lsp.getZSiteId(), new ArrayList<Integer>(), "TUNNEL", connection, manufacturerA, manufacturerZ);
//					if (labelList.size() == 0) {
//						label = this.initLabel(lsp.getASiteId(), lsp.getZSiteId(), labelInfoDao, connection, manufacturerA, manufacturerZ);
//					} else {
//						label = labelList.get(0);
//					}
//					lsp.setBackLabelValue(label);
//				}
//				// 将后向标签插入labelInfo表中
//				if (manufacturerA == 1) {
//					type = "CX";
//				} else {
//					type = "TUNNEL";
//				}
//				labelInfoMapper.insertNewLabel(lsp.getBackLabelValue(), lsp.getASiteId(), type, connection);
//				labelInfoMapper.updateStatusBatch(lsp.getBackLabelValue(), lsp.getASiteId(), 0, type, connection);
//			} else {
//				// 填写了标签,说明是单网元配置，直接修改标签状态
//				if (lsp.getASiteId() > 0) {
//					if (manufacturerA == 1) {
//						type = "CX";
//					} else {
//						type = "TUNNEL";
//					}
//					labelInfoService.saveOrUpdate(lsp.getBackLabelValue(), lsp.getASiteId(), 0, type, connection);
//				}
//				if (lsp.getZSiteId() > 0) {
//					if (manufacturerZ == 1) {
//						type = "CX";
//					} else {
//						type = "TUNNEL";
//					}
//					labelInfoService.saveOrUpdate(lsp.getFrontLabelValue(), lsp.getZSiteId(), 0, type, connection);
//				}
//			}
//		} catch (Exception e) {
//			ExceptionManage.dispose(e, this.getClass());
//		} finally {
//			// UiUtil.closeService(labelInfoService);
//			// UiUtil.closeService(siteService);
//		}
	}

	/**
	 * 获取businessid 并修改businessid状徿
	 * 
	 * @author kk
	 * 
	 * @param
	 * 
	 * @return
	 * 
	 * @Exception 异常对象
	 */
	public Businessid setbusinessId(Lsp lspParticular, Map<Integer, Integer> siteServicemap, BusinessidService_MB businessidService_MB, String type) throws Exception {

		int businessId = 0;
		int siteId = 0;
		Businessid businessid_tunnel = null;
		SiteService_MB siteService_MB = null;
		try {
			siteService_MB = (SiteService_MB) ConstantUtil.serviceFactory.newService_MB(Services.SITE, this.sqlSession);
			if ("a".equals(type)) {
				businessId = lspParticular.getAtunnelbusinessid();
				siteId = lspParticular.getASiteId();
			} else {
				businessId = lspParticular.getZtunnelbusinessid();
				siteId = lspParticular.getZSiteId();
			}

			/** 获取A端的tunnel业务id */
			if (businessId == 0) {
				businessid_tunnel = businessidService_MB.select(siteId, "tunnel",0);
			} else {
				businessid_tunnel = businessidService_MB.select(siteId, "tunnel",businessId);
			}
			if (businessid_tunnel == null) {
				throw new BusinessIdException(siteService_MB.getSiteName(siteId) + ResourceUtil.srcStr(StringKeysTip.TIP_TUNNELID));
			}
			if ("a".equals(type)) {
				lspParticular.setAtunnelbusinessid(businessid_tunnel.getIdValue());
			} else {
				lspParticular.setZtunnelbusinessid(businessid_tunnel.getIdValue());
			}
			siteServicemap.put(siteId, businessid_tunnel.getIdValue());
			businessidService_MB.update(businessid_tunnel.getId(), 1);
		} catch (Exception e) {
			throw e;
		} finally {
		}
		return businessid_tunnel;
	}

	/**
	 * 查询所有
	 * 
	 * @return
	 */
	public List<Tunnel> selectAll() {
		List<Tunnel> tunnels = tunnelMapper.selectAll();
		return tunnels;
	}

	/**
	 * 初始化标签
	 */
	private int initLabel(int asiteId, int zsiteId, LabelInfoDao labelInfoDao, Connection connection,
							int manufacturerA, int manufacturerZ) throws Exception {
		try {
			while (true) {
				LabelManage labelManage = new LabelManage();
				labelManage.addLabel(asiteId, zsiteId, "TUNNEL", connection);
				List<Integer> labelList = labelInfoDao.quertyLabelListBySite(asiteId, zsiteId,
						new ArrayList<Integer>(), "TUNNEL", connection, manufacturerA, manufacturerZ);
				for (Integer label : labelList) {
					if(label > 0){
						return label;
					}
				}
			}
		} catch (Exception e) {
			throw e;
		}
	}
	
	
	/**
	 * 查询武汉单网元的tunnel 包含保护tunnel
	 * 
	 * @param siteId
	 * @return
	 * @throws Exception
	 */
	public List<Tunnel> selectWHNodesBySiteId(int siteId) throws Exception {

		List<Tunnel> tunnelList = null;
		LspinfoMapper lspInfoMapper = null;
		List<Lsp> lspparticularList = null;
		try {
			lspInfoMapper = this.sqlSession.getMapper(LspinfoMapper.class);
			tunnelList = new ArrayList<Tunnel>();
			tunnelList = this.tunnelMapper.quertyWHNodeBySite(siteId);
			for (Tunnel tunnel : tunnelList) {
				tunnel.setNode(true);
				lspparticularList = new ArrayList<Lsp>();
				lspparticularList = lspInfoMapper.queryBySiteId(siteId, tunnel.getTunnelId());
				tunnel.setLspParticularList(lspparticularList);
			}
			this.setOtherInfomationforTunnel(tunnelList);

		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			lspparticularList = null;
			lspInfoMapper = null;
		}
		return tunnelList;
	}
	
	
	// 查询并设置OAM、QoS、保护信忿
	private void setOtherInfomationforTunnel(List<Tunnel> tunnels) {
		OamInfoService_MB oamInfoService = null;
		QosInfoService_MB qosInfoService = null;
		OamInfo oamInfo = null;
		OamMepInfo oamMepInfo = null;
		OamMipInfo oamMipInfo = null;
		List<OamInfo> oamInfoList;
		try {
			qosInfoService = (QosInfoService_MB) ConstantUtil.serviceFactory.newService_MB(Services.QosInfo, this.sqlSession);
			oamInfoService = (OamInfoService_MB) ConstantUtil.serviceFactory.newService_MB(Services.OamInfo, this.sqlSession);

			for (int i = 0; i < tunnels.size(); i++) {
				oamInfoList = new ArrayList<OamInfo>();
				oamInfo = new OamInfo();
				oamMepInfo = new OamMepInfo();
				oamMepInfo.setServiceId(tunnels.get(i).getTunnelId());
				oamMepInfo.setObjType("TUNNEL");
				oamInfo.setOamMep(oamMepInfo);

				oamMipInfo = new OamMipInfo();
				oamMipInfo.setServiceId(tunnels.get(i).getTunnelId());
				oamMipInfo.setObjType("TUNNEL");
				oamInfo.setOamMip(oamMipInfo);

				oamInfoList = oamInfoService.queryByServiceId(oamInfo);

				for (OamInfo obj : oamInfoList) {
					if(null != obj.getOamMep())
						if(obj.getOamMep().getSiteId() == tunnels.get(i).getaSiteId()){
							obj.setOamType(OamTypeEnum.AMEP);
						}else{
							obj.setOamType(OamTypeEnum.ZMEP);
						}
					if(null != obj.getOamMip())
						obj.setOamType(OamTypeEnum.MIP);
				}
				tunnels.get(i).setOamList(oamInfoList);

				// 查询qos
				tunnels.get(i).setQosList(qosInfoService.getQosByObj(EServiceType.TUNNEL.toString(), tunnels.get(i).getTunnelId()));
				String type = tunnels.get(i).getTunnelType();
				if (Integer.parseInt(type) > 0) {// 过滤保护tunnel
					String code = UiUtil.getCodeById(Integer.parseInt(type)).getCodeValue();

					if (!"0".equals(type) && ("2".equals(code) || "3".equals(code)) && tunnels.get(i).getProtectTunnelId()>0) {
						Tunnel tunnelSelect = new Tunnel();
						tunnelSelect.setTunnelId(tunnels.get(i).getProtectTunnelId());
						List<Tunnel> tunnelList = this.select_nojoin(tunnelSelect);
						if (null != tunnelList) {
							if (tunnelList.size() != 1) {
								tunnels.get(i).setProtectTunnel(null);
							} else {
								tunnels.get(i).setProtectTunnel(tunnelList.get(0));
							}
						}

					}
				}

				// if (tunnels.get(i).getProtectTunnelId() != 0) {
				// protectionInfo = new ProtectionInfo();
				// protectionInfo.setTunnelId(tunnels.get(i).getTunnelId());
				// tunnels.get(i).setProList(pInfoService.selectByTunnelId(protectionInfo));
				// }
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
//			UiUtil.closeService(oamInfoService);
//			UiUtil.closeService(qosInfoService);
		}
	}

	public TunnelMapper getTunnelMapper() {
		return tunnelMapper;
	}

	public void setTunnelMapper(TunnelMapper tunnelMapper) {
		this.tunnelMapper = tunnelMapper;
	}

}
