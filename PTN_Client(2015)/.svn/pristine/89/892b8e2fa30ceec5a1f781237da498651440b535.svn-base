package com.nms.db.dao.perform;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.perform.Capability;
import com.nms.ui.manager.ExceptionManage;


public class CapabilityDao {
	/**
	 * 增加capability(性能表)
	 * 
	 * @param capability
	 *            实体
	 * @param connection
	 *            数据库连接
	 * @return 插入的记录数
	 * @throws Exception
	 */
	public int insert(Capability capability, Connection connection)
			throws Exception {

		if (null == capability) {
			throw new Exception("capability is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "insert into capability(capabilitytype,capabilityname,capabilitydesc,capabilitydisp,capabilitycode,capabilitycounter,Manufacturer,UnitName,CapabilityDesc_en) values(?,?,?,?,?,?,?,?,?)";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, capability.getCapabilitytype());
			preparedStatement.setString(2, capability.getCapabilityname());
			preparedStatement.setString(3, capability.getCapabilitydesc());					
			preparedStatement.setString(4, capability.getCapabilitydisp());
			preparedStatement.setInt(5, capability.getCapabilitycode());
			preparedStatement.setString(6, capability.getCapabilitycounter());
			preparedStatement.setInt(7, capability.getManufacturer());
			preparedStatement.setString(8, capability.getUnitName());
			preparedStatement.setString(9, capability.getCapabilitydesc_en());
			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}

			sql = null;
		}

		return result;
	}

	/**
	 * 修改capability(性能表)
	 * 
	 * @param capability
	 *            实体
	 * @param connection
	 *            数据库连接
	 * @return 修改的记录数
	 * @throws Exception
	 */
	public int update(Capability capability, Connection connection)
			throws Exception {
		if (null == capability) {
			throw new Exception("capability is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "update capability set capabilitytype=?,capabilityname = ?,capabilitydesc=?,capabilitydisp = ?,capabilitycode = ?,capabilitycounter =? ,Manufacturer=?,UnitName=?,CapabilityDesc_en=? where id=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, capability.getCapabilitytype());
			preparedStatement.setString(2, capability.getCapabilityname());
			preparedStatement.setString(3, capability.getCapabilitydesc());
			preparedStatement.setString(4, capability.getCapabilitydisp());
			preparedStatement.setInt(5, capability.getCapabilitycode());
			preparedStatement.setString(6, capability.getCapabilitycounter());
			preparedStatement.setInt(7, capability.getManufacturer());
			preparedStatement.setString(8, capability.getUnitName());
			preparedStatement.setString(9, capability.getCapabilitydesc_en());
			preparedStatement.setInt(10, capability.getId());
			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 通过主键删除capability(性能表)
	 * 
	 * @param id
	 *            主键
	 * @param connection
	 *            数据库连接
	 * @return 删除的记录数
	 * @throws Exception
	 */
	public int delete(int id, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try {
			sql = "delete from capability where id=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, id);

			result = preparedStatement.executeUpdate();

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 根据条件查询capability(性能表)
	 * 
	 * @param capabilityCondition
	 *            查询条件
	 * @param connection
	 *            数据库连接
	 * @return List<Capability> 集合
	 * @throws Exception
	 */
	public List<Capability> queryByCondition(Capability capabilityCondition,
			Connection connection) throws Exception {

		if (null == capabilityCondition) {
			throw new Exception("capabilityCondition is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<Capability> capabilityList = null;
		String sql = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		Capability capability = null;

		try {
			capabilityList = new ArrayList<Capability>();
			sql = "select *  from capability where 1=1";

			if (capabilityCondition.getId() > 0) {
				sql += " and id=" + capabilityCondition.getId();
			}
			if (capabilityCondition.getCapabilitycode() >0) {
				sql += " and capabilitycode="
						+ capabilityCondition.getCapabilitycode();
			}
			if (capabilityCondition.getManufacturer() > 0) {
				sql += " and Manufacturer="
						+ capabilityCondition.getManufacturer();
			}
			sql += " order by manufacturer, capabilitytype, capabilitycode ";
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				capability = new Capability();
				capability.setId(resultSet.getInt("id"));
				capability.setCapabilitytype(resultSet.getString("capabilitytype"));							
				capability.setCapabilityname(resultSet.getString("capabilityname"));
				capability.setCapabilitydesc(resultSet.getString("capabilitydesc"));
				capability.setCapabilitydisp(resultSet.getString("capabilitydisp"));
				capability.setCapabilitycode(resultSet.getInt("capabilitycode"));
				capability.setCapabilitycounter(resultSet.getString("capabilitycounter"));
				capability.setManufacturer(resultSet.getInt("Manufacturer"));
				capability.setUnitName(resultSet.getString("UnitName"));
				capability.setCapabilitydesc_en(resultSet.getString("CapabilityDesc_en"));
				capabilityList.add(capability);
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
			capability = null;
		}

		return capabilityList;

	}
	public List<Capability> queryByCapaName(Capability capability,Connection connection)throws Exception{
		if(connection ==null){
			throw new Exception(" connection is null");
		}
		if(capability==null){
			throw new Exception(" capability is null");
		}
		List<Capability> capabilityList=null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		String sql="select * from capability where capabilityType=? and Manufacturer=?";
		try{
			capabilityList=new ArrayList<Capability>();
			preparedStatement=connection.prepareStatement(sql);
			preparedStatement.setString(1, capability.getCapabilitytype());
			preparedStatement.setInt(2, capability.getManufacturer());
			resultSet=preparedStatement.executeQuery();
			while(resultSet.next()){
				capability=new Capability();
				capability.setId(resultSet.getInt("id"));
				capability.setCapabilitytype(resultSet.getString("capabilitytype"));							
				capability.setCapabilityname(resultSet.getString("capabilityname"));
				capability.setCapabilitydesc(resultSet.getString("capabilitydesc"));
				capability.setCapabilitydisp(resultSet.getString("capabilitydisp"));
				capability.setCapabilitycode(resultSet.getInt("capabilitycode"));
				capability.setCapabilitycounter(resultSet.getString("capabilitycounter"));
				capability.setManufacturer(resultSet.getInt("Manufacturer"));
				capability.setUnitName(resultSet.getString("UnitName"));
				capability.setCapabilitydesc_en(resultSet.getString("CapabilityDesc_en"));
				capabilityList.add(capability);
			}
		}catch (Exception e) {
			throw e;
		}finally{
			capability=null;
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql=null;
		}
		return capabilityList;
	}
}
