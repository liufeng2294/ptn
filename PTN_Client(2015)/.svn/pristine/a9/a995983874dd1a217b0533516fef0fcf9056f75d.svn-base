package com.nms.db.dao.ptn;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.nms.db.bean.ptn.SecondMacStudyInfo;
import com.nms.ui.manager.ExceptionManage;
import com.nms.db.bean.ptn.SsMacStudy;

/**
 * function:二层静态MAC地址数据库操作
 *
 */
public class SecondMacStudyDao {

	/**
	 * function:将MAC插入数据库
	 */
	public int insert(SsMacStudy ssMacStudy, Connection connection) throws Exception {
		if (null == ssMacStudy) {
			throw new Exception("ssMacStudy is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}
        ResultSet resultSet = null;
		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;
		try {
			sql = "insert into macstudyaddress(num,siteId,portId,vlan,macnum,macaddress) " +
			                "values(?,?,?,?,?,?)";
			preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, ssMacStudy.getNum());
			preparedStatement.setInt(2, ssMacStudy.getSiteId());
			preparedStatement.setInt(3,ssMacStudy.getPortId());
			preparedStatement.setInt(4, ssMacStudy.getVlan());
			preparedStatement.setInt(5, ssMacStudy.getMacCount());
			preparedStatement.setString(6, ssMacStudy.getMacAddress());
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			while (resultSet.next()) {
				result = resultSet.getInt(1);
			}
			
		} catch (Exception e) {
			throw e;
		} finally {
			if(null != resultSet){
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return  result;
	}

	/**
	 * function:将修改将MAC插入数据库	 
	 * @param connection 
	 * @throws Exception
	 */
	public void update(SsMacStudy ssMacStudy, Connection connection) throws Exception {
		if (null == ssMacStudy) {
			throw new Exception("ssMacStudy is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;

		try {
			sql = "update macstudyaddress set portId=?,vlan=?,macnum=?,macaddress=?" +
					" where num=? and id=?";

			preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, ssMacStudy.getPortId());
			preparedStatement.setInt(2, ssMacStudy.getVlan());
			preparedStatement.setInt(3,ssMacStudy.getMacCount());			
			preparedStatement.setString(4,ssMacStudy.getMacAddress());
			preparedStatement.setInt(5, ssMacStudy.getNum());
			preparedStatement.setInt(6, ssMacStudy.getId());
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
	}

	/**
	 * function:删除MAC的数据从数据库中
	 * @param connection 
	 * @throws Exception
	 */
	public void delete(SsMacStudy ssMacStudy, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;

		try {
			sql = "delete from macstudyaddress where id=? and siteId=?";		
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, ssMacStudy.getId());
			preparedStatement.setInt(2, ssMacStudy.getSiteId());
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
	}

	/**
	 * function:查询数据库中Mac的信息
	 * @param id 数据库主键ID
	 * @param connection 
	 * @throws Exception
	 */
	public List<SsMacStudy> selectBySecondMacStudyInfo(int siteId, Connection connection) throws Exception {

		if (connection == null) {
			throw new Exception("connection is null");
		}

		List<SsMacStudy> macList = null;
		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			macList = new ArrayList<SsMacStudy>();	
			sql="select * from macstudyaddress where siteId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);			
			macList = this.excuteQuery(preparedStatement);
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return macList;
	}
	
	private List<SsMacStudy> excuteQuery(PreparedStatement preparedStatement) throws Exception {
		List<SsMacStudy> macList = null;
		ResultSet resultSet = null;
		SsMacStudy mac = null;
		try {
			macList = new ArrayList<SsMacStudy>();
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				mac = new SsMacStudy();
				mac.setId(resultSet.getInt("id"));
				mac.setNum(resultSet.getInt("num"));
				mac.setSiteId(resultSet.getInt("siteId"));
				mac.setVlan(resultSet.getInt("vlan"));
				mac.setPortId(resultSet.getInt("portId"));
				mac.setMacCount(resultSet.getInt("macnum"));
				mac.setMacAddress(resultSet.getString("macAddress"));
				String []macs= resultSet.getString("macAddress").split("\\|");
				for(int i = 0; i< macs.length; i++)
				{
			    mac.getMacAddressList().add(macs[i]);
				}
						
				macList.add(mac);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			mac = null;
		}
		return macList;
	}
	
	
	public List<Integer> queryMacId(int siteId, Connection connection) throws Exception
	{
		if (null == connection) 
		{
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
        List<Integer> idList = new ArrayList<Integer>();
		try {
			sql = "select num from macstudyaddress where siteId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);

			resultSet = preparedStatement.executeQuery();
			while(resultSet.next()){
				idList.add(resultSet.getInt("num"));
			}

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return idList;
	}
	public List<SecondMacStudyInfo> select(int siteId, Connection connection) throws Exception
	{
		if (null == connection) 
		{
			throw new Exception("connection is null");
		}
		List<SecondMacStudyInfo> ssMacStudyList = null;
		String sql = null;
		String sql1 = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		ResultSet resultSet1 = null;
		PreparedStatement preparedStatement1 = null;
		SecondMacStudyInfo secondMacStudyObject =null;
		try {
			ssMacStudyList = new ArrayList<SecondMacStudyInfo>();
			sql = "select * from macstudyaddress where siteId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);            
			resultSet = preparedStatement.executeQuery();
			while(resultSet.next()){
				secondMacStudyObject = new SecondMacStudyInfo();
				secondMacStudyObject.setNum(resultSet.getInt("num"));
				secondMacStudyObject.setVlan(resultSet.getInt("vlan"));
				secondMacStudyObject.setMacNum(resultSet.getInt("macnum"));				
				String []macs= resultSet.getString("macAddress").split("\\|");
				for(int i = 0; i< macs.length; i++)
				{
				secondMacStudyObject.getMacAddressList().add(macs[i]);
				}
				sql1 = "select number from port_inst where siteId =? and portId=?";
				preparedStatement1 = connection.prepareStatement(sql1);				
				preparedStatement1.setInt(1, siteId);  
				preparedStatement1.setInt(2, resultSet.getInt("portId")); 
				resultSet1 = preparedStatement1.executeQuery();
				while(resultSet1.next()){
					secondMacStudyObject.setPortId(resultSet1.getInt("number"));
				}				
				ssMacStudyList.add(secondMacStudyObject);
			}

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return ssMacStudyList;
	}
	
	public List<SsMacStudy> queryMacInfoByCondition(SsMacStudy info, Connection conn) throws Exception {
		if (info == null) {
			throw new Exception("SsMacStudy is null");
		}
		if (conn == null) {
			throw new Exception("conn is null");
		}
		StringBuffer sql = new StringBuffer();
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		SsMacStudy ssMacStudy = null;
		List<SsMacStudy> lists=null;
		
		try {
			lists=new ArrayList<SsMacStudy>();
			
			sql.append("select * from  macstudyaddress");
				sql.append(" where siteid = ?");
				sql.append(" and id = ?");
				
			preparedStatement = conn.prepareStatement(sql.toString());
			preparedStatement.setInt(1, info.getSiteId());
			preparedStatement.setInt(2, info.getId());
			
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				ssMacStudy = new SsMacStudy();
				ssMacStudy.setId(resultSet.getInt("id"));
				ssMacStudy.setSiteId(resultSet.getInt("siteid"));
				ssMacStudy.setNum(resultSet.getInt("num"));
				ssMacStudy.setPortId(resultSet.getInt("portId"));
				ssMacStudy.setMacCount(resultSet.getInt("macnum"));
				ssMacStudy.setVlan(resultSet.getInt("vlan"));
				ssMacStudy.setMacAddress(resultSet.getString("macaddress"));
				String []macs= resultSet.getString("macAddress").split("\\|");
				for(int i = 0; i< macs.length; i++)
				{
				ssMacStudy.getMacAddressList().add(macs[i]);
				}
				lists.add(ssMacStudy);

			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
			ssMacStudy = null;
		}

		return lists;
	}
	
	public List<Integer> queryVlan(int siteId,int portId, Connection connection) throws Exception
	{
		if (null == connection) 
		{
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
        List<Integer> idList = new ArrayList<Integer>();
		try {
			sql = "select vlan from macstudyaddress where siteId=? and portId=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			preparedStatement.setInt(2, portId);

			resultSet = preparedStatement.executeQuery();
			while(resultSet.next()){
				idList.add(resultSet.getInt("vlan"));
			}

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return idList;
	}
	
	/**
	 * function:根据网元Id删除数据
	 * @param connection 
	 * @throws Exception
	 */
	public void deleteBySiteId(int siteId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;

		try {
			sql = "delete from macstudyaddress where siteId=?";		
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);	
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
	}
	
	/**
	 * function:根据网元Id,portId查询port number
	 * @param connection 
	 * @throws Exception
	 */
	public int queryPortId(int siteId, int portId,Connection connection) throws Exception
	{
		if (null == connection) 
		{
			throw new Exception("connection is null");
		}
		String sql = null;
		int port = 0;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {			
				sql = "select portId from port_inst where siteId =? and number=?";
				preparedStatement = connection.prepareStatement(sql);				
				preparedStatement.setInt(1, siteId);  
				preparedStatement.setInt(2, portId); 
				resultSet = preparedStatement.executeQuery();
				while(resultSet.next()){
					port=resultSet.getInt("portId");
				}				
				
		

		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return port;
	}

}
