package com.nms.db.dao.perform;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import com.nms.db.bean.perform.PmValueLimiteInfo;
import com.nms.ui.manager.ExceptionManage;

public class PMValueLimiteDao
{
	/**
	 * 新增
	 * @param pmInfor
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int insert(PmValueLimiteInfo pmInfor, Connection connection)
			throws Exception
	{

		if (null == pmInfor)
		{
			throw new Exception("pmInfor is null");
		}

		if (null == connection)
		{
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try
		{
			sql = "insert into  PMLimit(HighTemp,CRCError,packetLose,tmsWorsen,tmsLose,receiveBadWrap,align,tmpWorsen,tmpLose,tmcWorsen,tmcLose,lowTemp,siteId)" 
				+" values(?,?,?,?,?,?,?,?,?,?,?,?,?)";
			
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, pmInfor.getHighTemp());
			preparedStatement.setInt(2, pmInfor.getCrcError());
			preparedStatement.setInt(3, pmInfor.getLossNum());
			preparedStatement.setInt(4, pmInfor.getTmsWorsen());
			preparedStatement.setInt(5, pmInfor.getTmsLose());
			preparedStatement.setInt(6, pmInfor.getReceiveBadWrap());
			preparedStatement.setInt(7, pmInfor.getAlign());
			preparedStatement.setInt(8, pmInfor.getTmpWorsen());
			preparedStatement.setInt(9, pmInfor.getTmpLose());
			preparedStatement.setInt(10, pmInfor.getTmcWorsen());
			preparedStatement.setInt(11, pmInfor.getTmcLose());
			preparedStatement.setInt(12, pmInfor.getLowTemp());
			preparedStatement.setInt(13, pmInfor.getSiteId());
			
			result = preparedStatement.executeUpdate();
		
		}
		catch (Exception e)
		{
			throw e;
		}
		finally
		{

			if (preparedStatement != null)
			{
				try
				{
					preparedStatement.close();
				}
				catch (Exception e)
				{
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}

			sql = null;
		}

		return result;
	}

	/**
	 * 条件查询
	 * @param pmValueLimiteInfo
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public PmValueLimiteInfo queryByCondition(PmValueLimiteInfo pmValueLimiteInfo,Connection connection) throws Exception
	{
		PmValueLimiteInfo pminfo = null;

		if (null == connection)
		{
			throw new Exception("connection is null");
		}

		String sql = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		try
		{
			sql = "select *  from PMLimit where 1=1 ";
			if(pmValueLimiteInfo.getId()>0){
				sql = sql+"and id = '"+pmValueLimiteInfo.getId()+"'";
			}
			if(pmValueLimiteInfo.getSiteId()>0){
				sql = sql+"and siteID = '"+pmValueLimiteInfo.getSiteId()+"'";
			}
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next())
			{
				pminfo = new PmValueLimiteInfo();
				pminfo.setId(resultSet.getInt("id"));
				pminfo.setHighTemp(resultSet.getInt("HighTemp"));
				pminfo.setCrcError(resultSet.getInt("CRCError"));
				pminfo.setLossNum(resultSet.getInt("packetLose"));
				pminfo.setTmsWorsen(resultSet.getInt("tmsWorsen"));
				pminfo.setTmsLose(resultSet.getInt("tmsLose"));
				pminfo.setReceiveBadWrap(resultSet.getInt("receiveBadWrap"));
				pminfo.setAlign(resultSet.getInt("align"));
				pminfo.setTmpWorsen(resultSet.getInt("tmpWorsen"));
				pminfo.setTmpLose(resultSet.getInt("tmpLose"));
				pminfo.setTmcWorsen(resultSet.getInt("tmcWorsen"));
				pminfo.setTmcLose(resultSet.getInt("tmcLose"));
				pminfo.setLowTemp(resultSet.getInt("lowTemp"));
				pminfo.setSiteId(resultSet.getInt("siteId"));
				pminfo.setEs(resultSet.getInt("es"));
				pminfo.setSES(resultSet.getInt("SES"));
				
				pminfo.setBBE(resultSet.getInt("BBE"));
				pminfo.setCSES(resultSet.getInt("CSES"));
				pminfo.setSFPLaserBias(resultSet.getInt("SFPLaserBias"));
				pminfo.setSFPTxPOW(resultSet.getInt("SFPTxPOW"));
		        pminfo.setSFPRxPOW(resultSet.getInt("SFPRxPOW"));
				pminfo.setSFPTemp(resultSet.getInt("SFPTemp"));
				pminfo.setSFPAlarmTemp(resultSet.getInt("SFPAlarmTemp"));
				pminfo.setFEES(resultSet.getInt("FEES"));
				pminfo.setFESES(resultSet.getInt("FESES"));
				pminfo.setFEUAS(resultSet.getInt("FEUAS"));
				pminfo.setFECSES(resultSet.getInt("FECSES"));
				pminfo.setCipReBandwidth(resultSet.getInt("cipReBandwidth"));
				pminfo.setCipReBandwidth(resultSet.getInt("cipSeBandwidth"));
				pminfo.setEthPackLosNear(resultSet.getInt("EthPackLosNear"));
				pminfo.setEthPackLosFar(resultSet.getInt("EthPackLosFar"));			
				pminfo.setEthPackDelayMs(resultSet.getInt("EthPackDelayMs"));		
				pminfo.setTmsRxCv(resultSet.getInt("TmsRxCv"));			
				pminfo.setTmsTxCv(resultSet.getInt("TmsTxCv"));		
				pminfo.setFeJOT2BadDatagram(resultSet.getInt("FeJOT2BadDatagram"));
				pminfo.setFeReBadPaPerecent(resultSet.getInt("FeReBadPaPerecent"));			
				pminfo.setFeSeBadPaPerecent(resultSet.getInt("FeSeBadPaPerecent"));		
				pminfo.setSendLong(resultSet.getInt("SendLong"));			
				pminfo.setFeRxRatio(resultSet.getInt("FeRxRatio"));	
				pminfo.setRxAlErr(resultSet.getInt("RxAlErr"));
				pminfo.setRxErr(resultSet.getInt("RxErr"));			
				pminfo.setTxErr(resultSet.getInt("TxErr"));		
				pminfo.setRxLost(resultSet.getInt("RxLost"));			
				pminfo.setRxErrAir(resultSet.getInt("RxErrAir"));	
				pminfo.setRxErrKb(resultSet.getInt("RxErrKb"));
				pminfo.setTxErrKb(resultSet.getInt("TxErrKb"));			
				pminfo.setRxJabber(resultSet.getInt("RxJabber"));		
				pminfo.setTxJabber(resultSet.getInt("TxJabber"));			
				pminfo.setGeJOT2BadDatagram(resultSet.getInt("GeJOT2BadDatagram"));
				pminfo.setGeReBadPaPerecent(resultSet.getInt("GeReBadPaPerecent"));	
				pminfo.setGeSeBadPaPerecent(resultSet.getInt("GeSeBadPaPerecent"));
				pminfo.setGeSendLong(resultSet.getInt("GeSendLong"));			
				pminfo.setGeRxRatio(resultSet.getInt("GeRxRatio"));		
				pminfo.setGeRxAlErr(resultSet.getInt("GeRxAlErr"));			
				pminfo.setGeRxErr(resultSet.getInt("GeRxErr"));
				pminfo.setGeTxErr(resultSet.getInt("GeTxErr"));
				pminfo.setGeRxLost(resultSet.getInt("GeRxLost"));	
				pminfo.setGeRxErrAir(resultSet.getInt("GeRxErrAir"));
				pminfo.setGeRxErrKb(resultSet.getInt("GeRxErrKb"));			
				pminfo.setGeTxErrKb(resultSet.getInt("GeTxErrKb"));		
				pminfo.setGeRxJabber(resultSet.getInt("GeRxJabber"));			
				pminfo.setGeTxJabber(resultSet.getInt("GeTxJabber"));
	
			}

		}
		catch (Exception e)
		{
			throw e;
		}
		finally
		{
			if (resultSet != null)
			{
				try
				{
					resultSet.close();
				}
				catch (Exception e)
				{
					ExceptionManage.dispose(e,this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null)
			{
				try
				{
					preparedStatement.close();
				}
				catch (Exception e)
				{
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return pminfo;
	}
	
	
	/**
	 * 修改
	 * @param pmInfor
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int update(PmValueLimiteInfo pmInfor, Connection connection)
			throws Exception
	{

		if (null == pmInfor)
		{
			throw new Exception("pmInfor is null");
		}

		if (null == connection)
		{
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		int result = 0;

		try
		{
			sql = "update PMLimit set HighTemp=?,CRCError=?,packetLose=?,tmsWorsen=?,tmsLose=?,receiveBadWrap=?,align=? ,tmpWorsen=?,tmpLose=?,tmcWorsen=?,tmcLose=?,lowTemp=?"+
			" where siteId = ?";
					
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, pmInfor.getHighTemp());
			preparedStatement.setInt(2, pmInfor.getCrcError());
			preparedStatement.setInt(3, pmInfor.getLossNum());
			preparedStatement.setInt(4, pmInfor.getTmsWorsen());
			preparedStatement.setInt(5, pmInfor.getTmsLose());
			preparedStatement.setInt(6, pmInfor.getReceiveBadWrap());
			preparedStatement.setInt(7, pmInfor.getAlign());
			preparedStatement.setInt(8, pmInfor.getTmpWorsen());
			preparedStatement.setInt(9, pmInfor.getTmpLose());
			preparedStatement.setInt(10, pmInfor.getTmcWorsen());
			preparedStatement.setInt(11, pmInfor.getTmcLose());
			preparedStatement.setInt(12, pmInfor.getLowTemp());
			preparedStatement.setInt(13, pmInfor.getSiteId());
			
			result = preparedStatement.executeUpdate();

		}
		catch (Exception e)
		{
			ExceptionManage.dispose(e,this.getClass());
		}
		finally
		{

			if (preparedStatement != null)
			{
				try
				{
					preparedStatement.close();
				}
				catch (Exception e)
				{
					ExceptionManage.dispose(e,this.getClass());
				}
				preparedStatement = null;
			}

			sql = null;
		}

		return result;
	}
}
