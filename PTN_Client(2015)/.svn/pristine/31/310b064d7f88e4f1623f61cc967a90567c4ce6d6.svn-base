package com.nms.model.equipment.port;

import java.sql.Connection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.nms.db.bean.equipment.port.PortAttr;
import com.nms.db.dao.equipment.port.PortAttrDao;
import com.nms.model.util.ObjectService;
import com.nms.ui.manager.ExceptionManage;

public class PortAttrService extends ObjectService {

	public void setConnection(Connection connection) {
		super.connection = connection;
	}

	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}

	private PortAttrDao portAttrDao = new PortAttrDao();

	/**
	 * 新增或修改portAttr对象，通过portAttr.getId()来判断是修改还是新增
	 * 
	 * @param portAttr
	 *            bean
	 * @return 执行成功的记录数
	 * @throws Exception
	 */
	public int saveOrUpdate(PortAttr portAttr) throws Exception {

		if (portAttr == null) {
			throw new Exception("portAttr is null");
		}

		int result = 0;
		try {

			if (portAttr.getId() == 0) {
				result = this.portAttrDao.insert(portAttr, connection);
			} else {
				result = this.portAttrDao.update(portAttr, connection);
			}

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return result;
	}

	/**
	 * 通过主键删除portAttr对象
	 * 
	 * @param id
	 *            主键
	 * @return 删除的记录数
	 * @throws Exception
	 */
	public int delete(int id) throws Exception {

		int result = 0;

		try {
			result = portAttrDao.delete(id, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return result;

	}

	/**
	 * 通过portId删除portAttr对象
	 * 
	 * @param portId
	 * @return
	 * @throws Exception
	 */
	public int deleteByPortId(int portId, int udaGroupId) throws Exception {
		int result = 0;

		try {
			result = portAttrDao.deleteByPortId(portId, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return result;
	}

	/**
	 * 批量删除
	 * 
	 * @param portIdList
	 *            端口ID集合
	 * @param udaGroupId
	 *            uda组ID
	 * @throws Exception
	 */
	public void deleteByPortIdBatch(List<Integer> portIdList, int udaGroupId) throws Exception {
		if (portIdList == null) {
			throw new Exception("portIdList is null");
		}
		try {
			connection.setAutoCommit(false);
			for (int portId : portIdList) {
				this.deleteByPortId(portId, udaGroupId);
			}
			if(!connection.getAutoCommit()){
				connection.commit();
			}
		} catch (Exception e) {
			connection.rollback();
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			connection.setAutoCommit(true);
		}
	}

	/**
	 * 查询全部portattr
	 * 
	 * @return portattr集合
	 * @throws Exception
	 */
	public List<PortAttr> select() throws Exception {
		List<PortAttr> portAttrList = null;

		try {
			PortAttr portAttr = new PortAttr();
			portAttrList = portAttrDao.queryByCondition(portAttr, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return portAttrList;
	}

	/**
	 * 根据条件查询portattr
	 * 
	 * @param portAttrCondition
	 *            查询条件
	 * @return portattr集合
	 * @throws Exception
	 */
	public List<PortAttr> select(PortAttr portattr) throws Exception {
		List<PortAttr> portAttrList = null;

		try {
			portAttrList = portAttrDao.queryByCondition(portattr, connection);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return portAttrList;
	}

	/**
	 * 根据条件查询portattr
	 * 
	 * @param portAttrCondition
	 *            查询条件
	 * @return portattr集合
	 * @throws Exception
	 */
	public Map<Integer, PortAttr> selectForMap(PortAttr portattr) throws Exception {
		Map<Integer, PortAttr> map = null;
		List<PortAttr> portAttrList = null;
		try {
			map = new HashMap<Integer, PortAttr>();
			portAttrList = portAttrDao.queryByCondition(portattr, connection);

			for (PortAttr pa : portAttrList) {
				// map.put(pa.getAttrId(), pa);
			}

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		} finally {
			portAttrList = null;
		}
		return map;
	}

	/**
	 * 根据端口ID查询对象
	 * 
	 * @author kk
	 * 
	 * @param
	 * 
	 * @return
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	public PortAttr select_portId(int portId) throws Exception {
		List<PortAttr> portAttrList = null;
		PortAttr portAttr = null;
		try {
			portAttr = new PortAttr();
			portAttr.setPortId(portId);
			portAttrList = this.portAttrDao.queryByCondition(portAttr, connection);

			if (null != portAttrList && portAttrList.size() == 1) {
				portAttr = portAttrList.get(0);
			} else {
				portAttr = new PortAttr();
			}

		} catch (Exception e) {
			throw e;
		}
		return portAttr;
	}

	public static void main(String[] args) {
	}
}
