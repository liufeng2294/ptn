package com.nms.model.ptn.path.ces;

import java.util.ArrayList;
import java.util.List;

import org.apache.ibatis.session.SqlSession;

import com.nms.db.bean.equipment.port.PortInst;
import com.nms.db.bean.equipment.port.PortStmTimeslot;
import com.nms.db.bean.ptn.path.ces.CesInfo;
import com.nms.db.dao.ptn.path.ces.CesInfoMapper;
import com.nms.db.enums.ECesType;
import com.nms.model.equipment.port.PortService_MB;
import com.nms.model.equipment.port.PortStmTimeslotService_MB;
import com.nms.model.util.ObjectService_Mybatis;
import com.nms.model.util.Services;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.ExceptionManage;

public class CesInfoService_MB extends ObjectService_Mybatis{
	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}

	public void setSqlSession(SqlSession sqlSession) {
		super.sqlSession = sqlSession;
	}
	private CesInfoMapper cesInfoMapper;
	
	public CesInfoMapper getCesInfoMapper() {
		return cesInfoMapper;
	}

	public void setCesInfoMapper(CesInfoMapper cesInfoMapper) {
		this.cesInfoMapper = cesInfoMapper;
	}
	
	/**
	 * 过滤查询，ces列表页面用
	 * @param cesInfo 过滤条件
	 * @return
	 * @throws Exception
	 */
	public List<CesInfo> filterSelect(CesInfo cesInfo) throws Exception{
		return this.cesInfoMapper.filterQuery(cesInfo);
	}
	
	/**
	 * 查询单网元下的ces
	 * 
	 * @param siteId
	 * @return
	 * @throws Exception
	 */
	public List<CesInfo> selectNodeBySite(int siteId) throws Exception {
		List<CesInfo> cesinfos = null;
		try {
			cesinfos = this.cesInfoMapper.queryNodeBySite(siteId);

			for (CesInfo cesInfo : cesinfos) {
				cesInfo.setNode(true);
			}

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}

		return cesinfos;
	}

	public List<CesInfo> filterSingle(CesInfo cesInfo, int siteId) throws Exception{
		return this.cesInfoMapper.filterSingle(cesInfo, siteId);
	}
	
	
	public CesInfo selectByid(CesInfo cesInfo) throws Exception {
		CesInfo cesInfo2 = null;
		List<CesInfo> cesInfoList = null;
		try {
			cesInfoList = new ArrayList<CesInfo>();
			cesInfo2 =new CesInfo();
			cesInfoList = this.cesInfoMapper.queryByIdCondition(cesInfo);
			if(cesInfoList!=null && cesInfoList.size()>0){
				cesInfo2=cesInfoList.get(0);
			}
			
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return cesInfo2;
	}
	
	public void doSearch(List<CesInfo> cesInfos) throws Exception{
		List<Integer> integers = new ArrayList<Integer>();
		for (CesInfo cesInfo : cesInfos) {
			integers.add(cesInfo.getId());
		}
		String name = "ces_"+System.currentTimeMillis();
		int s1Id = cesInfos.get(0).getId();
		int s2Id = cesInfos.get(1).getId();
		this.cesInfoMapper.doSearche_insert(name,s1Id,s2Id);
		this.cesInfoMapper.deleteByIds(integers);
		sqlSession.commit();
	}
	
	
	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public List<CesInfo> select() throws Exception {
		List<CesInfo> cesInfoList = null;
		try {
			cesInfoList = new ArrayList<CesInfo>();
			cesInfoList = this.cesInfoMapper.queryByCondition(new CesInfo());
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return cesInfoList;
	}
	
	/**
	 * 获取ces所用到端口名称 显示用
	 * 
	 * @param cesInfo
	 *            ces业务对象
	 * @param type
	 *            表示A或Z端
	 * @return
	 * @throws Exception
	 */
	public String getCesPortName(CesInfo cesInfo, String type) throws Exception {

		int portid = 0;
		String type_port = null;
		PortService_MB portService = null;
		PortInst portinst = null;
		List<PortInst> portInstList = null;
		PortStmTimeslotService_MB portStmTimeslotService = null;
		PortStmTimeslot portStmTimeslot = null;
		String result = null;
		try {

			if ("a".equals(type)) {
				if (cesInfo.getCestype() == ECesType.PDH.getValue() || cesInfo.getCestype() == ECesType.PDHSDH.getValue()) {
					type_port = "pdh";
				} else {
					type_port = "sdh";
				}
				portid = cesInfo.getaAcId();
			} else {
				if (cesInfo.getCestype() == ECesType.PDH.getValue() || cesInfo.getCestype() == ECesType.SDHPDH.getValue()) {
					type_port = "pdh";
				} else {
					type_port = "sdh";
				}
				portid = cesInfo.getzAcId();
			}

			if ("pdh".equals(type_port)) {
				portService = (PortService_MB) ConstantUtil.serviceFactory.newService_MB(Services.PORT, this.sqlSession);
				portinst = new PortInst();
				portinst.setPortId(portid);
				portInstList = new ArrayList<PortInst>();
				portInstList = portService.select(portinst);

				if (null != portInstList && portInstList.size() == 1) {
					result = portInstList.get(0).getPortName();
				} else {
					result = "";
				}
			} else {
				portStmTimeslotService = (PortStmTimeslotService_MB) ConstantUtil.serviceFactory.newService_MB(Services.PORTSTMTIMESLOT, this.sqlSession);
				portStmTimeslot =new PortStmTimeslot();
				portStmTimeslot = portStmTimeslotService.selectById(portid);

				if (null != portStmTimeslot) {
					result = portStmTimeslot.getTimeslotnumber();
				} else {
					result = "";
				}
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			type_port = null;
			portinst = null;
			portInstList = null;
			portStmTimeslot = null;
		}
		return result;
	}
	
	/**
	 * 验证名字是否重复
	 * 
	 * @author kk
	 * 
	 * @param afterName
	 *            修改之后的名字
	 * @param beforeName
	 *            修改之前的名字
	 * 
	 * @return
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	public boolean nameRepetition(String afterName, String beforeName,int siteId) throws Exception {

		int result = this.cesInfoMapper.query_name(afterName, beforeName, siteId);
		if (0 == result) {
			return false;
		} else {
			return true;
		}

	}
	
}
