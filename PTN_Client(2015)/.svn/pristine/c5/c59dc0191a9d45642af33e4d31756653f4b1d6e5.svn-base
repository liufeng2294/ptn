package com.nms.model.ptn.path.pw;

import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.SqlSession;

import com.nms.db.bean.ptn.oam.OamInfo;
import com.nms.db.bean.ptn.oam.OamMepInfo;
import com.nms.db.bean.ptn.oam.OamMipInfo;
import com.nms.db.bean.ptn.path.pw.MsPwInfo;
import com.nms.db.bean.ptn.path.pw.PwInfo;
import com.nms.db.bean.ptn.path.pw.PwNniInfo;
import com.nms.db.bean.ptn.path.tunnel.Tunnel;
import com.nms.db.dao.ptn.path.pw.MsPwInfoMapper;
import com.nms.db.dao.ptn.path.pw.PwInfoMapper;
import com.nms.db.dao.ptn.path.pw.PwNniInfoMapper;
import com.nms.db.dao.ptn.path.tunnel.TunnelMapper;
import com.nms.db.enums.EPwType;
import com.nms.db.enums.EServiceType;
import com.nms.model.ptn.oam.OamInfoService_MB;
import com.nms.model.ptn.path.tunnel.TunnelService_MB;
import com.nms.model.ptn.qos.QosInfoService_MB;
import com.nms.model.util.ObjectService_Mybatis;
import com.nms.model.util.Services;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.DateUtil;
import com.nms.ui.manager.ExceptionManage;

public class PwInfoService_MB extends ObjectService_Mybatis{
	public void setPtnuser(String ptnuser) {
		super.ptnuser = ptnuser;
	}

	public void setSqlSession(SqlSession sqlSession) {
		super.sqlSession = sqlSession;
	}
	
	private PwInfoMapper mapper;

	public PwInfoMapper getPwInfoMapper() {
		return mapper;
	}

	public void setPwInfoMapper(PwInfoMapper PwInfoMapper) {
		this.mapper = PwInfoMapper;
	}

	public PwInfo selectByPwId(int pwId) throws Exception {
		PwInfo pwInfo = null;
		try {
			pwInfo = new PwInfo();
			pwInfo.setPwId(pwId);
			List<PwInfo> pwInfoList = this.select(pwInfo);
			if (null != pwInfoList && pwInfoList.size() == 1) {
				pwInfo = pwInfoList.get(0);
			} else {
				throw new Exception("查询pw出错");
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return pwInfo;
	}
	
	public List<PwInfo> select(PwInfo pwinfoConditin) throws Exception {
		List<PwInfo> pwinfoList = null;
		PwNniInfo pwNniInfo = null;
		List<PwNniInfo> infos = null;
		MsPwInfo mspwinfoCondition = null;
		List<Tunnel> tunnels = null;
		List<PwInfo> pwInfoList1 = null;
		List<PwInfo> pwInfoList2 = null;
		try {
			pwinfoList = new ArrayList<PwInfo>();
			if(pwinfoConditin != null && pwinfoConditin.getType() != null){
				pwinfoConditin.setType_db(pwinfoConditin.getType().getValue());
			}
			pwInfoList1 = this.mapper.queryByCondition(pwinfoConditin);
			if(pwInfoList1 != null && pwInfoList1.size() > 0){
				for (PwInfo pwInfo : pwInfoList1) {
					pwInfo.setCreateTime(DateUtil.strDate(pwInfo.getCreateTime(), DateUtil.FULLTIME));
					pwInfo.setType(EPwType.forms(pwInfo.getType_db()));
				}
			}
			MsPwInfoMapper msPwMapper = this.sqlSession.getMapper(MsPwInfoMapper.class);
			//先通过端口号查tunnel，再通过tunnel查pw，然后过滤pw
			if(pwinfoConditin.getPortId() > 0)
			{
				TunnelMapper tunnelMapper = this.sqlSession.getMapper(TunnelMapper.class);
				tunnels = tunnelMapper.queryByportId(pwinfoConditin.getPortId());
				if(tunnels.size()>0)
				{
					List<Integer> tunnelIds = new ArrayList<Integer>();
					for(Tunnel tunnel:tunnels)
					{
						tunnelIds.add(tunnel.getTunnelId());
					}
					pwInfoList2 = this.mapper.queryByPwTunnelIdCondition(tunnelIds);
					for(PwInfo pw1 : pwInfoList1)
					{
						for(PwInfo pw2 : pwInfoList2)
						{
							if(pw2.getPwId() == pw1.getPwId())
							{
								pwinfoList.add(pw1);
							}
						}
					}
				}
			}
			else
			{
				pwinfoList.addAll(pwInfoList1);
			}
			PwNniInfoMapper pwNniMapper = this.sqlSession.getMapper(PwNniInfoMapper.class);
			for (PwInfo pwInfo : pwinfoList) {// 封装对应的pwnniInfo
				mspwinfoCondition = new MsPwInfo();
				mspwinfoCondition.setPwId(pwInfo.getPwId());
				pwNniInfo = new PwNniInfo();
				pwNniInfo.setPwId(pwInfo.getPwId());
				infos = pwNniMapper.queryByCondition(pwNniInfo);
				for (PwNniInfo info : infos) {
					if (info.getSiteId() == pwInfo.getASiteId() && pwInfo.getApwServiceId() != 0) {
						pwInfo.setaPwNniInfo(info);
					}
					if (info.getSiteId() == pwInfo.getZSiteId() && pwInfo.getZpwServiceId() != 0) {
						pwInfo.setzPwNniInfo(info);
					}
				}
				pwInfo.setMsPwInfos(msPwMapper.queryByCondition(mspwinfoCondition));
			}
			this.getOAMandQoSforPw(pwinfoList);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return pwinfoList;
	}
	
	private void getOAMandQoSforPw(List<PwInfo> pwList) {
		OamInfoService_MB oamInfoService = null;
		QosInfoService_MB qosInfoService = null;
		OamInfo oamInfo = null;
		OamMepInfo oamMepInfo = null;
		OamMipInfo oamMipInfo = null;
		PwNniInfo pwNniInfo = null;
		List<PwNniInfo> pwNniInfoList = null;
		try {
			qosInfoService = (QosInfoService_MB) ConstantUtil.serviceFactory.newService_MB(Services.QosInfo, this.sqlSession);
			oamInfoService = (OamInfoService_MB) ConstantUtil.serviceFactory.newService_MB(Services.OamInfo, this.sqlSession);
			for (PwInfo pw : pwList) {
				oamInfo = new OamInfo();
				oamMepInfo = new OamMepInfo();
				oamMepInfo.setServiceId(pw.getPwId());
				oamMepInfo.setObjType("PW");
				oamInfo.setOamMep(oamMepInfo);
				oamMipInfo = new OamMipInfo();
				oamMipInfo.setServiceId(pw.getPwId());
				oamMipInfo.setObjType("PW");
				oamInfo.setOamMip(oamMipInfo);
				pw.setOamList(oamInfoService.queryByServiceId(oamInfo));
				// 查询qos
				pw.setQosList(qosInfoService.getQosByObj(EServiceType.PW.toString(), pw.getPwId()));
				//查询pw的vlan信息
				PwNniInfoMapper pwNniMapper = this.sqlSession.getMapper(PwNniInfoMapper.class);
				//查询此pw下的所有vlan信息
				pwNniInfo = new PwNniInfo();
				pwNniInfo.setPwId(pw.getPwId());
				pwNniInfoList = pwNniMapper.queryByCondition(pwNniInfo);
				//因为pw只有az两端  所以pwvlan信息最多又两个记录
				if( null != pwNniInfo && pwNniInfoList.size()>0 && pwNniInfoList.size()<2){
					for(PwNniInfo pwNniInfo_select : pwNniInfoList){
						if(pwNniInfo_select.getSiteId()==pw.getASiteId()){
							pw.setaPwNniInfo(pwNniInfo_select);
							continue;
						}
						if(pwNniInfo_select.getSiteId()==pw.getZSiteId()){
							pw.setzPwNniInfo(pwNniInfo_select);
							continue;
						}
					}
				}
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
	}

	public Object selectFilter(PwInfo filterPwInfo) {
		List<PwInfo> pwInfos = new ArrayList<PwInfo>();
		List<PwInfo> infos = null;
		Map<Integer,Tunnel> integers = null;
		TunnelService_MB tunnelService = null;
		PwNniInfo pwNniInfo = null;
		List<PwNniInfo> pwNniInfos = null;
		try {
			if(filterPwInfo != null && filterPwInfo.getType() != null){
				filterPwInfo.setType_db(filterPwInfo.getType().getValue());
			}
			infos = this.mapper.queryFilte(filterPwInfo);
			List<PwInfo> pwList = new ArrayList<PwInfo>();
			if(infos != null && !infos.isEmpty()){
				for (PwInfo pwInfo : infos) {
					pwInfo.setCreateTime(DateUtil.strDate(pwInfo.getCreateTime(), DateUtil.FULLTIME));
					pwInfo.setType(EPwType.forms(pwInfo.getType_db()));
					if(filterPwInfo.getIsSingle() == pwInfo.getIsSingle()){
						pwList.add(pwInfo);
					}
				}
				infos.clear();
				infos.addAll(pwList);
			}
			tunnelService = (TunnelService_MB) ConstantUtil.serviceFactory.newService_MB(Services.Tunnel, this.sqlSession);
			//根据端口查询所有tunnel
			if(filterPwInfo.getPortId()>0){
				List<Tunnel> tunnels = tunnelService.selectByPortIdAndSiteId(filterPwInfo.getASiteId(), filterPwInfo.getPortId());
				integers = new HashMap<Integer,Tunnel>();
				for(Tunnel tunnel :tunnels){
					integers.put(tunnel.getTunnelId(), tunnel);
				}
			}
			//根据tunnelid过滤
			if(filterPwInfo.getTunnelId()>0){
				if(integers == null){
					for(PwInfo pwInfo : infos){
						if(pwInfo.getTunnelId() == filterPwInfo.getTunnelId()){
							pwInfos.add(pwInfo);
						}	
					}
				}else{
					Tunnel tunnel = integers.get(filterPwInfo.getTunnelId());
					if(tunnel != null){
						for(PwInfo pwInfo : infos){
							if(pwInfo.getTunnelId() == tunnel.getTunnelId()){
								pwInfos.add(pwInfo);
							}	
						}
					}else{
						return pwInfos;
					}
				}
			}else{
				if(integers != null){
					for(PwInfo pwInfo : infos){
						if(integers.get(pwInfo.getTunnelId()) != null){
							pwInfos.add(pwInfo);
						}	
					}
				}else{
					pwInfos = infos;
				}
			}
			PwNniInfoMapper pwNniMapper = this.sqlSession.getMapper(PwNniInfoMapper.class);
			for (PwInfo pwInfo : pwInfos) {// 封装对应的pwnniInfo
				pwNniInfo = new PwNniInfo();
				pwNniInfo.setPwId(pwInfo.getPwId());
				pwNniInfos = pwNniMapper.queryByCondition(pwNniInfo);
				for (PwNniInfo info : pwNniInfos) {
					if (info.getSiteId() == pwInfo.getASiteId() && pwInfo.getApwServiceId() != 0) {
						pwInfo.setaPwNniInfo(info);
					}
					if (info.getSiteId() == pwInfo.getZSiteId() && pwInfo.getZpwServiceId() != 0) {
						pwInfo.setzPwNniInfo(info);
					}
				}
			}
			this.getOAMandQoSforPw(pwInfos);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}
		return pwInfos;
	}

	/**
	 * 通过主键查询pw对象
	 * 只提供给多段PW来查询
	 * lable = 1 查询单站 否则查询所有
	 * @param pwId
	 * @return
	 * @throws Exception
	 */ 
	public PwInfo selectByPwIdForMulti(int pwId,int lable) throws Exception {
		List<PwInfo> pwInfoList = null;
		PwInfo pwInfo = null;
		try {
			pwInfo = new PwInfo();
			pwInfo.setPwId(pwId);
			pwInfo.setIsSingle(lable);
			pwInfoList = this.mapper.selectByPWId(pwInfo);   //selectByPWId
			if (null != pwInfoList && pwInfoList.size() == 1) {
				pwInfo = pwInfoList.get(0);
			} else {
				throw new Exception("查询pw出错");
			}
			pwInfo.setCreateTime(DateUtil.strDate(pwInfo.getCreateTime(), DateUtil.FULLTIME));
			pwInfo.setType(EPwType.forms(pwInfo.getType_db()));
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			pwInfoList = null;
		}
		return pwInfo;
	}

	public List<PwInfo> selectBySiteId_network(int siteId) {
		List<PwInfo> pwlList = null;
		try {
			PwInfo condition = new PwInfo();
			condition.setASiteId(siteId);
			condition.setIsSingle(0);
			pwlList = this.mapper.queryPwBySiteIdAndIsSingle(condition);
			if(pwlList != null && pwlList.size() > 0){
				for (PwInfo pwInfo : pwlList) {
					pwInfo.setCreateTime(DateUtil.strDate(pwInfo.getCreateTime(), DateUtil.FULLTIME));
					pwInfo.setType(EPwType.forms(pwInfo.getType_db()));
				}
			}
			this.getOAMandQoSforPw(pwlList);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return pwlList;
	}

	public PwInfo selectBypwid_notjoin(PwInfo pwinfo) {
		PwInfo pwInfo = null;
		List<PwInfo> pwInfoList = null;
		PwNniInfo pwNniInfo = null;
		List<PwNniInfo> infos = null;
		MsPwInfo mspwinfoCondition = null;
		try {
			PwNniInfoMapper pwNniMapper = this.sqlSession.getMapper(PwNniInfoMapper.class);
			pwInfo = this.mapper.queryByPwidCondition_notjoin(pwinfo);
			pwInfoList = new ArrayList<PwInfo>();
			pwInfoList.add(pwInfo);
			MsPwInfoMapper msPwMapper = this.sqlSession.getMapper(MsPwInfoMapper.class);
			for (PwInfo pwInfo2 : pwInfoList) {// 封装对应的pwnniInfo
				pwNniInfo = new PwNniInfo();
				pwNniInfo.setPwId(pwInfo.getPwId());
				mspwinfoCondition = new MsPwInfo();
				mspwinfoCondition.setPwId(pwInfo.getPwId());
				infos = pwNniMapper.queryByCondition(pwNniInfo);
				for (PwNniInfo info : infos) {
					if (info.getSiteId() == pwInfo2.getASiteId() && pwInfo2.getApwServiceId() != 0) {
						pwInfo.setaPwNniInfo(info);
					}
					if (info.getSiteId() == pwInfo2.getZSiteId() && pwInfo2.getZpwServiceId() != 0) {
						pwInfo.setzPwNniInfo(info);
					}
				}
				pwInfo.setMsPwInfos(msPwMapper.queryByCondition(mspwinfoCondition));
			}
			this.getOAMandQoSforPw(pwInfoList);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return pwInfo;
	}

	public List<PwInfo> findPwByPWIds(List<Integer> pwIdList) throws ParseException {
		List<PwInfo> pwList = this.mapper.findPwByIds(pwIdList);
		if(pwList != null && pwList.size() > 0){
			for (PwInfo pwInfo : pwList) {
				pwInfo.setCreateTime(DateUtil.strDate(pwInfo.getCreateTime(), DateUtil.FULLTIME));
				pwInfo.setType(EPwType.forms(pwInfo.getType_db()));
			}
		}
		return pwList;
	}

	public List<PwInfo> selectPwInfoByTunnelId(List<Integer> tunnelIds) {
		List<PwInfo> pwList = null;
		try {
			pwList = this.mapper.queryByPwTunnelIdCondition(tunnelIds);
			this.getOAMandQoSforPw(pwList);
		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return pwList;
	}

	/**
	 * 查询单网元下的pw
	 * @param siteId
	 * @return
	 * @throws Exception
	 */
	public List<PwInfo> selectNodeBySiteid(int siteId) {
		List<PwInfo> pwInfoList = null;
		List<PwInfo> pwInfoList_result = null;
		PwNniInfo pwNniInfo = null;
		List<PwNniInfo> infos = null;
		PwInfo pwinfoSel = new PwInfo();
		try {
			PwNniInfoMapper pwNniMapper = this.sqlSession.getMapper(PwNniInfoMapper.class);
			MsPwInfoMapper msPwMapper = this.sqlSession.getMapper(MsPwInfoMapper.class);
			pwinfoSel.setASiteId(siteId);
			pwinfoSel.setZSiteId(siteId);
			pwInfoList_result = new ArrayList<PwInfo>();
			if(pwinfoSel != null && pwinfoSel.getType() != null){
				pwinfoSel.setType_db(pwinfoSel.getType().getValue());
			}
			pwInfoList = this.mapper.queryNode(pwinfoSel);
			for (PwInfo pwinfo : pwInfoList) {
				pwinfo.setType(EPwType.forms(pwinfo.getType_db()));
				pwinfo.setNode(true);
				if (pwinfo.getIsSingle() == 1) {
					if (pwinfo.getASiteId() == siteId && pwinfo.getApwServiceId() != 0) {
						pwInfoList_result.add(pwinfo);
					} else if (pwinfo.getZSiteId() == siteId && pwinfo.getZpwServiceId() != 0) {
						pwInfoList_result.add(pwinfo);
					}
				} else {
					pwInfoList_result.add(pwinfo);
				}
			}
			for (PwInfo pwInfo : pwInfoList_result) {// 封装对应的pwnniInfo
				pwNniInfo = new PwNniInfo();
				pwNniInfo.setPwId(pwInfo.getPwId());
				infos = pwNniMapper.queryByCondition(pwNniInfo);
				MsPwInfo mspwinfoCondition = new MsPwInfo();
				mspwinfoCondition.setPwId(pwInfo.getPwId());
				for (PwNniInfo info : infos) {
					if (info.getSiteId() == pwInfo.getASiteId() && pwInfo.getApwServiceId() != 0) {
						pwInfo.setaPwNniInfo(info);
					}
					if (info.getSiteId() == pwInfo.getZSiteId() && pwInfo.getZpwServiceId() != 0) {
						pwInfo.setzPwNniInfo(info);
					}
				}
				
				pwInfo.setMsPwInfos(msPwMapper.queryByCondition(mspwinfoCondition));
			}
			
			getOAMandQoSforPw(pwInfoList);

		} catch (Exception e) {
			ExceptionManage.dispose(e,this.getClass());
		}
		return pwInfoList_result;
	}

	/**
	 * 搜索pw
	 * @param pwList
	 * @param mapMspwInfo
	 * @throws SQLException 
	 */
	public void doSearch(List<PwInfo> pwList, Map<Integer,List<MsPwInfo>> mapMspwInfo) throws SQLException {
		int newPwId = 0;
		String newPwName = "pw_" + System.currentTimeMillis();
		try {
			this.sqlSession.getConnection().setAutoCommit(true);
			List<Integer> pwIdList = new ArrayList<Integer>();
			for (PwInfo pw : pwList) {
				pwIdList.add(pw.getPwId());
			}
			Map<String, Object> conditionMap = new HashMap<String, Object>();
			conditionMap.put("newPwId", newPwId);
			conditionMap.put("pwIdList", pwIdList);
			newPwId = this.mapper.doSearch(newPwName, pwList.get(0).getPwId(), pwList.get(pwList.size()-1).getPwId());
			//更新业务
			this.mapper.updateServiceByPwId(conditionMap);
			//更新pwnnibuffer关联表
			this.mapper.updatePwBuffByPwId(conditionMap);
			// 更新qos关联表
			this.mapper.updateQosRelevanceByPwId(conditionMap);
			// 更新oam表
			this.mapper.updateOamMepByPwId(conditionMap);
			//更新告警
			this.mapper.updateCurrAlarmByPwId(conditionMap);
			this.mapper.updateHisAlarmByPwId(conditionMap);
			//更新性能
			this.mapper.updatePerformanceByPwId(conditionMap);
			// 删除刚才建立双边数据所用的单边数据
			this.mapper.deleteByPwIdList(pwIdList);
			this.sqlSession.getConnection().setAutoCommit(false);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}
	}
}
