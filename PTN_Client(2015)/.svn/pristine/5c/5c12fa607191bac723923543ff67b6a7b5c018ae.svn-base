package com.nms.ui.ptn.alarm.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.nms.db.bean.equipment.port.PortInst;
import com.nms.db.bean.path.Segment;
import com.nms.db.bean.ptn.path.ces.CesInfo;
import com.nms.db.bean.ptn.path.eth.ElanInfo;
import com.nms.db.bean.ptn.path.eth.ElineInfo;
import com.nms.db.bean.ptn.path.eth.EtreeInfo;
import com.nms.db.bean.ptn.path.pw.PwInfo;
import com.nms.db.bean.ptn.path.tunnel.Tunnel;
import com.nms.model.equipment.port.PortService;
import com.nms.model.path.SegmentService;
import com.nms.model.ptn.path.ces.CesInfoService;
import com.nms.model.ptn.path.eth.ElanInfoService;
import com.nms.model.ptn.path.eth.ElineService;
import com.nms.model.ptn.path.eth.EtreeService;
import com.nms.model.ptn.path.pw.PwInfoService;
import com.nms.model.ptn.path.tunnel.TunnelService;
import com.nms.model.util.Services;
import com.nms.ui.frame.ViewDataTable;
import com.nms.ui.manager.ConstantUtil;
import com.nms.ui.manager.ExceptionManage;
import com.nms.ui.manager.UiUtil;
import com.nms.db.bean.alarm.CurrentAlarmInfo;


public class AlarmAnalyse
{
	private CurrentAlarmInfo currentAlarmInfo;
	@SuppressWarnings("rawtypes")
	private ViewDataTable mainView;
	@SuppressWarnings("rawtypes")
	private ViewDataTable relatedView;
	private final List<Integer> pwIdList = new ArrayList<Integer>();
	private final List<ElineInfo> Elines = new ArrayList<ElineInfo>();
	List<PortInst> portlist = new ArrayList<PortInst>();
	
	@SuppressWarnings("rawtypes")
	public AlarmAnalyse(CurrentAlarmInfo currentAlarmInfo, ViewDataTable mainView, ViewDataTable relatedView )
	{
		setCurrentAlarmInfo(currentAlarmInfo);
		setView(mainView);
		setRelatedView(relatedView);
	}
	
	//根据告警的类型来区分该显示哪些业务
	public void show()
	{
		clearData();
		String type = currentAlarmInfo.getObjectType().toString();
		if(type.equals("E1"))
		{
			showMainCES();
		}
		else if(type.equals("PW"))
		{
			showMainPW(0);
			showMainService(1);
		}
		else if(type.equals("TUNNEL"))
		{
			showMainTunnel(0);
			showMainPW(1);
			showRelatedService();
		}
		else if(type.equals("SEGMENT"))
		{
			showMainSegments();
			showMainTunnel(1);
			showMainPW(1);
			showRelatedService();
		}
		else if(type.equals("PORT"))
		{
			String portType = getPortType();
			if(portType.equals("UNI"))
			{
				showMainService(0);
			}
			else if(portType.equals("NNI"))
			{
				showTunnel();
				showMainPW(1);
				showRelatedService();
			}
		}
	}
	
	private void showMainService(int times)
	{
		List<Integer>  pwids = getPWs();
		if(times == 0)
		{
			showMainEline(pwids, 0);
		}
		else if(times == 1)
		{
			showMainEline(pwids, 1);
		}
		
		showMainEtree(pwids, 1);
		showMainElan(pwids, 1);
	}
	
	private void showRelatedService()
	{
		List<Integer>  pwids = getPWs();
		showRelatedEtree(pwids);
		showRelatedEline(pwids);
		showRelatedElan(pwids);
	}
	
	//第一次加载数据用initData，后来就用addData
	@SuppressWarnings("unchecked")
	private void showMainTunnel(int times)
	{
		List<Tunnel> tunnels = queryAllTunnels(currentAlarmInfo.getSiteId());
		convertTunnelData(tunnels);
		if(times == 0)
		{
			this.mainView.initData(tunnels);
		}
		else if(times == 1)
		{
			this.mainView.addData(tunnels);
		}
	}
	@SuppressWarnings("unchecked")
	private void showTunnel()
	{
		List<Tunnel> tunnels = queryAllTunnels(currentAlarmInfo.getSiteId());
		List<Tunnel> showTunnels = new ArrayList<Tunnel>();
		
		if(portlist != null && portlist.size()>0)
		{
			PortInst port = portlist.get(0);
			if(port.getPortType().equals("NNI"))
			{
				for(Tunnel tunnel:tunnels)
				{
					if(tunnel.getAPortId() == port.getPortId() || tunnel.getZPortId() == port.getPortId())
					{
						showTunnels.add(tunnel);
					}
				}
			}
		}
		convertTunnelData(showTunnels);
		this.mainView.initData(showTunnels);
	}
	@SuppressWarnings("unchecked")
	private void showMainCES()
	{
		List<CesInfo> cesList = null;
		CesInfoService services = null;
		try
		{
			services = (CesInfoService) ConstantUtil.serviceFactory.newService(Services.CesInfo);
			cesList = services.selectNodeBySite(currentAlarmInfo.getSiteId());
			convertCESData(cesList);
			this.mainView.initData(cesList);
		}
		catch (Exception e)
		{
			ExceptionManage.dispose(e,this.getClass());
		}finally{
			UiUtil.closeService(services);
		}
	}
	
	private List<Integer> getPWs()
	{
		List<Integer> pwids = new ArrayList<Integer>();
		List<PwInfo> PWs = queryAllPWs(currentAlarmInfo.getSiteId());
		for(PwInfo pwinfo: PWs)
		{
			pwids.add(pwinfo.getPwId());
		}
		
		return pwids;
	}
	
	private List<PwInfo> filterPort(List<PwInfo> PWs, PortInst port)
	{
		TunnelService tunnelService = null;
		List<PwInfo> pw = new ArrayList<PwInfo>();
		int portId = port.getPortId();
		try
		{
			tunnelService = (TunnelService) ConstantUtil.serviceFactory.newService(Services.Tunnel);
			for(PwInfo pwinfo: PWs)
			{
				int tunnelid = pwinfo.getTunnelId();
				try
				{
					Tunnel tunnel = tunnelService.selectByTunnelIdAndSiteId(tunnelid,currentAlarmInfo.getSiteId());
					if(tunnel != null)
					{
						if(tunnel.getAPortId() == portId || tunnel.getZPortId() == portId)
						{
							pw.add(pwinfo);
						}
					}
					
				}
				catch (Exception e)
				{
					ExceptionManage.dispose(e,this.getClass());
				}
			}
		}
		catch (Exception e)
		{
			ExceptionManage.dispose(e,this.getClass());
		}finally{
			UiUtil.closeService(tunnelService);
		}
		return pw;
	}
	
	@SuppressWarnings("unchecked")
	private void showMainPW(int times)
	{
		List<PwInfo> PWs = queryAllPWs(currentAlarmInfo.getSiteId());
		String type = currentAlarmInfo.getObjectType().toString();
		//如果是端口类型告警，将只显示此端口的PW，需要先找该tunnel，然后再找端口
		if(type.equals("PORT"));
		{
			if(portlist != null && portlist.size()>0)
			{
				PortInst port = portlist.get(0);
				 filterPort(PWs, port);
			}
		}
		
		for(PwInfo pwinfo: PWs)
		{
			pwIdList.add(pwinfo.getPwId());
		}
		convertPwData(PWs);
		if(times==0)
		{
			this.mainView.initData(PWs);
		}
		else if(times==1)
		{
			this.mainView.addData(PWs);
		}
	}

	//清楚面板中的数据
	@SuppressWarnings("unchecked")
	public void clearData()
	{
		this.mainView.initData(null);
		this.relatedView.initData(null);
	}
	
	@SuppressWarnings("unchecked")
	private void showRelatedEline(List<Integer> pwIdList)
	{
		List<ElineInfo> Elines = queryElineByPwids(pwIdList);
		convertElineData(Elines);
		this.relatedView.addData(Elines);
	}
	
	@SuppressWarnings("unchecked")
	private void showMainEline(List<Integer> pwIdList, int times)
	{
		List<ElineInfo> Elines = queryElineByPwids(pwIdList);
		convertElineData(Elines);
		if(times==0)
		{
			this.mainView.initData(Elines);
		}
		else if(times==1)
		{
			this.mainView.addData(Elines);
		}
	}
	
	@SuppressWarnings("unchecked")
	private void showRelatedEtree(List<Integer> pwIdList)
	{
		List<EtreeInfo> etrees = queryEtreeByPwid(pwIdList);
		convertEtreeData(etrees);
		this.relatedView.initData(etrees);
	}
	
	@SuppressWarnings("unchecked")
	private void showMainEtree(List<Integer> pwIdList, int times)
	{
		List<EtreeInfo> etrees = queryEtreeByPwid(pwIdList);
		convertEtreeData(etrees);
		if(times==0)
		{
			this.mainView.initData(etrees);
		}
		else if(times==1)
		{
			this.mainView.addData(etrees);
		}
	}
	
	@SuppressWarnings("unchecked")
	private void showMainElan(List<Integer> pwIdList, int times)
	{
		List<ElanInfo> elans = queryElansByPw(pwIdList);
		convertELANData(elans);
		if(times==0)
		{
			this.mainView.initData(elans);
		}
		else if(times==1)
		{
			this.mainView.addData(elans);
		}
	}
	
	@SuppressWarnings("unchecked")
	private void showRelatedElan(List<Integer> pwIdList)
	{
		List<ElanInfo> elans = queryElansByPw(pwIdList);
		convertELANData(elans);
		this.relatedView.addData(elans);
	}
	
	@SuppressWarnings("unchecked")
	private void showMainSegments()
	{
		List<Segment> segments = queryAllSegments(this.currentAlarmInfo.getSiteId());
		
		convertSegmentData(segments);
		this.mainView.initData(segments);
	}
	
	private List<Segment>  queryAllSegments(int id)
	{
		List<Segment> segments = new ArrayList<Segment>(); 
		SegmentService segmentservice = null;
		try
		{
			segmentservice = (SegmentService) ConstantUtil.serviceFactory.newService(Services.SEGMENT);
			segments = segmentservice.queryBySiteId(id);
		}
		catch (Exception e)
		{
			ExceptionManage.dispose(e,this.getClass());
		}finally{
			UiUtil.closeService(segmentservice);
		}
		
		return segments;
	}
	private List<ElineInfo> queryElineByPwids(List<Integer> pwIdList)
	{
		List<ElineInfo> Elines = new ArrayList<ElineInfo>();
		if(pwIdList.size()>0)
		{
			ElineService elineService = null;
			try
			{
				elineService = (ElineService) ConstantUtil.serviceFactory.newService(Services.Eline);
				Elines = elineService.selectElineByPwId(pwIdList);
			}
			catch (Exception e)
			{
				ExceptionManage.dispose(e,this.getClass());
			}finally{
				UiUtil.closeService(elineService);
			}
		}
		return Elines;
	}
	private List<Tunnel>  queryAllTunnels(int id)
	{
		List<Tunnel> tunnels = new ArrayList<Tunnel>();
		TunnelService tunnelService = null;
		try
		{
			tunnelService = (TunnelService) ConstantUtil.serviceFactory.newService(Services.Tunnel);
			tunnels = tunnelService.select(id);
		}
		catch (Exception e)
		{
			ExceptionManage.dispose(e,this.getClass());
		}finally
		{
			UiUtil.closeService(tunnelService);
		}
	
		return tunnels;
	}
	@SuppressWarnings("unused")
	private List<ElineInfo> queryAllElines(int id)
	{		
		ElineService elineService = null;
		try
		{
			elineService = (ElineService) ConstantUtil.serviceFactory.newService(Services.Eline);
			Elines.addAll(elineService.selectNodeBySite(id));
		}
		catch (Exception e)
		{
			ExceptionManage.dispose(e,this.getClass());
		}finally
		{
			UiUtil.closeService(elineService);
		}
		
		return Elines;
	}
	
	private  List<EtreeInfo> queryEtreeByPwid(List<Integer> pwIdList)
	{
		List<EtreeInfo> etrees = new ArrayList<EtreeInfo>();
		if(pwIdList.size()>0)
		{
			EtreeService etreeService = null;
			try
			{
				etreeService = (EtreeService) ConstantUtil.serviceFactory.newService(Services.EtreeInfo);
				etrees = etreeService.selectEtreeByPwId(pwIdList);
			}
			catch (Exception e)
			{
				ExceptionManage.dispose(e,this.getClass());
			}finally
			{
				UiUtil.closeService(etreeService);
			}
		}
		return etrees;
		
	}
	@SuppressWarnings("unused")
	private Map<String, List<EtreeInfo>> queryAllEtrees(int id)
	{
		Map<String, List<EtreeInfo>> etrees = new HashMap<String, List<EtreeInfo>>();
		EtreeService etreeService = null;
		try
		{
			etreeService = (EtreeService) ConstantUtil.serviceFactory.newService(Services.EtreeInfo);
			etrees = etreeService.selectNodeBySite(id);
		}
		catch (Exception e)
		{
			ExceptionManage.dispose(e,this.getClass());
		}finally
		{
			UiUtil.closeService(etreeService);
		}
		
		return etrees;
	}

	
	//通过pwid查相关的elan以显示在相关影响业务上
	private  List<ElanInfo> queryElansByPw(List<Integer> pwIdList)
	{
		List<ElanInfo> Elans = new ArrayList<ElanInfo>();
		if(pwIdList.size()>0)
		{
			ElanInfoService elanInfoService = null;
			try
			{
				elanInfoService = (ElanInfoService) ConstantUtil.serviceFactory.newService(Services.ElanInfo);
				Elans = elanInfoService.selectElanbypwid(pwIdList);
			}
			catch (Exception e)
			{
				ExceptionManage.dispose(e,this.getClass());
			}finally
			{
				UiUtil.closeService(elanInfoService);
			}
		}
		return Elans;
	}
	@SuppressWarnings("unused")
	private Map<String, List<ElanInfo>>  queryAllElans(int id)
	{
		Map<String, List<ElanInfo>> elans = new HashMap<String, List<ElanInfo>>();
		ElanInfoService elanInfoService = null;
		try
		{
			elanInfoService = (ElanInfoService) ConstantUtil.serviceFactory.newService(Services.ElanInfo);
			elans = elanInfoService.selectSiteNodeBy(id);
		}
		catch (Exception e)
		{
			ExceptionManage.dispose(e,this.getClass());
		}finally
		{
			UiUtil.closeService(elanInfoService);
		}
		
		return elans;
	}
	
	private List<PwInfo>  queryAllPWs(int id)
	{
		List<PwInfo> PWs = new ArrayList<PwInfo>();
		PwInfoService pwservice  = null;
		try
		{
			pwservice = (PwInfoService) ConstantUtil.serviceFactory.newService(Services.PwInfo);
			PWs = pwservice.selectNodeBySiteid(id);
		}
		catch (Exception e)
		{
			ExceptionManage.dispose(e,this.getClass());
		}finally
		{
			UiUtil.closeService(pwservice);
		}
		return PWs;
	}
	
	private String getPortType()
	{
		if(currentAlarmInfo.getObjectType().toString().equals("PORT"))
		{
			//找出其PORT 
			PortService portService = null;
			try
			{
				portService = (PortService) ConstantUtil.serviceFactory.newService(Services.PORT);
				portlist = portService.selectPortbySiteandPortname(currentAlarmInfo.getSiteId(), currentAlarmInfo.getObjectName());
				if(portlist != null && portlist.size()>0)
				{
					return portlist.get(0).getPortType();
				}
			}
			catch (Exception e)
			{
				ExceptionManage.dispose(e,this.getClass());
			} finally{
				UiUtil.closeService(portService);
			}
		}
		
		return null;
	}
	
	private void convertCESData(List<CesInfo> Ceslist)
	{
		for(CesInfo ces : Ceslist)
		{
			ces.putClientProperty("id", ces.getId());
			ces.putClientProperty("objectName", ces.getName());
			ces.putClientProperty("objectType","CES");
			ces.putClientProperty("activateState", "");
			ces.putClientProperty("consistency", "");
			ces.putClientProperty("createTime", ces.getCreateTime());
			ces.putClientProperty("activateTime", ces.getCreateTime());
			ces.putClientProperty("creater", ces.getCreateUser());
		}
	}
	
	private void convertSegmentData(List<Segment> segments)
	{
		for(Segment sg : segments)
		{
			sg.putClientProperty("id", sg.getId());
			sg.putClientProperty("objectName", sg.getNAME());
			sg.putClientProperty("objectType","Segment");
			sg.putClientProperty("activateState", "");
			sg.putClientProperty("consistency", "");
			sg.putClientProperty("createTime", sg.getCREATTIME());
			sg.putClientProperty("activateTime", sg.getCREATTIME());
			sg.putClientProperty("creater", sg.getCREATUSER());
		}
	}
	
	private void convertTunnelData(List<Tunnel> tunnels)
	{
		for(Tunnel tunnel : tunnels)
		{
			int status = tunnel.getTunnelStatus();
			String active = "";
			if(status == 1)
			{
				active = "activated";
			}
			else
			{
				active = "unactivated";
			}
			tunnel.putClientProperty("id", tunnel.getTunnelId());
			tunnel.putClientProperty("objectName", tunnel.getTunnelName());
			tunnel.putClientProperty("objectType","Tunnel");
			tunnel.putClientProperty("activateState", active);
			tunnel.putClientProperty("consistency", "");
			tunnel.putClientProperty("createTime", tunnel.getCreateTime());
			tunnel.putClientProperty("activateTime", tunnel.getCreateTime());
			tunnel.putClientProperty("creater", tunnel.getCreateUser());
		}
	}
	
	private void convertPwData(List<PwInfo> PWs)
	{
		for(PwInfo pw : PWs)
		{
			int status = pw.getPwStatus();
			String active = "";
			if(status == 1)
			{
				active = "activated";
			}
			else
			{
				active = "unactivated";
			}
			pw.putClientProperty("id", pw.getPwId());
			pw.putClientProperty("objectName", pw.getPwName());
			pw.putClientProperty("objectType","Pw");
			pw.putClientProperty("activateState", active);
			pw.putClientProperty("consistency", "");
			pw.putClientProperty("createTime", pw.getCreateTime());
			pw.putClientProperty("activateTime", pw.getCreateTime());
			pw.putClientProperty("creater", pw.getCreateUser());
		}
	}
	
	private void convertELANData(List<ElanInfo> ElanInfos)
	{
		for(ElanInfo elan : ElanInfos)
		{
			int status = elan.getActiveStatus();
			String active = "";
			if(status == 1)
			{
				active = "activated";
			}
			else
			{
				active = "unactivated";
			}
			elan.putClientProperty("id", elan.getId());
			elan.putClientProperty("objectName", elan.getName());
			elan.putClientProperty("objectType","Elan");
			elan.putClientProperty("activateState", active);
			elan.putClientProperty("consistency", "");
			elan.putClientProperty("createTime", elan.getCreateTime());
			elan.putClientProperty("activateTime", elan.getCreateTime());
			elan.putClientProperty("creater", elan.getCreateUser());
		}
	}
	
	private void convertElineData(List<ElineInfo> Elines)
	{
		for(ElineInfo eline : Elines)
		{
			int status = eline.getActiveStatus();
			String active = "";
			if(status == 1)
			{
				active = "activated";
			}
			else
			{
				active = "unactivated";
			}
			eline.putClientProperty("id", eline.getId());
			eline.putClientProperty("objectName", eline.getName());
			eline.putClientProperty("objectType","Eline");
			eline.putClientProperty("activateState", active);
			eline.putClientProperty("consistency", "");
			eline.putClientProperty("createTime", eline.getCreateTime());
			eline.putClientProperty("activateTime",  eline.getCreateTime());
			eline.putClientProperty("creater", eline.getCreateUser());
		}
	}
	
	private void convertEtreeData(List<EtreeInfo> Etrees)
	{
		for(EtreeInfo etree : Etrees)
		{
			int status = etree.getActiveStatus();
			String active = "";
			if(status == 1)
			{
				active = "activated";
			}
			else
			{
				active = "unactivated";
			}
			etree.putClientProperty("id", etree.getId());
			etree.putClientProperty("objectName", etree.getName());
			etree.putClientProperty("objectType","Etree");
			etree.putClientProperty("activateState", active);
			etree.putClientProperty("consistency", "");
			etree.putClientProperty("createTime", etree.getCreateTime());
			etree.putClientProperty("activateTime",  etree.getCreateTime());
			etree.putClientProperty("creater", etree.getCreateUser());
		}
	}
	
	public void setCurrentAlarmInfo(CurrentAlarmInfo currentAlarmInfo)
	{
		this.currentAlarmInfo = currentAlarmInfo;
	}
	@SuppressWarnings("rawtypes")
	public ViewDataTable getView()
	{
		return mainView;
	}
	@SuppressWarnings("rawtypes")
	public void setView(ViewDataTable view)
	{
		this.mainView = view;
	}
	@SuppressWarnings("rawtypes")
	public void setRelatedView(ViewDataTable relatedView)
	{
		this.relatedView = relatedView;
	}
}
