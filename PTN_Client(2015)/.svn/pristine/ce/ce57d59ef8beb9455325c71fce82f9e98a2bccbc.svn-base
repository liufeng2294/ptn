package com.nms.db.dao.ptn;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.nms.db.bean.ptn.CccInfo;
import com.nms.db.bean.ptn.path.eth.EtreeInfo;
import com.nms.ui.manager.DateUtil;
import com.nms.ui.manager.ExceptionManage;

public class CccDao {

	/**
	 * 插入Sql
	 */
	private final String INSERTSQL = "insert into serviceinfo(serviceId,serviceType," + "name,aXcId,activeStatus, createUser , createTime,clientId,asiteid,amostAcIds) values(?,?,?,?,?,?,?,?,?,?)";

	/**
	 * 更新Sql
	 */
	private final String UPDATESQL = "update serviceinfo set serviceId=?,name=?,aXcId=?,activeStatus=?,createUser=? ,createTime=? , clientId=?,amostAcIds=? where id=? and serviceType=52";
	/**
	 * 删除Sql
	 */
	private final String DELETESQL = "delete from serviceInfo where serviceId=? and serviceType = ?";

	/**
	 * 根据名称查询
	 */
	private final String SELECT_BY_NAME = "select count(*) as selectcount from serviceinfo where serviceType=52 and aSiteId=? and name=?";

	
	/**
	 * 删除Sql
	 */
	private final String DELETESQLBYID = "delete from serviceInfo where id=? and serviceType = ?";

	ResultSet resultSet = null;
	PreparedStatement preparedStatement = null;

	/**
	 * 新增cccinfo
	 * 
	 * @param cccinfo
	 *            实体
	 * @param connection
	 *            数据库连接
	 * @return 插入的记录数
	 * @throws Exception
	 */
	public int insert(CccInfo cccinfo, Connection connection) throws Exception {
		if (null == cccinfo) {
			throw new Exception("etreeinfo is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		int result = 0;
		try {
			cccinfo.setCreateTime(DateUtil.getDate(DateUtil.FULLTIME));
			sql = INSERTSQL;
			preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setInt(1, cccinfo.getServiceId());
			preparedStatement.setInt(2, cccinfo.getServiceType());
			preparedStatement.setString(3, cccinfo.getName());
			preparedStatement.setInt(4, cccinfo.getaXcId());
			preparedStatement.setInt(5, cccinfo.getActiveStatus());	
			preparedStatement.setString(6, cccinfo.getCreateUser());
			preparedStatement.setString(7, cccinfo.getCreateTime());			
			preparedStatement.setInt(8, cccinfo.getClientId());
			preparedStatement.setInt(9, cccinfo.getaSiteId());
			preparedStatement.setString(10, cccinfo.getAmostAcId());
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				result = resultSet.getInt(1);
			}
		} catch (Exception e) {
			throw e;
		} finally {

			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}

			sql = null;
		}

		return result;
	}

	/**
	 * 修改etreeinfo
	 * 
	 * @param etreeinfo
	 *            实体
	 * @param connection
	 *            数据库连接
	 * @return 修改的记录数
	 * @throws Exception
	 */
	public int update(CccInfo cccinfo, Connection connection) throws Exception {
		if (null == cccinfo) {
			throw new Exception("cccinfo is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		int result = 0;
		try {
			sql = UPDATESQL;
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, cccinfo.getServiceId());
			preparedStatement.setString(2, cccinfo.getName());
			preparedStatement.setInt(3, cccinfo.getaXcId());
			preparedStatement.setInt(4, cccinfo.getActiveStatus());
			preparedStatement.setString(5, cccinfo.getCreateUser());
			preparedStatement.setString(6, cccinfo.getCreateTime());
			preparedStatement.setInt(7, cccinfo.getClientId());
			preparedStatement.setString(8, cccinfo.getAmostAcId());
			preparedStatement.setInt(9, cccinfo.getId());
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

		return result;
	}

	/**
	 * 通过主键删除etreeinfo
	 * 
	 * @param id
	 *            主键
	 * @param connection
	 *            数据库连接
	 * @return 删除的记录数
	 * @throws Exception
	 */
	public int delete(int serviceId, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		int result = 0;
		try {
			sql = DELETESQL;
			int serviceType = 52;
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, serviceId);
			preparedStatement.setInt(2, serviceType);
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}

	/**
	 * 通过主键id删除
	 * @param id
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public int deleteByID(int id, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		int result = 0;
		try {
			sql = "delete from serviceInfo where id=? and serviceType = ?";
			int serviceType = 3;
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, id);
			preparedStatement.setInt(2, serviceType);
			result = preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return result;
	}
	/**
	 * 通过条件查询
	 * 
	 * @param etreeinfocondition
	 *            查询条件
	 * @param connection
	 *            数据库连接
	 * @return List<Etreeinfo>集合
	 * @throws Exception
	 */
	public List<CccInfo> queryByCondition(CccInfo cccinfocondition, Connection connection) throws Exception {
		if (null == cccinfocondition) {
			throw new Exception("cccinfocondition is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		List<CccInfo> list = null;
		try {
			sql = "SELECT * FROM serviceInfo WHERE serviceType= 52 and serviceId = " + cccinfocondition.getServiceId();
			list = this.excuteQuery(connection, sql);
		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}
		return list;
	}

	/**
	 * 通过siteid 和 xcid 查询
	 * 
	 * @author kk
	 * 
	 * @param siteID
	 *            和 xcID 数据库elan对象
	 * @param connection
	 *            数据库连接
	 * @return
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	public List<CccInfo> query_etreeInfo(int siteID, int xcID, Connection connection) throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		List<CccInfo> cccInfoList = null;
		try {

			sql = "select * from serviceinfo where serviceType=3 and ((asiteid=" + siteID + " and axcid=" + xcID + ") or (zsiteid=" + siteID + " and zxcid=" + xcID + "))";
			cccInfoList = this.excuteQuery(connection, sql);

		} catch (Exception e) {
			throw e;
		} finally {
			sql = null;
		}

		return cccInfoList;
	}

	/**
	 * 查询一个最大的serviceid
	 * 
	 * @return
	 * @throws Exception
	 */
	public int selectMaxServiceId(Connection connection) throws Exception {

		String sql = null;
		int serviceid = 0;
		try {
			sql = "select max(serviceid) as serviceid from serviceinfo where serviceType=52";

			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				serviceid = resultSet.getInt("serviceid");
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return serviceid;

	}

	/**
	 * 执行查询语句
	 * 
	 * @param connection
	 *            数据库连接
	 * @param sql
	 *            sql语句
	 * @return 查询集合
	 * @throws Exception
	 */
	private List<CccInfo> excuteQuery(Connection connection, String sql) throws Exception {
		List<CccInfo> cccinfoList = null;
		try {
			cccinfoList = new ArrayList<CccInfo>();
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			cccinfoList = getCccInfoList(cccinfoList, resultSet);

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
		}

		return cccinfoList;
	}

	public List<CccInfo> queryAll(Connection connection) throws SQLException {

		List<CccInfo> cccinfoList = new ArrayList<CccInfo>();
		String sql = "select * from serviceInfo where serviceType = 52 and issingle=0";
		try {
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			cccinfoList = getCccInfoList(cccinfoList, resultSet);

		} catch (SQLException e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				preparedStatement = null;
			}
		}
		return cccinfoList;
	}

	/**
	 * 查询某网元下所有etree信息
	 * 
	 * @param connection
	 * @return
	 * @throws SQLException
	 */
	public List<CccInfo> queryAllBySite(int siteid, Connection connection) throws SQLException {

		List<CccInfo> cccinfoList = new ArrayList<CccInfo>();
		String sql = "select * from serviceInfo where serviceType = 3 and (rootSite = ? or branchSite=?)";
		try {
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteid);
			preparedStatement.setInt(2, siteid);
			resultSet = preparedStatement.executeQuery();
			cccinfoList = getCccInfoList(cccinfoList, resultSet);

		} catch (SQLException e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				preparedStatement = null;
			}
		}
		return cccinfoList;
	}

	private List<CccInfo> getCccInfoList(List<CccInfo> cccinfoList, ResultSet resultSet) {
		CccInfo cccinfo;
		try {
			while (resultSet.next()) {
				cccinfo = new CccInfo();
				cccinfo.setId(resultSet.getInt("id"));
				cccinfo.setServiceId(resultSet.getInt("serviceId"));
				cccinfo.setServiceType(resultSet.getInt("serviceType"));
				cccinfo.setName(resultSet.getString("name"));
				cccinfo.setaXcId(resultSet.getInt("aXcId"));
				cccinfo.setActiveStatus(resultSet.getInt("activeStatus"));
				cccinfo.setCreateUser(resultSet.getString("createUser"));
				cccinfo.setCreateTime(DateUtil.strDate(resultSet.getString("createTime"), DateUtil.FULLTIME));
				cccinfo.setaSiteId(resultSet.getInt("aSiteId"));
				cccinfo.setAmostAcId(resultSet.getString("amostAcIds"));
				cccinfoList.add(cccinfo);
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		}
		return cccinfoList;
	}

	public void updateStatus(List<Integer> ServiceIds, int status, Connection connection) throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		String ids = null;
		PreparedStatement preparedStatement = null;
		try {

			if (null == ServiceIds) {
				sql = "update serviceinfo set activeStatus=? where serviceType=52";
			} else {
				ids = ServiceIds.toString();
				sql = "update serviceinfo set activeStatus=? where serviceId in (" + ids.subSequence(1, ids.length() - 1) + ")  and serviceType=52";
			}

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, status);

			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
			ids = null;
		}
	}

	public void updateStatus(int siteId, int status, Connection connection) throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		try {

			sql = "update serviceinfo set activeStatus=? where serviceType=52 and aSiteId=?";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, status);
			preparedStatement.setInt(2, siteId);

			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
	}

	/**
	 * 同步ccc时 查询
	 * 
	 * query_synchro(这里用一句话描述这个方法的作用)
	 * 
	 * @author tp
	 * 
	 * @param
	 * 
	 * @return
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	public List<CccInfo> querySynchro(int siteId, int xcid, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		try {
			sql = "select * from serviceinfo where serviceType=52 and asiteId=? and axcid=?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			preparedStatement.setInt(2, xcid);
			return this.excuteQuery(preparedStatement);
		} catch (Exception e) {
			throw e;
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
	}

	/**
	 * 查询名称是否重复
	 * 
	 * @author kk
	 * 
	 * @param
	 * 
	 * @return
	 * @throws Exception
	 * 
	 * @Exception 异常对象
	 */
	public int query_name(String afterName, String beforeName, Connection connection) throws Exception {
		if (null == afterName) {
			throw new Exception("afterName is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		List<Object> paramList = new ArrayList<Object>();
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		try {
			sql = "select count(*) as selectcount from serviceinfo where serviceType=3 and name=?";
			paramList.add(afterName);
			if (null != beforeName) {
				sql += " and name!=?";
				paramList.add(beforeName);
			}
			preparedStatement = connection.prepareStatement(sql);
			for (int i = 0; i < paramList.size(); i++) {
				preparedStatement.setObject(i + 1, paramList.get(i));
			}
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				result = resultSet.getInt("selectcount");
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			paramList = null;
			sql = null;
		}

		return result;
	}

	/**
	 * 单网元名称验证
	 * 
	 * @param afterName
	 * @param beforeName
	 * @param connection
	 * @param siteId
	 * @return
	 * @throws Exception
	 */
	public int query_nameBySingle(String afterName, String beforeName, Connection connection, int siteId) throws Exception {
		if (null == afterName) {
			throw new Exception("afterName is null");
		}

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		List<Object> paramList = new ArrayList<Object>();
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int result = 0;
		try {
			sql = this.SELECT_BY_NAME;
			paramList.add(siteId);
			paramList.add(afterName);
			if (null != beforeName) {
				sql += " and name!=?";
				paramList.add(beforeName);
			}
			preparedStatement = connection.prepareStatement(sql);
			for (int i = 0; i < paramList.size(); i++) {
				preparedStatement.setObject(i + 1, paramList.get(i));
			}
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				result = resultSet.getInt("selectcount");
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			paramList = null;
			sql = null;
		}

		return result;
	}

	/**
	 * 通过acId,siteId查询
	 * 
	 * @param acId
	 * @param connection
	 * @return
	 */
	public List<CccInfo> queryByAcIdAndSiteIdCondition(int acId, int siteId, Connection connection) {
		List<CccInfo> cccinfoList = new ArrayList<CccInfo>();
		String sql = "select*from serviceinfo where serviceType=52 and ((rootSite = ? )or (branchSite=?))";
		PreparedStatement preparedStatement = null;
		try {
			preparedStatement = connection.prepareStatement(sql);
//			preparedStatement.setInt(1, acId);
			preparedStatement.setInt(1, siteId);
//			preparedStatement.setInt(3, acId);
			preparedStatement.setInt(2, siteId);
			resultSet = preparedStatement.executeQuery();
			cccinfoList = getCccInfoList(cccinfoList, resultSet);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (SQLException e) {
					ExceptionManage.dispose(e, this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (SQLException e) {
					ExceptionManage.dispose(e, this.getClass());
				}
				preparedStatement = null;
			}
		}
		return cccinfoList;
	}

	/**
	 * 通过serviceId查询一组etree业务
	 * 
	 * @param serviceId
	 * @param connection
	 * @return
	 */
	public List<CccInfo> queryByServiceId(int serviceId, Connection connection) {

		List<CccInfo> cccinfoList = new ArrayList<CccInfo>();
		String sql = "select*from serviceinfo where serviceType=52 and serviceId=?";
		PreparedStatement preparedStatement = null;
		try {
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, serviceId);
			resultSet = preparedStatement.executeQuery();
			cccinfoList = getCccInfoList(cccinfoList, resultSet);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (SQLException e) {
					ExceptionManage.dispose(e, this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (SQLException e) {
					ExceptionManage.dispose(e, this.getClass());
				}
				preparedStatement = null;
			}
		}
		return cccinfoList;

	}

	

	/**
	 * 把list转换成map serivceId为key
	 * 
	 * @param etreeList
	 *            要转换的集合
	 * @return
	 * @throws Exception
	 */
	public Map<Integer, List<EtreeInfo>> convertMap(List<EtreeInfo> etreeList) throws Exception {
		Map<Integer, List<EtreeInfo>> map = null;
		List<EtreeInfo> etreeInfoList = null;
		try {
			map = new HashMap<Integer, List<EtreeInfo>>();

			for (EtreeInfo etreeInfo : etreeList) {
				if (null == map.get(etreeInfo.getServiceId())) {
					etreeInfoList = new ArrayList<EtreeInfo>();
					etreeInfoList.add(etreeInfo);

					map.put(etreeInfo.getServiceId(), etreeInfoList);
				} else {
					map.get(etreeInfo.getServiceId()).add(etreeInfo);
				}
			}

		} catch (Exception e) {
			throw e;
		} finally {
			etreeInfoList = null;
		}
		return map;
	}

	public List<Integer> selectpwIds(int siteId, int serviceId, Connection connection) throws Exception {
		if (0 == siteId) {
			throw new Exception("siteId is null");
		}

		if (0 == serviceId) {
			throw new Exception("serviceId is null");
		}

		String sql = null;
		List<Object> paramList = new ArrayList<Object>();
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Integer> resultList = new ArrayList<Integer>();
		try {
			sql = "select * from serviceinfo where servicetype=3 and serviceId = ? and asiteid = ? or zsiteid = ?";
			paramList.add(serviceId);
			paramList.add(siteId);
			paramList.add(siteId);
			preparedStatement = connection.prepareStatement(sql);
			for (int i = 0; i < paramList.size(); i++) {
				preparedStatement.setObject(i + 1, paramList.get(i));
			}
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				resultList.add(resultSet.getInt("pwid"));
			}

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, this.getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, this.getClass());
				}
				preparedStatement = null;
			}
			paramList = null;
			sql = null;
		}

		return resultList;
	}

	/**
	 * 根据主键删除etree数据
	 * 
	 * @param id
	 *            主键
	 * @param connection
	 *            数据库连接
	 * @throws Exception
	 */
	public void deleteById(int id, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		String sql = null;
		try {
			sql = DELETESQLBYID;
			int serviceType = 3;
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, id);
			preparedStatement.setInt(2, serviceType);
			preparedStatement.executeUpdate();
		} catch (Exception e) {
			throw e;
		} finally {

			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}

	}

	public List<CccInfo> select(CccInfo cccInfo, Connection connection) throws Exception {
		if (null == cccInfo) {
			throw new Exception("PWCondition is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}
		List<CccInfo> cccinfoList = null;
		String sql = null;
		try {
			cccinfoList = new ArrayList<CccInfo>();
			sql = "SELECT * FROM serviceinfo WHERE  serviceType=52 and  issingle=0";
			if (cccInfo.getId() > 0) {
				sql += " and id= " + cccInfo.getId();
			}
			preparedStatement = connection.prepareStatement(sql);
			resultSet = preparedStatement.executeQuery();
			cccinfoList = getCccInfoList(cccinfoList, resultSet);
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					throw e;
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					throw e;
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return cccinfoList;
	}

	public List<CccInfo> selectServiceInfoById(int id, Connection connection) throws Exception {
		if (null == connection) {
			throw new Exception("connection is null");
		}
		try {
			String sql = "select * from serviceinfo where id=" + id;
			return this.excuteQuery(connection, sql);

		} catch (Exception e) {
			throw e;
		}
	}

	/**
	 * 根据网元ID和是否为单网元查询
	 * 
	 * @param siteId
	 *            网元主键
	 * @param isSingle
	 *            是否为单网元 1=单网元 0=网络
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<CccInfo> selectBySiteAndisSingle(int siteId, int isSingle, Connection connection) throws Exception {
		String sql = null;
		PreparedStatement preparedStatement = null;
		List<CccInfo> cccinfoList = new ArrayList<CccInfo>();
		ResultSet resultSet = null;
		try {
			sql = "select * from serviceinfo where serviceType = 3 and isSingle=? and (aSiteId = ? or zSiteId = ?)";

			preparedStatement = connection.prepareStatement(sql.toString());
			preparedStatement.setInt(1, isSingle);
			preparedStatement.setInt(2, siteId);
			preparedStatement.setInt(3, siteId);

			resultSet = preparedStatement.executeQuery();
			getCccInfoList(cccinfoList, resultSet);
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
				}
				preparedStatement = null;
			}
		}
		return cccinfoList;
	}

	/**
	 * 根据主键查询此组etree业务
	 * 
	 * @param id
	 *            主键
	 * @param connection
	 *            数据库连接
	 * @return
	 * @throws Exception
	 */
	public List<CccInfo> queryById(int id, Connection connection) throws Exception {

		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<CccInfo> cccInfoList = new ArrayList<CccInfo>();
		try {
			sql = "select * FROM serviceinfo s1 WHERE s1.serviceId = (SELECT s2.serviceId FROM serviceinfo s2 WHERE s2.id=?) AND s1.serviceType=3";

			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, id);
			resultSet = preparedStatement.executeQuery();
			this.getCccInfoList(cccInfoList, resultSet);

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
				}
				preparedStatement = null;
			}
		}
		return cccInfoList;
	}

	/**
	 * 列表过滤查询
	 * 
	 * @param etreeInfo
	 *            查询条件
	 * @param connection
	 *            数据库连接
	 * @return
	 * @throws Exception
	 */
	public List<CccInfo> filterSelect(CccInfo cccInfo, Connection connection) throws Exception {

		if (null == cccInfo) {
			throw new Exception("etreeInfo is null");
		}
		if (null == connection) {
			throw new Exception("connection is null");
		}

		List<CccInfo> cccInfoList = new ArrayList<CccInfo>();
		StringBuffer sql = new StringBuffer();
		List<Object> parameterList = new ArrayList<Object>();
		try {
			sql.append("SELECT * FROM serviceinfo s WHERE  serviceType=52 ");

			if (null != cccInfo.getName() && !"".equals(cccInfo.getName())) {
				sql.append(" AND `name` LIKE ?");
				parameterList.add("%"+cccInfo.getName()+"%");
			}

			

			if (cccInfo.getActiveStatus() > 0) {
				sql.append(" AND activeStatus=?");
				parameterList.add(cccInfo.getActiveStatus());
			}

			if (cccInfo.getaSiteId() > 0) {
				sql.append(" AND aSiteId=?");
				parameterList.add(cccInfo.getaSiteId());
				
			}
			
//			if(etreeInfo.getAportId()>0)
//			{
//				sql.append(" and (s.amostAcIds in (SELECT id FROM acinfo WHERE portId=?) or s.zmostAcIds in (SELECT id FROM acinfo WHERE portId=?))");
//				parameterList.add(etreeInfo.getAportId());
//				parameterList.add(etreeInfo.getAportId());
//			}

			preparedStatement = connection.prepareStatement(sql.toString());
			if (parameterList.size() > 0) {
				for (int i = 0; i < parameterList.size(); i++) {
					preparedStatement.setObject(i + 1, parameterList.get(i));
				}
			}
			resultSet = preparedStatement.executeQuery();
			getCccInfoList(cccInfoList, resultSet);

		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				preparedStatement = null;
			}
			parameterList = null;
			sql = null;
		}
		return cccInfoList;
	}
	
	
	/**
	 * 
	 * 判断PWid是否别其他的所使用
	 * @param pwId
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	
	public boolean isRelatedPW(int pwId, Connection connection) throws Exception {
		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		boolean falg = false;
		try {
			sql = "select * from serviceinfo where (serviceType = 2 or serviceType =1 or serviceType =40 ) and pwId = ?";

			preparedStatement = connection.prepareStatement(sql.toString());
			preparedStatement.setInt(1, pwId);
			resultSet = preparedStatement.executeQuery();
			if(resultSet.next()){
				return true;
			}
		} catch (Exception e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
				}
				preparedStatement = null;
			}
		}
		return falg;
	}
	/**
	 * 
	 * 判断ac是否别其他的所使用
	 * @param pwId
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	
	public List<String> isRelatedAc(Connection connection) throws Exception {
		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<String> azAcList = new ArrayList<String>();
		try {
			sql = "select * from serviceinfo where (serviceType = 2)";
			preparedStatement = connection.prepareStatement(sql.toString());
			resultSet = preparedStatement.executeQuery();
			
			while (resultSet.next()) {
				if(null != resultSet.getString("amostAcIds") && !resultSet.getString("amostAcIds").equals(""))
				{
					azAcList.add(resultSet.getString("amostAcIds"));	
				}
				if(null != resultSet.getString("zmostAcIds") && !resultSet.getString("zmostAcIds").equals(""))
				{
					azAcList.add(resultSet.getString("zmostAcIds"));
				}
			}
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
				}
				preparedStatement = null;
			}
		}
		return azAcList;
	}
	
	/**
	 * 
	 * 判断ac是否别其他的所使用
	 * @param pwId
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public boolean isRelatedAcByEline(int acId, Connection connection) throws Exception {
		String sql = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			sql = "select * from serviceinfo where (serviceType = 1 or serviceType = 40 ) and (aAcId = ? or zAcId = ?)";
			preparedStatement = connection.prepareStatement(sql.toString());
			preparedStatement.setInt(1, acId);
			preparedStatement.setInt(2, acId);
			resultSet = preparedStatement.executeQuery();
			if(resultSet.next()){
				return true;
			}
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
				}
				preparedStatement = null;
			}
		}
		return false;
	}
	
	
	
	public List<CccInfo> queryAllEtree(int serviceType,String name,Connection connection) throws SQLException {

		List<CccInfo> cccinfoList = new ArrayList<CccInfo>();
		String sql = "select * from serviceInfo where serviceType = ? and name=?";
		try {
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, serviceType);
			preparedStatement.setString(2, name);
			resultSet = preparedStatement.executeQuery();
			cccinfoList = getCccInfoList(cccinfoList, resultSet);

		} catch (SQLException e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				preparedStatement = null;
			}
		}
		return cccinfoList;
	}
	
	public List<CccInfo> queryAllEtrees(int serviceType,String name,int branchsite,Connection connection) throws SQLException {
		List<CccInfo> cccinfoList = new ArrayList<CccInfo>();		
		String sql ="";		
		try {
			if(serviceType==3){
				sql = "select * from serviceInfo where serviceType = ? and name=? and branchSite=?";
				preparedStatement = connection.prepareStatement(sql);
				preparedStatement.setInt(1, serviceType);
				preparedStatement.setString(2, name);
				preparedStatement.setInt(3, branchsite);
			}else if(serviceType==40){
				sql = "select * from serviceInfo where serviceType = ? and name=? and (branchMainSite=? or branchProtectSite=? )";
				preparedStatement = connection.prepareStatement(sql);
				preparedStatement.setInt(1, serviceType);
				preparedStatement.setString(2, name);
				preparedStatement.setInt(3, branchsite);
				preparedStatement.setInt(4, branchsite);
			}else if(serviceType==2){
				sql = "select * from serviceInfo where serviceType = ? and name=? and (aSiteId=? or zSIteId=? )";
				preparedStatement = connection.prepareStatement(sql);
				preparedStatement.setInt(1, serviceType);
				preparedStatement.setString(2, name);
				preparedStatement.setInt(3, branchsite);
				preparedStatement.setInt(4, branchsite);
			}
			resultSet = preparedStatement.executeQuery();
			cccinfoList = getCccInfoList(cccinfoList, resultSet);
		} catch (SQLException e) {
			throw e;
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				resultSet = null;
			}
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, getClass());
				}
				preparedStatement = null;
			}
		}
		return cccinfoList;
	}
	/**
	 * 查询单网元下的所有cccInfo
	 * 
	 * @param siteId
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public List<CccInfo> queryNodeBySite(int siteId, Connection connection) throws Exception {

		if (null == connection) {
			throw new Exception("connection is null");
		}

		String sql = null;
		PreparedStatement preparedStatement = null;
		List<CccInfo> list = null;
		try {
			sql = "select * from serviceinfo where serviceType=52 and aSiteid=? and aXcId != 0";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, siteId);
			list = this.excuteQuery(preparedStatement);
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, this.getClass());
				}
				preparedStatement = null;
			}
			sql = null;
		}
		return list;
	}
	
	/**
	 * 执行查询语句
	 * 
	 * @param connection
	 *            数据库连接
	 * @param sql
	 *            sql语句
	 * @return 查询集合
	 * @throws Exception
	 */
	private List<CccInfo> excuteQuery(PreparedStatement preparedStatement) throws Exception {
		List<CccInfo> cccinfoList = null;
		ResultSet resultSet = null;
		CccInfo cccinfo = null;
		try {
			cccinfoList = new ArrayList<CccInfo>();
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				cccinfo = new CccInfo();
				cccinfo.setId(resultSet.getInt("id"));
				cccinfo.setServiceId(resultSet.getInt("serviceId"));	
				cccinfo.setServiceType(resultSet.getInt("serviceType"));
				cccinfo.setName(resultSet.getString("name"));
				cccinfo.setaXcId(resultSet.getInt("aXcId"));
				cccinfo.setaSiteId(resultSet.getInt("aSiteId"));
				cccinfo.setActiveStatus(resultSet.getInt("activeStatus"));
				cccinfo.setCreateTime(resultSet.getString("createTime"));
				cccinfo.setCreateUser(resultSet.getString("createUser"));
				cccinfo.setAmostAcId(resultSet.getString("aMostAcIds"));
				cccinfoList.add(cccinfo);
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e, this.getClass());
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (Exception e) {
					ExceptionManage.dispose(e, this.getClass());
				}
				resultSet = null;
			}
			cccinfo = null;
		}
		return cccinfoList;
	}
}
