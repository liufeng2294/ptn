package com.nms.util;

import java.beans.PropertyVetoException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import com.mchange.v2.c3p0.ComboPooledDataSource;
import com.nms.ui.manager.ExceptionManage;

public class DBManager {
	// /**
	// * @param args
	// * @throws IOException
	// */
	// // private Connection conn = null;
	// public static Connection getConnection(String ip) throws Exception {
	// if (conn == null) {
	// try {
	// String user;
	// String password;
	// String url;
	// String driver;
	// Properties props = new Properties();
	// InputStream propsIs = DBManager.class.getClassLoader().getResourceAsStream("config/config.properties");
	// props.load(propsIs);
	// user = props.getProperty("jdbc.username");
	// password = props.getProperty("jdbc.password");
	// url = props.getProperty("jdbc.url");
	// url=url.replace("{?}", ip);
	// driver = props.getProperty("jdbc.driverClassName");
	// Lg.lg("user:" + user + "; password:" + password + "; url:" + url + "; driver:" + driver);
	// Class.forName(driver);
	// conn = DriverManager.getConnection(url, user, password);
	// } catch (IOException e) {
	// throw e;
	// } catch (ClassNotFoundException e) {
	// throw e;
	// } catch (SQLException e) {
	// throw e;
	// }
	// return conn;
	// } else {
	// return conn;
	// }
	// }

	private static DBManager dbManager;
	private ComboPooledDataSource dataSource;

	public DBManager(String ip) {
		try {
			if(null == this.dataSource){
				Properties props = new Properties();
				InputStream propsIs = DBManager.class.getClassLoader().getResourceAsStream("config/config.properties");
				props.load(propsIs);

				dataSource = new ComboPooledDataSource();
				dataSource.setUser(props.getProperty("jdbc.username"));
				dataSource.setPassword(props.getProperty("jdbc.password"));
				dataSource.setJdbcUrl(props.getProperty("jdbc.url").replace("{?}", ip));
				dataSource.setDriverClass(props.getProperty("jdbc.driverClassName"));
				// 设置初始连接池的大小！
				dataSource.setInitialPoolSize(20);
				// 设置连接池的最小值！
				dataSource.setMinPoolSize(1);
				// 设置连接池的最大值！
				dataSource.setMaxPoolSize(300);
				// 设置连接池中的最大Statements数量！
				dataSource.setMaxStatements(30);
				// 设置连接池的最大空闲时间！
//				dataSource.setMaxIdleTime(60);
				
				
				//测试连接关闭异常
				//设置连接检测是否可用
				dataSource.setTestConnectionOnCheckin(true);
				//设置自动测试table
//				dataSource.setAutomaticTestTable("C3P0TestTable");
			}
		} catch (PropertyVetoException e) {
			throw new RuntimeException(e);
		} catch (IOException e) {
			ExceptionManage.dispose(e, getClass());
		}
	}

	public final static void init(String ip) {
		if(null==dbManager){
			dbManager=new DBManager(ip);
		}
	}
	
	public final static DBManager getInstance() throws Exception{
		if(null==dbManager){
			throw new Exception("uninitialized");
		}
		return dbManager;
	}
	
	public final Connection getConnection() throws SQLException, Exception {
		try {
			return dataSource.getConnection();
		} catch (SQLException e) {
			ExceptionManage.infor("已经用了的最大连接数"+DBManager.getInstance().getDataSource().getNumBusyConnections(), this.getClass());
			throw new RuntimeException("无法从数据源获取连接 ", e);
		}
	}
	
	public ComboPooledDataSource getDataSource(){
		return this.dataSource;
	}
	
	/*add by stones on 20130802 for ..
	 * 清空非基本信息表以外 的 表 的 有关数据，允许直接调用
	 * **/
	public static void dbClear(){
		Connection conn = null;
		Statement state = null;
		try {
			conn = DBManager.getInstance().getConnection();
			state = conn.createStatement();
			List<String> tab=getTable();
			for(String tabName : tab){
				state.executeUpdate("truncate "+tabName);
			}
		} catch (Exception e) {
			ExceptionManage.dispose(e,DBManager.class);
		}finally{
				try {
				 if(null != state){
				  state.close();
				  }
				 if(null!= conn){
				    conn.close();
				 }
				} catch (SQLException e) {
				ExceptionManage.dispose(e,DBManager.class);
			}finally{
				state = null;
				conn = null;
			}
		}
	}
	private static List<String> getTable(){
		List<String> tl = new ArrayList<String>();
		tl.add(" acbuffer           ");
		tl.add(" acinfo             ");
		tl.add(" all_config         ");
		tl.add(" businessid         ");
		tl.add(" card_inst          ");
		tl.add(" clock_freque       ");
		tl.add(" current_alarm      ");
		tl.add(" e1_inst            ");
		tl.add(" ecn_ccn            ");
		tl.add(" ecn_interface      ");
		tl.add(" ecn_mcn            ");
		tl.add(" equip_inst         ");
		tl.add(" field              ");
		tl.add(" group_spread       ");
		tl.add(" history_alarm      ");
		tl.add(" history_performance");
		tl.add(" labelinfo          ");
		tl.add(" loop_protect       ");
		tl.add(" lspinfo            ");
		tl.add(" oamlinkinfo        ");
		tl.add(" oammepinfo         ");
		tl.add(" oammipinfo         ");
		tl.add(" ospf_area          ");
		tl.add(" ospf_info          ");
		tl.add(" ospf_redistribute  ");
		tl.add(" performance_task   ");
		tl.add(" port_inst          ");
		tl.add(" port_lag           ");
		tl.add(" port_stm           ");
		tl.add(" port_stm_timeslot  ");
		tl.add(" portattr           ");
		tl.add(" protect_rorate     ");
		tl.add(" protectioninfo     ");
		tl.add(" pwinfo             ");
		tl.add(" pwnnibuffer        ");
		tl.add(" qosinfo            ");
		tl.add(" qosqueue           ");
		tl.add(" qostemplateinfo    ");
		tl.add(" segment            ");
		tl.add(" serviceinfo        ");
		tl.add(" single_spread      ");
		tl.add(" site_inst          ");
		tl.add(" sitelock           ");
		tl.add(" slot_inst          ");
		tl.add(" tunnel             ");
		tl.add(" user_field         ");
		return tl;
	}
}
